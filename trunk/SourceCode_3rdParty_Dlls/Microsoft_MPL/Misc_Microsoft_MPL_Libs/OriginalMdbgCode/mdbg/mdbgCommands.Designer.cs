//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace O2.Debugger.Mdbg.OriginalMdbgCode.Mdbg {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class mdbgCommands {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal mdbgCommands() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("O2.Debugger.Mdbg.OriginalMdbgCode.mdbg.mdbgCommands", typeof(mdbgCommands).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: aprocess [number]
        ///    Switches to another debugged process or prints available processes.  The
        ///    numbers are not real PIDs but a 0-indexed list.
        ///.
        /// </summary>
        public static string aprocess_LongHelp {
            get {
                return ResourceManager.GetString("aprocess_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switches to another debugged process or prints available ones.
        /// </summary>
        public static string aprocess_ShortHelp {
            get {
                return ResourceManager.GetString("aprocess_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: attach [pid]
        ///    Attaches to a process or prints available processes
        ///See Also:
        ///    detach
        ///    processenum.
        /// </summary>
        public static string attach_LongHelp {
            get {
                return ResourceManager.GetString("attach_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attaches to a process or prints available processes.
        /// </summary>
        public static string attach_ShortHelp {
            get {
                return ResourceManager.GetString("attach_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: break [ClassName.Method | FileName:LineNo]
        ///    Sets a breakpoint at the specified Method.  Modules are scanned
        ///    sequentially.  &quot;break FileName:LineNo&quot; sets a breakpoint at location in the
        ///    source.  &quot;break ~number&quot; sets a breakpoint on a symbol recently displayed
        ///    with &apos;x&apos; command.  &quot;break module!ClassName.Method+IlOffset&quot; sets a
        ///    breakpoint on the fully qualified location.
        ///See Also:
        ///    delete
        ///    x.
        /// </summary>
        public static string break_LongHelp {
            get {
                return ResourceManager.GetString("break_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets or displays breakpoints.
        /// </summary>
        public static string break_ShortHelp {
            get {
                return ResourceManager.GetString("break_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: catch [exceptionType]
        ///    Example: catch ex    
        ///    This causes the debugger to break on all exceptions (Not just the unhandled
        ///    ones)
        ///    Use log command to log an event without stopping.
        ///See Also:
        ///    ignore, log.
        /// </summary>
        public static string catch_LongHelp {
            get {
                return ResourceManager.GetString("catch_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set or display what events will be stopped on.
        /// </summary>
        public static string catch_ShortHelp {
            get {
                return ResourceManager.GetString("catch_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: config [option value]
        ///    When invoked without arguments the command displays all configurable
        ///    options and how they are set. If the option is specified, it is set to
        ///    value.    
        ///    Currently available options are:
        ///    extpath:  set path where extensions are searched for when load command is
        ///    used.
        ///    extpath+: adds path to the existing paths where extensions can be loaded
        ///    from.
        ///See Also:
        ///    symbol
        ///    path.
        /// </summary>
        public static string config_LongHelp {
            get {
                return ResourceManager.GetString("config_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets or Displays debugger configurable options.
        /// </summary>
        public static string config_ShortHelp {
            get {
                return ResourceManager.GetString("config_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: connect computerName sessionName
        ///    Connects to a remote debugging session
        ///See Also:
        ///    server
        ///    runr.
        /// </summary>
        public static string connect_LongHelp {
            get {
                return ResourceManager.GetString("connect_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connects to a remote debugging session.
        /// </summary>
        public static string connect_ShortHelp {
            get {
                return ResourceManager.GetString("connect_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: delete [#]
        ///    Deletes a breakpoint
        ///See Also:
        ///    break.
        /// </summary>
        public static string delete_LongHelp {
            get {
                return ResourceManager.GetString("delete_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a breakpoint.
        /// </summary>
        public static string delete_ShortHelp {
            get {
                return ResourceManager.GetString("delete_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: detach
        ///    Detaches from debugged process
        ///See Also:
        ///    attach.
        /// </summary>
        public static string detach_LongHelp {
            get {
                return ResourceManager.GetString("detach_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Detaches from debugged process.
        /// </summary>
        public static string detach_ShortHelp {
            get {
                return ResourceManager.GetString("detach_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: down [frames]
        ///    Moves the active stack frame down
        ///See Also:
        ///    up.
        /// </summary>
        public static string down_LongHelp {
            get {
                return ResourceManager.GetString("down_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moves the active stack frame down.
        /// </summary>
        public static string down_ShortHelp {
            get {
                return ResourceManager.GetString("down_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: echo message
        ///    Echoes a message to the console
        ///.
        /// </summary>
        public static string echo_LongHelp {
            get {
                return ResourceManager.GetString("echo_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Echoes a message to the console.
        /// </summary>
        public static string echo_ShortHelp {
            get {
                return ResourceManager.GetString("echo_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: foreach [OtherCommand]
        ///    Where &quot;OtherCommand&quot; is a valid command that operates on one thread,
        ///    &quot;foreach OtherCommand&quot; will do the same thing to all threads.
        ///.
        /// </summary>
        public static string foreach_LongHelp {
            get {
                return ResourceManager.GetString("foreach_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executes other command on all threads.
        /// </summary>
        public static string foreach_ShortHelp {
            get {
                return ResourceManager.GetString("foreach_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: funceval [-ad Num] functionName [args ... ]
        ///    Performs a function evaluation on the current active thread.  The function
        ///    to evaluate is functionName.  Function needs to be	fully qualified
        ///    including namespaces.  Optional -ad parameter can specify what appdomain
        ///    space should be used for resolution of the function.  If the -ad switch is
        ///    not specified it is assumed that the appdomain for resolution is same as
        ///    where the thread that is used for function evaluation is located.  If the
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string funceval_LongHelp {
            get {
                return ResourceManager.GetString("funceval_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Evaluates a given function outside normal program flow.
        /// </summary>
        public static string funceval_ShortHelp {
            get {
                return ResourceManager.GetString("funceval_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: go
        ///    The program will continue until either a breakpoint is hit, the program
        ///    exits, or an event causes it to stop (for example an unhandled exception.)
        ///.
        /// </summary>
        public static string go_LongHelp {
            get {
                return ResourceManager.GetString("go_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Continues program execution.
        /// </summary>
        public static string go_ShortHelp {
            get {
                return ResourceManager.GetString("go_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: help
        ///    Prints this help screen.
        ///.
        /// </summary>
        public static string help_LongHelp {
            get {
                return ResourceManager.GetString("help_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prints this help screen..
        /// </summary>
        public static string help_ShortHelp {
            get {
                return ResourceManager.GetString("help_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ignore [event]
        ///    Opposite of catch. (&quot;help catch&quot; for more info)
        ///See Also:
        ///    catch.
        /// </summary>
        public static string ignore_LongHelp {
            get {
                return ResourceManager.GetString("ignore_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set or display what events will be ignored.
        /// </summary>
        public static string ignore_ShortHelp {
            get {
                return ResourceManager.GetString("ignore_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: intercept FrameNumber
        ///    If the debugger has stopped because of an exception, you may use this
        ///    command to roll things back to the given frame number, potentially change
        ///    something using &quot;set&quot; for example, and continue with &quot;go&quot; hoping to avoid
        ///    the exception the second time around.
        ///.
        /// </summary>
        public static string intercept_LongHelp {
            get {
                return ResourceManager.GetString("intercept_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intercepts the current exception at the given frame on the stack.
        /// </summary>
        public static string intercept_ShortHelp {
            get {
                return ResourceManager.GetString("intercept_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: kill
        ///    Kills the active process
        ///See Also:
        ///    run.
        /// </summary>
        public static string kill_LongHelp {
            get {
                return ResourceManager.GetString("kill_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kills the active process.
        /// </summary>
        public static string kill_ShortHelp {
            get {
                return ResourceManager.GetString("kill_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: list [modules|appdomains|assemblies]
        ///    Displays loaded modules appdomains or assemblies
        ///.
        /// </summary>
        public static string list_LongHelp {
            get {
                return ResourceManager.GetString("list_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays loaded modules appdomains or assemblies.
        /// </summary>
        public static string list_ShortHelp {
            get {
                return ResourceManager.GetString("list_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: load assemblyName
        ///    Extension is loaded in this way; we load specified assembly and try to
        ///    execute the static method LoadExtension from type
        ///    Microsoft.Tools.Mdbg.Extension.Extension.    
        ///Try &quot;load gui&quot; for example.
        ///.
        /// </summary>
        public static string load_LongHelp {
            get {
                return ResourceManager.GetString("load_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loads an extension from some assembly.
        /// </summary>
        public static string load_ShortHelp {
            get {
                return ResourceManager.GetString("load_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger will log the given event type but continue to run.
        ///This uses the same event types as the catch and ignore commands.
        ///Use ignore command to clear log status.
        ///    
        ///Usage: log [event type]
        ///    Example: log ml    
        ///    This causes the debugger to log all module loads
        ///
        ///See Also:
        ///    catch, ignore.
        /// </summary>
        public static string log_LongHelp {
            get {
                return ResourceManager.GetString("log_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set or display what events will be logged.
        /// </summary>
        public static string log_ShortHelp {
            get {
                return ResourceManager.GetString("log_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: mode [option on/off]
        ///    Set/Query different debugger options.  &quot;option&quot; should be a two-letter pair
        ///    from inside the (parentheses).    
        ///Example: mode nc on
        ///.
        /// </summary>
        public static string mode_LongHelp {
            get {
                return ResourceManager.GetString("mode_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set/Query different debugger options.
        /// </summary>
        public static string mode_ShortHelp {
            get {
                return ResourceManager.GetString("mode_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: newobj typeName [arguments...]
        ///    Creates a new object of type typeName.
        ///See Also:
        ///    funceval.
        /// </summary>
        public static string newobj_LongHelp {
            get {
                return ResourceManager.GetString("newobj_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates new object of type typeName.
        /// </summary>
        public static string newobj_ShortHelp {
            get {
                return ResourceManager.GetString("newobj_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: next
        ///    Debugger will execute whatever it needs to end up on the next line (even if
        ///    this includes many function calls).
        ///See Also:
        ///    out
        ///    step.
        /// </summary>
        public static string next_LongHelp {
            get {
                return ResourceManager.GetString("next_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Step Over.
        /// </summary>
        public static string next_ShortHelp {
            get {
                return ResourceManager.GetString("next_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: out
        ///    Debugger will bring execution to the end of the current function and leave
        ///    you in the calling function.
        ///See Also:
        ///    next
        ///    step.
        /// </summary>
        public static string out_LongHelp {
            get {
                return ResourceManager.GetString("out_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Steps Out of function.
        /// </summary>
        public static string out_ShortHelp {
            get {
                return ResourceManager.GetString("out_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: path [pathName]
        ///    This path will be searched for the source files if the location in the
        ///    binaries is not available.
        ///See Also:
        ///    symbol.
        /// </summary>
        public static string path_LongHelp {
            get {
                return ResourceManager.GetString("path_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets or displays current source path.
        /// </summary>
        public static string path_ShortHelp {
            get {
                return ResourceManager.GetString("path_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: print [var] | [-d]
        ///    Either prints all variables in scope &quot;print&quot;, the specified one &quot;print
        ///    var&quot;, or debugger variables &quot;print -d&quot;.
        ///See Also:
        ///    set.
        /// </summary>
        public static string print_LongHelp {
            get {
                return ResourceManager.GetString("print_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to prints local or debug variables.
        /// </summary>
        public static string print_ShortHelp {
            get {
                return ResourceManager.GetString("print_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: processenum
        ///    Displays active processes
        ///See Also:
        ///    attach.
        /// </summary>
        public static string processenum_LongHelp {
            get {
                return ResourceManager.GetString("processenum_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays active processes.
        /// </summary>
        public static string processenum_ShortHelp {
            get {
                return ResourceManager.GetString("processenum_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: quit [exitcode]
        ///    Exits the mdbg shell, optionally specifying the process exit code.
        ///.
        /// </summary>
        public static string quit_LongHelp {
            get {
                return ResourceManager.GetString("quit_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quits the program.
        /// </summary>
        public static string quit_ShortHelp {
            get {
                return ResourceManager.GetString("quit_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: resume [*|[~]threadNumber]
        ///    Resumes current thread or thread specified by threadNumber.  If
        ///    threadNumber is specified as &quot;*&quot; then command applies to all threads.  If
        ///    thread number starts with &quot;~&quot;, then the command applies to all threads
        ///    except one specified by number.  Resumed thread is let run freely when the
        ///    user calls &quot;go&quot;.  Current suspension status of the threads can be seen by
        ///    &quot;thread&quot; command.  Resuming non-suspended thread has no effect.
        ///See Also:
        ///    suspend
        ///    thread.
        /// </summary>
        public static string resume_LongHelp {
            get {
                return ResourceManager.GetString("resume_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resumes suspended thread.
        /// </summary>
        public static string resume_ShortHelp {
            get {
                return ResourceManager.GetString("resume_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: run [debug_flag] [-ver version_string] [[path_to_exe] [args_to_exe]]
        ///    Kills the current process (if there is one) and starts a new one. If no
        ///    executable argument is passed, this command runs the program that was
        ///    previously executed with the run command. If the executable argument is
        ///    provided, the specified program is run using the optionally supplied args. 
        ///    If class load, module load, and thread start events are being ignored (as
        ///    they are by default), then the program will stop [rest of string was truncated]&quot;;.
        /// </summary>
        public static string run_LongHelp {
            get {
                return ResourceManager.GetString("run_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runs a program under the debugger.
        /// </summary>
        public static string run_ShortHelp {
            get {
                return ResourceManager.GetString("run_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: runr
        ///    Runs a program remotely
        ///See Also:
        ///    connect
        ///    server.
        /// </summary>
        public static string runr_LongHelp {
            get {
                return ResourceManager.GetString("runr_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runs a program remotely.
        /// </summary>
        public static string runr_ShortHelp {
            get {
                return ResourceManager.GetString("runr_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: server sessionName
        ///    Makes a debugging session available to others
        ///See Also:
        ///    connect
        ///    runr.
        /// </summary>
        public static string server_LongHelp {
            get {
                return ResourceManager.GetString("server_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes a debugging session available to others.
        /// </summary>
        public static string server_ShortHelp {
            get {
                return ResourceManager.GetString("server_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: set variable=value
        ///    You may alter the value of any in scope variable.  You may also create your
        ///    own &quot;debugger&quot; variables and assign to them reference values from within
        ///    your application.  These values will act as handles to the original value,
        ///    even when the real one is out of scope.  All such &quot;debugger&quot; variables must
        ///    begin with &quot;$&quot;, for example &quot;$var&quot;.  Clear these handles by setting them to
        ///    nothing, like this: &quot;set $var=&quot;
        ///See Also:
        ///    print.
        /// </summary>
        public static string set_LongHelp {
            get {
                return ResourceManager.GetString("set_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets a variable to a new value.
        /// </summary>
        public static string set_ShortHelp {
            get {
                return ResourceManager.GetString("set_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: setip [-il] number
        ///    Sets current Instruction Pointer (ip) in the file to the position as
        ///    specified.  If -il optional switch is specified than the number represents
        ///    an IL (Intermediate Language) offset in the method. Otherwise the number
        ///    represents a source line number.
        ///.
        /// </summary>
        public static string setip_LongHelp {
            get {
                return ResourceManager.GetString("setip_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets an ip into new position in the current function.
        /// </summary>
        public static string setip_ShortHelp {
            get {
                return ResourceManager.GetString("setip_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: show [lines]
        ///    Optional &quot;lines&quot; specifies how far above and below the current line it will
        ///    show.
        ///.
        /// </summary>
        public static string show_LongHelp {
            get {
                return ResourceManager.GetString("show_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show sources around the current location.
        /// </summary>
        public static string show_ShortHelp {
            get {
                return ResourceManager.GetString("show_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: step
        ///    Debugger will bring execution into the next function on the current line or
        ///    move to the next line if there is no function to step into.
        ///See Also:
        ///    out
        ///    next.
        /// </summary>
        public static string step_LongHelp {
            get {
                return ResourceManager.GetString("step_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Step Into.
        /// </summary>
        public static string step_ShortHelp {
            get {
                return ResourceManager.GetString("step_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: suspend [*|[~]threadNumber]
        ///    Suspends current thread or thread specified by threadNumber.  If
        ///    threadNumber is specified as &quot;*&quot; then command applies to all threads.  If
        ///    thread number starts with &quot;~&quot;, then the command applies to all threads
        ///    except one specified by number.  Suspended threads are excluded from
        ///    running when the process is let run by either &quot;go&quot;, or &quot;step&quot; command.  If
        ///    there is no non-suspended thread in the process and the user issues &quot;go&quot;
        ///    command, the process d [rest of string was truncated]&quot;;.
        /// </summary>
        public static string suspend_LongHelp {
            get {
                return ResourceManager.GetString("suspend_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevents thread from running.
        /// </summary>
        public static string suspend_ShortHelp {
            get {
                return ResourceManager.GetString("suspend_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: symbol commandName [commandParameters]
        ///    symbol path [path_value]
        ///        Displays or sets current symbol path to path_value.
        ///
        ///    symbol addpath path_value 
        ///        Adds an extra path to the current symbol path.
        ///
        ///    symbol reload [moduleName] 
        ///        Reloads symbols for all modules (if none is specified) or
        ///        just for the module moduleName.
        ///
        ///    symbol list [moduleName] 
        ///        Shows currently loaded symbols for either all modules
        ///        or the module moduleName if specified.
        ///
        ///See Also:
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string symbol_LongHelp {
            get {
                return ResourceManager.GetString("symbol_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets/Displays path or Reloads/Lists symbols.
        /// </summary>
        public static string symbol_ShortHelp {
            get {
                return ResourceManager.GetString("symbol_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: thread -nick name
        ///    Assigns &apos;name&apos; as Nickname to the currently active thread.  Nickname can be
        ///    used instead of thread name.  Nicknames cannot be numbers. If the current
        ///    thread already has some nickname assigned, old nickname is replaced with
        ///    new one. If the new nickname is &quot;&quot;, the nickname for current thread is
        ///    deleted and no new nickname is assigned to the thread.  &quot;thread newThread&quot;
        ///    Sets the active thread to newThread. newThread can be either nickname for
        ///    the thread or th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string thread_LongHelp {
            get {
                return ResourceManager.GetString("thread_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays active threads or switches to a specified thread.
        /// </summary>
        public static string thread_ShortHelp {
            get {
                return ResourceManager.GetString("thread_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: up [frames]
        ///    Moves the active stack frame up
        ///See Also:
        ///    down.
        /// </summary>
        public static string up_LongHelp {
            get {
                return ResourceManager.GetString("up_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moves the active stack frame up.
        /// </summary>
        public static string up_ShortHelp {
            get {
                return ResourceManager.GetString("up_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: uwgchandle [var] | [address]
        ///    Prints the variable tracked by a handle. The handle can be specified by
        ///    name or address.
        ///.
        /// </summary>
        public static string uwgchandle_LongHelp {
            get {
                return ResourceManager.GetString("uwgchandle_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prints the object tracked by a GC handle.
        /// </summary>
        public static string uwgchandle_ShortHelp {
            get {
                return ResourceManager.GetString("uwgchandle_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: when
        ///    when    
        ///        displays currently active when statements    
        ///        
        ///    when delete all | num [num [num ...]]    
        ///        deletes when statement specified by number (or all if &quot;all&quot;
        ///    specified)    
        ///        
        ///    when stopReason [specific_condition] do cmd [cmd [cmd ...] ]    
        ///        stopReason can be:    
        ///    StepComplete, ProcessExited, ThreadCreated, BreakpointHit, ModuleLoaded,
        ///    ClassLoaded, AssemblyLoaded, AssemblyUnloaded, ControlCTrapped,
        ///    ExceptionThrown, UnhandledExcepti [rest of string was truncated]&quot;;.
        /// </summary>
        public static string when_LongHelp {
            get {
                return ResourceManager.GetString("when_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Execute commands based on debugger event.
        /// </summary>
        public static string when_ShortHelp {
            get {
                return ResourceManager.GetString("when_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: where [-v] [-c depth] [threadID]
        ///    The -v switch provides verbose information about each displayed
        ///    stack-frame.  If you specify a number for the depth, this limits how many
        ///    frames are displayed.  Use &quot;all&quot; to get all frames.  The default is 100. 
        ///    If you specify the threadID, you can control which thread the stack is for.
        ///     Default is current frame only.  &quot;all&quot; will display for all threads.
        ///.
        /// </summary>
        public static string where_LongHelp {
            get {
                return ResourceManager.GetString("where_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prints a stack trace.
        /// </summary>
        public static string where_ShortHelp {
            get {
                return ResourceManager.GetString("where_ShortHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: x [-c numSymbols] [module[!pattern]]
        ///    Displays functions matching [pattern] for a module.  If numSymbols is
        ///    provided, the output is limited to the given number.  If !regex is not
        ///    provided, all functions are displayed.  If module is not provided either,
        ///    all loaded modules are displayed.  Symbols (~#) may be used to set
        ///    breakpoints using the &quot;break&quot; command.    
        ///Example: x mscorlib!*String*
        ///See Also:
        ///    break.
        /// </summary>
        public static string x_LongHelp {
            get {
                return ResourceManager.GetString("x_LongHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays functions in a module.
        /// </summary>
        public static string x_ShortHelp {
            get {
                return ResourceManager.GetString("x_ShortHelp", resourceCulture);
            }
        }
    }
}

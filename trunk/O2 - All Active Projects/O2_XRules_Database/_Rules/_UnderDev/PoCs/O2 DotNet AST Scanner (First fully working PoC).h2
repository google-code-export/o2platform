<?xml version="1.0"?>
<H2>
  <SourceCode>// build Gui for dev
/*panel.clear(); 
var panel = O2Gui.open&lt;Panel&gt;("O2 DotNet AST Scanner PoC",800,500);
var controls = panel2.add_1x2("methods","MethodStream", "CodeStream", true);  
var script = controls[0].add_Script(false); 
var graph = controls[1].add_Graph();  
var treeView = controls[2].add_TreeView();
var codeStream = treeView.insert_Right&lt;ascx_SourceCodeViewer&gt;(200);

  script.InvocationParameters.add("files",files.ToArray()); 
script.InvocationParameters.add("file1",files[0]);
script.InvocationParameters.add("graph", graph); 
script.InvocationParameters.add("codeStream", codeStream); 
script.InvocationParameters.add("treeView",treeView);
*/
// build Gui for PoC
var panel2 = O2Gui.open&lt;Panel&gt;("O2 DotNet AST Scanner PoC",800,500);  
var controls = panel2.add_1x2("treeView","code", "Graph", true,300,200);    

var treeView = controls[0].add_TreeView();
var codeStream = controls[1].add_SourceCodeViewer();
var graph = controls[2].add_Graph();  

// use Gui (this script was inside the 'script' control

var targetFolder = @"C:\O2\DemoData\HacmeBank_FLAT_VIEW";
var files = targetFolder.files();
var currentFile = files[0];  
      
var astData = new O2MappedAstData();    
astData.O2AstResolver.addReference("");   // to load MsCorLib.dll
astData.loadFile(currentFile);               
treeView.afterSelect&lt;O2CodeStreamNode&gt;
	((streamNode)=&gt; codeStream.editor().setSelectionText(streamNode.INode.StartLocation, streamNode.INode.EndLocation));
     
var taintRules = new O2CodeStreamTaintRules(); 
//taintRules.add_TaintPropagator("System.String.Concat");
var o2CodeStream = new O2CodeStream(astData,taintRules, currentFile); 
 
var iMethod = astData.iMethods()[0];
//o2CodeStream.map_IMethod(iMethod); 
var methodDeclaration = astData.methodDeclaration(iMethod); 
var parameter = methodDeclaration.parameters()[1];
o2CodeStream.createStream(parameter,null);  

o2CodeStream.show(treeView);    
o2CodeStream.show(codeStream.editor()); 
o2CodeStream.show(graph); 
return "done";

// create &amp; show findings
/*
var o2Findings = o2CodeStream.o2Findings();   
var o2FindingsViewer = O2Gui.open&lt;ascx_FindingsViewer&gt;(); 
o2FindingsViewer.loadO2Findings(o2Findings); 
o2FindingsViewer.invokeOnThread( 
	()=&gt; {
			o2FindingsViewer._ShowNoEnginesLoadedAlert = false;
			o2FindingsViewer.setTraceTreeViewVisibleStatus(true);
		 });
*/



return "done";

//using ICSharpCode.SharpDevelop.Dom 
//using O2.Views.ASCX.O2Findings
//using O2.DotNetWrappers.O2Findings 
//using O2.External.SharpDevelop.AST
//using O2.API.AST.ExtensionMethods.CSharp
//O2File:C:\O2\_XRules_Local\ExtensionMethods\extra_WebAutomation.cs 
//O2File:C:\O2\_XRules_Local\ExtensionMethods\O2CodeStream_ExtensionMethods.cs
//O2File:C:\O2\_XRules_Local\ExtensionMethods\extra_VisualizationAPI.cs
//O2File:C:\O2\_XRules_Local\ExtensionMethods\O2CodeStreamTaintRules_ExtensionMethods.cs </SourceCode>
  <ReferencedAssemblies />
</H2>
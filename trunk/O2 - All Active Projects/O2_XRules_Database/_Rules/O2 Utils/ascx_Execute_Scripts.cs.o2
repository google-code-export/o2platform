// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
//O2Tag_OnlyAddReferencedAssemblies
//O2Ref:System.dll
//O2Ref:System.Drawing.dll
//O2Ref:System.Core.dll
//O2Ref:System.Windows.Forms.dll
//O2Ref:O2_Kernel.dll
//O2Ref:O2_Interfaces.dll
//O2Ref:O2_DotNetWrappers.dll
//O2Ref:O2_Views_ASCX.dll
//O2Ref:O2_External_SharpDevelop.dll
//O2Ref:O2_Core_XRules.dll
using System;
using System.Drawing;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using O2.Kernel;
using O2.Kernel.ExtensionMethods;
using O2.Interfaces.O2Core;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;
using O2.DotNetWrappers.ExtensionMethods;
using O2.Views.ASCX.classes.MainGUI;
using O2.Views.ASCX;
using O2.External.SharpDevelop.Ascx;
using O2.External.SharpDevelop.AST;
using O2.External.SharpDevelop.ExtensionMethods;
using O2.DotNetWrappers.H2Scripts;
using O2.DotNetWrappers.Network;
using O2.Core.XRules.XRulesEngine;

//O2File:C:\O2\_O2 - LOCAL SVN - DEV\O2 - All Active Projects\O2Core\O2_DotNetWrappers\Network\Web.cs

namespace O2.XRules.Database
{ 
    public class ascx_Execute_Scripts: UserControl
    {   
    	public string pathToPictureBox = "";    
    	public string currentScript = "";
    	public CSharp_FastCompiler csharpCompiler;  
    	
    	public Label statusLabel;
    	public RichTextBox results_RichTextBox;
		public SplitContainer mainSplitContainer;		
		
        public static void startControl()
    	{   
    		var executeScripts = (ascx_Execute_Scripts)typeof(ascx_Execute_Scripts).showAsForm("Execute *.cs *.o2 and *.cs scripts",250, 250);		    		
    		executeScripts.invokeOnThread(
    			()=>{
    					executeScripts.buildGui();
            			var scriptToExecute = ClickOnceDeployment.getClickOnceScriptPath();
            			if (scriptToExecute.fileExists())      
            				executeScripts.openSimpleScriptEditor();
                			//executeScripts.loadH2Script(scriptToExecute);            
    				});
    	}    	
    	
    	public ascx_Execute_Scripts()
    	{    
    		var logoFile = "O2_Logo.gif";
    		var tempPath = System.IO.Path.Combine(PublicDI.config.O2TempDir,logoFile);
    		if (! tempPath.fileExists())
		    	pathToPictureBox = Web.checkIfFileExistsAndDownloadIfNot(logoFile, @"http://deploy.o2-ounceopen.com/_O2_Development/O2%20Images%20%28misc%20bunch%29/JustLogo.gif");
		    else
		    	pathToPictureBox = tempPath;		    
        }
    
        private void buildGui()
        {   
                	
        	// add controls            
            this.BackColor = Color.White;
			var topPanel = this.add_Panel();         			
        	var pictureBox = (PictureBox)topPanel.add_PictureBox()
        							 .location(20,20)
        							 .align_Bottom(this, 50)
        							 .align_Right(this,20);        	
        			              	
        	statusLabel = (Label)topPanel.add_Label("Drop script on logo")
        						  		 .location(this.Height - 40,60)
        						  		 .anchor()
        						  		 .bottom();
        						  		 
			statusLabel.Font = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold);
        	
        	results_RichTextBox = this.add_RichTextBox();        
        					   
        	mainSplitContainer = topPanel.insert_Below(results_RichTextBox,100)
        							     .get<SplitContainer>();        	         	                
        	        
        	mainSplitContainer.Panel2Collapsed = true;
        	
        	var contextMenu = pictureBox.add_ContextMenu();        	
        	contextMenu.add("View loaded script source Code", (item)=> showLoadedScriptSourceCode() );
        	contextMenu.add("Execute Again", (item)=> executeCompiledCode() );
        	contextMenu.add("View available scripts", (item)=> showAvailableScripts() );
        	contextMenu.add("Open Simple Script Editor", (item)=> openSimpleScriptEditor() );
        	
        	// load data map actions
			if (pathToPictureBox.fileExists())
        		pictureBox.load(pathToPictureBox);        	

        	pictureBox.onDrop((file)=>loadH2Script(file));        	        	        
        	
        	
        	// put this on menu item
        	//this.add_Link("reload",10,2,()=>loadH2Script());
        	
        	
     	}        	     	
     	
     	public void loadH2Script()
     	{     	
     		loadH2Script(currentScript);
     	}
     	
     	public void loadH2Script(string scriptToLoad)
     	{     	     		
     		if (scriptToLoad.fileName().starts(this.typeName()))
     		{
           		PublicDI.log.error("We can execute the current type of we will get a recursive load :)");
				return;
			}					     		
     		currentScript = scriptToLoad;
     		statusLabel.set_Text("loading script: {0}".format( scriptToLoad.fileName()));
     		
     		csharpCompiler = new CSharp_FastCompiler();     
			     		 		
	    	csharpCompiler.onAstFail = ()=> showError("Ast creation failed", csharpCompiler.AstErrors);
	     			 
	     	csharpCompiler.onAstOK = ()=> showInfo("Ast creation Ok");	     				     		 		
     		 		
     		 csharpCompiler.onCompileFail = () => showError("Compilation failed", csharpCompiler.CompilationErrors);
     		 		
     		 csharpCompiler.onCompileOK =
							     		 	()=>{
							     					showInfo("Compilation Ok: Executing 1st method");
							     					var result = (executeCompiledCode() ?? "").ToString();
							     					showInfo("Execution Completed",result);     					     					
												};
			
			var sourceCode = "";			
			if (scriptToLoad.extension(".h2"))
				sourceCode = H2.load(scriptToLoad).SourceCode;
			if (scriptToLoad.extension(".o2") || scriptToLoad.extension(".cs"))
				sourceCode = scriptToLoad.contents();			
			if (sourceCode.valid())
				csharpCompiler.compileSnippet(sourceCode);
			else
				statusLabel.set_Text("Non supported file").textColor(Color.Red);					
     	}     	  
     	
     	public void showLoadedScriptSourceCode()
     	{
     		if (currentScript.fileExists())
     		{
     			var sourceCodeViewer = (ascx_SourceCodeViewer)typeof(ascx_SourceCodeViewer)
     										.showAsForm("source code for: {0}".format(currentScript), 600,200);
     			sourceCodeViewer.editor().loadSourceCodeFile(currentScript);							
     		}
     	}
     	
     	public void showAvailableScripts()
     	{     		
            var path = XRules_Config.PathTo_XRulesDatabase_fromO2;

            Action<TreeView, TreeNode> mapFoldersAndFiles =
                (targetTreeView, treeNode) =>
                {
                    targetTreeView.clear(treeNode);
                    var folder = treeNode.Tag.ToString();
                    foreach (var dir in folder.dirs())
                        targetTreeView.add_Node(treeNode, dir.fileName(), dir, true)
                            .ForeColor = Color.DarkOrange;
                    foreach (var file in folder.files())
                        targetTreeView.add_Node(treeNode, file.fileName(), file, false)
                            .ForeColor = Color.DarkBlue;
                };
            //var treeView = new TreeView();
            var treeView = (TreeView)WinForms.showAscxInForm(typeof(TreeView),"O2 - Available scripts");
            treeView.BeforeExpand += (sender, e) => { mapFoldersAndFiles(treeView, e.Node); };
            treeView.ItemDrag += (sender, e) =>
            {
                var node = (TreeNode)e.Item;
                treeView.SelectedNode = node;
                var target = node.Tag.ToString();
                if (target.isFile())
                    treeView.DoDragDrop(target, DragDropEffects.Copy);
            };

            var rootNode = treeView.add_Node("Scripts in: " + path + "", path, true);
            mapFoldersAndFiles(treeView, rootNode);
            rootNode.Expand();
     	}
     	
     	public void openSimpleScriptEditor()
     	{
            ascx_Simple_Script_Editor.startControl();
     		//typeof(ascx_Simple_Script_Editor).showAsForm("Simple Script Editor", 600,400);     		
     	}
     	
     	public object executeCompiledCode()
     	{
     		if (csharpCompiler != null)
     			if (csharpCompiler.CompilerResults != null)
     				if (csharpCompiler.CompilerResults.CompiledAssembly != null)
     					return csharpCompiler.executeFirstMethod();
     		return null;
     	}
     	
     	public void showError(string errorMessage, string errorDetails)
     	{
     		statusLabel.set_Text(errorMessage).textColor(Color.Red);
			results_RichTextBox.set_Text(errorDetails).textColor(Color.Red);			
     		mainSplitContainer.Panel2Collapsed = false;
     	}
     	
     	public void showInfo(string infoMessage)
     	{
     		showInfo(infoMessage,null);
     	}
     	
     	public void showInfo(string infoMessage, object details)
     	{
     		statusLabel.set_Text(infoMessage).textColor(Color.Green);  
     		if (details != null)     		
     		{
     			var data = details.ToString();
     			if (data.valid())
     			{
     				results_RichTextBox.textColor(Color.Black).set_Text(data.ToString());	
     				mainSplitContainer.Panel2Collapsed = false;
     				return;
     			}     				
     		}
     		mainSplitContainer.Panel2Collapsed = true;
     	}
    }
    
    
    
    public static class extra
    {
    	public static Control add_Panel(this Control control)
    	{
    		return control.add_Control<Panel>();
    	}
    	
    	public static T get<T>(this List<Control> controls) where T : Control
    	{
    		foreach(Control control in controls)
    			if (control.type() == typeof(T))
    				return (T)control;
    		return null;
    	}
    	
    	//reflection
    	
    	public static List<Type> types(this Assembly assembly)
    	{
    		return PublicDI.reflection.getTypes(assembly);
    	}
    	
    	public static Assembly compile(this string pathToFileToCompile)
    	{
    		var csharpCompiler = new CSharp_FastCompiler();
    		
    		var compileProcess = new System.Threading.AutoResetEvent(false);
    		
    		csharpCompiler.compileSourceCode(pathToFileToCompile.contents());    		
    		csharpCompiler.onCompileFail= ()=> compileProcess.Set();
    		csharpCompiler.onCompileOK = ()=> compileProcess.Set();
    		compileProcess.WaitOne();
    		return csharpCompiler.assembly();    		    	
    	}
    	
    	public static Assembly assembly(this CSharp_FastCompiler csharpCompiler)
    	{
    		if (csharpCompiler != null)
     			if (csharpCompiler.CompilerResults != null)
     				if (csharpCompiler.CompilerResults.CompiledAssembly != null)
     					return csharpCompiler.CompilerResults.CompiledAssembly;
     		return null;
    	}
    	
    	public static MethodInfo firstMethod(this Assembly assembly)
    	{
    		var methods = assembly.methods();
        	if (methods.Count >0)          
        		return methods[0];
        	return null;
    	}
    }
}

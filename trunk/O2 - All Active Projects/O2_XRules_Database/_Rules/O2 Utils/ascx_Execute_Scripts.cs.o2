// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
//O2Tag_OnlyAddReferencedAssemblies
//O2Ref:System.dll
//O2Ref:System.Drawing.dll
//O2Ref:System.Core.dll
//O2Ref:System.Windows.Forms.dll
//O2Ref:O2_Kernel.dll
//O2Ref:O2_Interfaces.dll
//O2Ref:O2_DotNetWrappers.dll
//O2Ref:O2_Views_ASCX.dll
//O2Ref:O2_External_SharpDevelop.dll
//O2Ref:O2_Core_XRules.dll
//O2File:ascx_Simple_Script_Editor.cs.o2
//O2File:Wizard - Sync XRules Via Svn.cs.o2

using System;
using System.Drawing;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using O2.Kernel;
using O2.Kernel.ExtensionMethods;
using O2.Interfaces.O2Core;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;
using O2.DotNetWrappers.ExtensionMethods;
using O2.Views.ASCX.classes.MainGUI;
using O2.Views.ASCX;
using O2.External.SharpDevelop.Ascx;
using O2.External.SharpDevelop.AST;
using O2.External.SharpDevelop.ExtensionMethods;
using O2.DotNetWrappers.H2Scripts;
using O2.DotNetWrappers.Network;
using O2.Core.XRules.XRulesEngine;
using O2.Core.XRules._Wizards;
using O2.Views.ASCX.Ascx.MainGUI;
using O2.Views.ASCX.ExtensionMethods;
using O2.XRules.Database.O2Utils;
using O2.Core.XRules.Classes;

namespace O2.XRules.Database
{ 
    public class ascx_Execute_Scripts: UserControl
    {
        public string welcomeMessage = "Hello! To start right-click on the logo";
        public string pathToPictureBox = "";    
    	public string currentScript = "";
    	public CSharp_FastCompiler csharpCompiler;  
    	
    	//public Label statusLabel;
    	public RichTextBox results_RichTextBox;
		public SplitContainer mainSplitContainer;
        public ToolStripStatusLabel statusLabel;

        public static void startControl()
    	{   
    		var executeScripts = (ascx_Execute_Scripts)typeof(ascx_Execute_Scripts).showAsForm("O2 XRules Database",240, 200);		    		
    		executeScripts.invokeOnThread(
    			()=>{
    					executeScripts.buildGui();
            			var scriptToExecute = ClickOnceDeployment.getClickOnceScriptPath();
            			if (scriptToExecute.fileExists())      
            				//executeScripts.openSimpleScriptEditor();
                			executeScripts.loadFile(scriptToExecute);            
    				});
    	}    	
    	
    	public ascx_Execute_Scripts()
    	{    
    		var logoFile = "..\\O2_Logo.gif";
    		var tempPath = this.tempDir().pathCombine(logoFile);
    		if (! tempPath.fileExists())
		    	pathToPictureBox = new Web().checkIfFileExistsAndDownloadIfNot(logoFile, @"http://deploy.o2-ounceopen.com/_O2_Development/O2%20Images%20%28misc%20bunch%29/JustLogo.gif");
		    else
		    	pathToPictureBox = tempPath;		    
        }
    
        private void buildGui()
        {               
        	// add controls    
            statusLabel = this.add_StatusStrip(Color.White);            
            this.BackColor = Color.White;
			var topPanel = this.add_Panel();         			
        	var pictureBox = (PictureBox)topPanel.add_PictureBox();
        							 //.location(20,20)
        							 //.align_Bottom(this, 50)
        							 //.align_Right(this,20);        	
        			              	
        	/*statusLabel = (Label)topPanel.add_Label("Drop script on logo")
        						  		 .location(this.Height - 40,60)
        						  		 .anchor()
        						  		 .bottom();*/
        						  		 
			//statusLabel.Font = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Regular);
            statusLabel.IsLink = true;
            statusLabel.LinkBehavior = LinkBehavior.NeverUnderline;            
            statusLabel.set_Text(welcomeMessage).textColor(this,Color.Black);

        	results_RichTextBox = this.add_RichTextBox();        
        					   
        	mainSplitContainer = topPanel.insert_Below(results_RichTextBox,100)
        							     .get<SplitContainer>();        	         	                
        	        
        	mainSplitContainer.panel2Collapsed(true);
        	
        	var contextMenu = pictureBox.add_ContextMenu();
            contextMenu.add_MenuItem("View available scripts", () => showAvailableScripts());
            contextMenu.add_MenuItem("Open O2 Command Prompt", () => openO2CommandPromt());            
            //contextMenu.add_MenuItem("Sync/Download local XRules From O2's Svn", () => syncO2ViaSvn());                       
            contextMenu.add_MenuItem("O2 Script Development &&  Debug")
                       .add_MenuItem("Open Simple Script Editor", () => openSimpleScriptEditor())
                       .add_MenuItem("Open quick development gui", () => open.devEnvironment())
                       .add_MenuItem("Open 'Graph' development gui", () => open.graphEditor())
                       .add_MenuItem("Open XRules/Script Editor", () => open.scriptEditor())
                       .add_MenuItem("O2 Object Model", () => open.o2ObjectModel())
                       .add_MenuItem("Current Script",false)
        	                        .add_MenuItem("View loaded script source Code", ()=> showLoadedScriptSourceCode() )
        	                        .add_MenuItem("Execute Again", ()=> executeCompiledCode() );            
            contextMenu.add_MenuItem("Tools")
                       .add_MenuItem("Image Screenshot tool", () => screenShotTool())
                       .add_MenuItem("O2 'Secret Data' Editor", () => new SecretDataEditor().showGui())                       
                       .add_MenuItem("Web Browser", () =>  open.webBrowser("http://www.o2platform.com"))
                       .add_MenuItem("Notepad", () =>  exec.cmd("notepad.exe"))
                       .add_MenuItem("Cmd.exe", () =>  exec.cmd("cmd.exe"));
            contextMenu.add_MenuItem("Open O2 Log Viewer", () => openO2LogViewer());
            contextMenu.add_MenuItem("Exit Application (and close all windows)", () => PublicDI.config.closeO2Process());
            
        	
        	// load data map actions
			if (pathToPictureBox.fileExists())
        		pictureBox.load(pathToPictureBox);

            pictureBox.onDrop((file) => loadFile(file));
            this.onDrop((file) => loadFile(file));

            pictureBox.DoubleClick += (sender, e) => showAvailableScripts();            
            statusLabel.Click += (sender, e) => openSimpleScriptEditor();            
            //statusLabel.textColor(this, Color.Black);
            
        	// put this on menu item
        	//this.add_Link("reload",10,2,()=>loadH2Script());

            syncO2ViaSvn();
     	}

        private void screenShotTool()
        {
            O2Thread.staThread(Fusion8.Cropper.Program.Main);            
        }        	     	
     	
     	public void loadH2Script()
     	{
            loadFile(currentScript);
     	}

        public object loadFile(string fileToLoad)
        { 
            if (fileToLoad.isImage())
            {
                statusLabel.set_Text("showing image: {0}".format(fileToLoad));
                return show.image(fileToLoad);
            }
            if (fileToLoad.isText())
            {
                statusLabel.set_Text("showing text file: {0}".format(fileToLoad));
                return show.file(fileToLoad);                               
            }
            if (fileToLoad.isDocument())                          
            {
                statusLabel.set_Text("showing rtf document: {0}".format(fileToLoad));
                return show.document(fileToLoad);  
            }
            return loadH2Script(fileToLoad);
        }

     	public object loadH2Script(string scriptToLoad)
     	{            
     		if (scriptToLoad.fileName().starts(this.typeName()))
     		{
           		PublicDI.log.error("We can execute the current type of we will get a recursive load :)");
				return null;
			}					     		
     		currentScript = scriptToLoad;
     		statusLabel.set_Text("loading script: {0}".format( scriptToLoad.fileName()));
     		
     		csharpCompiler = new CSharp_FastCompiler();     
			     		 		
	    	csharpCompiler.onAstFail = ()=> showError("Ast creation failed", csharpCompiler.AstErrors);
	     			 
	     	csharpCompiler.onAstOK = ()=> showInfo("Ast creation Ok");	     				     		 		
     		 		
     		csharpCompiler.onCompileFail = () => showError("Compilation failed", csharpCompiler.CompilationErrors);
     		 		
     		csharpCompiler.onCompileOK =
							     		 	()=>{
							     					showInfo("Compilation Ok: Executing 1st method");
							     					var result = (executeCompiledCode() ?? "").ToString();
							     					showInfo("Execution Completed",result);     					     					
												};
			
			var sourceCode = "";			
			if (scriptToLoad.extension(".h2"))
				sourceCode = H2.load(scriptToLoad).SourceCode;
			if (scriptToLoad.extension(".o2") || scriptToLoad.extension(".cs"))
				sourceCode = scriptToLoad.contents();			
			if (sourceCode.valid())
				csharpCompiler.compileSnippet(sourceCode);
			else
				statusLabel.set_Text("Non supported file").textColor(this,Color.Red);					
            return csharpCompiler;
     	}     	  
     	
     	public void showLoadedScriptSourceCode()
     	{
     		if (currentScript.fileExists())
     		{
     			var sourceCodeEditor = (ascx_SourceCodeEditor)typeof(ascx_SourceCodeEditor)
     										.showAsForm("source code for: {0}".format(currentScript), 600,200);
                sourceCodeEditor.loadSourceCodeFile(currentScript);							
     		}
     	}
     	
     	public void showAvailableScripts()
     	{     		
            status("Showing available scripts");
            var path = XRules_Config.PathTo_XRulesDatabase_fromO2;

            Action<TreeView, TreeNode> mapFoldersAndFiles =
                (targetTreeView, treeNode) =>
                {
                    targetTreeView.clear(treeNode);
                    var folder = treeNode.Tag.ToString();
                    foreach (var dir in folder.dirs())
                        if (dir.contains(".svn").isFalse())
                            targetTreeView.add_Node(treeNode, dir.fileName(), dir, true)
                                .ForeColor = Color.SaddleBrown;
                    foreach (var file in folder.files())
                        targetTreeView.add_Node(treeNode, file.fileName(), file, false)
                            .ForeColor = Color.DarkBlue;
                };
            //var treeView = new TreeView();
            var treeView = (TreeView)WinForms.showAscxInForm(typeof(TreeView),"O2 - Available scripts",300,300);
            treeView.BeforeExpand += (sender, e) => { mapFoldersAndFiles(treeView, e.Node); };
            treeView.NodeMouseDoubleClick += (sender ,e) =>
                {  
                    var target = e.Node.Tag.ToString();
                    if (target.isFile())
                        loadFile(target);
                };
            treeView.ItemDrag += (sender, e) =>
                {
                    var node = (TreeNode)e.Item;
                    treeView.SelectedNode = node;
                    var target = node.Tag.ToString();
                    if (target.isFile())
                        treeView.DoDragDrop(target, DragDropEffects.Copy);
                };

            var rootNode = treeView.add_Node("Scripts in: " + path + "", path, true);
            mapFoldersAndFiles(treeView, rootNode);
            treeView.expand(rootNode);            
     	}

        public void openO2CommandPromt()
        {
            O2Utils.O2CommandPrompt.run();
        }

     	public void openSimpleScriptEditor()
     	{
            O2Utils.ascx_Simple_Script_Editor.startControl();
     		//typeof(ascx_Simple_Script_Editor).showAsForm("Simple Script Editor", 600,400);     		
     	}

        public void syncO2ViaSvn()
        {
            O2Thread.mtaThread(() =>
                {
                    showInfo("Updating XRules using via SVN ...");
                    SvnApi.SyncLocalFolderWithO2XRulesDatabase();
                    showInfo("SVN XRules updated Update completed");
                    1000.sleep();
                    checkForClickOnceUpdates();
                    showInfo(welcomeMessage);
                });
            //new Wizard_SyncXRulesViaSvn().runWizard();
        }

        public void checkForClickOnceUpdates()
        {
            //if (ClickOnceDeployment.isClickOnceDeployment())
            {
                showInfo("Checking for ClickOnce updates");
                var XRulesWithUpdateCheckScript = XRules_Config.PathTo_XRulesDatabase_fromO2.pathCombine(@"\O2 Utils\AutoUpdate - Using Dll Ref.h2");
                if (XRulesWithUpdateCheckScript.fileExists().isFalse())
                    "[in checkForClickOnceUpdates]: could not find H2 script to execute: {0}".error(XRulesWithUpdateCheckScript);
                else
                {
                    XRulesWithUpdateCheckScript.executeH2Script();
                }
                showInfo("Check for ClickOnce updates completed");
            }

        }
        public void openO2LogViewer()
        {
            O2Gui.open<ascx_LogViewer>();
        }

     	public object executeCompiledCode()
     	{
            try
            {
     		    if (csharpCompiler != null)
     			    if (csharpCompiler.CompilerResults != null)
     				    if (csharpCompiler.CompilerResults.CompiledAssembly != null)
     					    return csharpCompiler.executeFirstMethod();
            }
            catch(Exception ex)
            {
                PublicDI.log.ex(ex,"in executeCompiledCode");
            }
     		return null;
     	}
     	
     	public void showError(string errorMessage, string errorDetails)
     	{
            statusLabel.set_Text(errorMessage).textColor(this,Color.Red);
            results_RichTextBox.set_Text(errorDetails).textColor(Color.Red);			
     		mainSplitContainer.panel2Collapsed(false);
     	}
     	
     	public void showInfo(string infoMessage)
     	{
     		showInfo(infoMessage,null);
     	}
     	
     	public void showInfo(string infoMessage, object details)
     	{
     		statusLabel.set_Text(infoMessage).textColor(this,Color.Green);  
     		if (details != null)     		
     		{
     			var data = details.ToString();
     			if (data.valid())
     			{
     				results_RichTextBox.textColor(Color.Black).set_Text(data.ToString());	
     				mainSplitContainer.panel2Collapsed(false);
     				return;
     			}     				
     		}
     		mainSplitContainer.panel2Collapsed(true);
     	}

        public void status(string newStatusText)
        {
            statusLabel.set_Text(newStatusText).textColor(this,Color.Black);
        }
    }

}

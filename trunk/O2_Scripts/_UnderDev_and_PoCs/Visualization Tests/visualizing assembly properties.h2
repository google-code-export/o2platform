<?xml version="1.0"?>
<H2>
  <SourceCode>using O2.API.Visualization.Twitter;
using O2.API.Visualization.ExtensionMethods;
using GraphSharp.Controls;
using GraphSharp;
using QuickGraph;
using O2.Script;
using O2.External.SharpDevelop.Ascx;
using O2.External.SharpDevelop.ExtensionMethods;
using O2.XRules.Database.ExtensionMethods;
using O2.External.IE.ExtensionMethods;
using O2.Views.ASCX.CoreControls;
using O2.Kernel.ExtensionMethods;
using O2.Interfaces;
using System.Drawing;
using System.Windows.Forms;
using System;
public class DynamicType
{
	public string dynamicMethod(object ReturnData, System.Windows.Forms.Panel panel, O2.XRules.Database.O2Utils.ascx_Simple_Script_Editor inspector)
	{
		panel.clear();
		var graphLayout = panel.add_Graph();
		var graph = O2.API.Visualization.GraphFactory.emptyGraph(); 
		var assembly = "C:\\O2\\_tempDir\\3-17-2010\\tmpCC1E.tmp.dll".assembly();
		var targetType = assembly.type("Data");		
		
		addProperties(graph,targetType);
		graphLayout.layout("ISOM"); 
		graphLayout.set_Graph(graph); 
		graphLayout.wpfInvoke(() =&gt;
		{
			graphLayout.OverlapRemovalConstraint = GraphSharp.Controls.AlgorithmConstraints.Must;
			graphLayout.OverlapRemovalAlgorithmType = "FSA";
		});		
		
		//graphLayout.showAllLayouts(3000); 
		return "done";
	}	
	public void addProperties(BidirectionalGraph&lt;object, IEdge&lt;object&gt;&gt; graph, Type type)
	{
		foreach (var property in type.properties())
		{			
			if (property.PropertyType.IsGenericType &amp;&amp; property.PropertyType.GetGenericArguments().Length ==1)
			{
				var propertyType = property.PropertyType.GetGenericArguments()[0];
				graph.edge(type.Name, propertyType.Name);
				addProperties(graph,propertyType);
			}
			else
				graph.edge(type.Name, property.Name);
		}
	}
	
}
//O2File:C:\O2\_XRules_Local\VisualizationAPI\extra.cs
</SourceCode>
  <ReferencedAssemblies />
</H2>
<?xml version="1.0"?>
<H2>
  <SourceCode>//var topPanel = panel.clear().add_Panel();
TextBox currentFilter_TextBox = null;
Action showProcessToHook = null;
//return 0x4740;
var count = 0; 
 
Action&lt;IntPtr,IntPtr , IntPtr, IntPtr&gt; GetMsg_GetMsg = 
	( Handle,  Message,  wParam,  lParam) =&gt;   
		{		  
			int menuCommand = 0;
			//if (count ++ &lt; 10) 
			//	"in GetMsg_GetMsg".info();
			switch(Message.ToInt32())  
			{ 
				case win32.WM_CREATE:
					"(GetMsg_GetMsg) WM_CREATE".info();
					break; 
				case win32.WM_DESTROY:
					"(GetMsg_GetMsg) WM_DESTROY".info();
					break;	
				case win32.WM_MOVE:
					"(GetMsg_GetMsg) WM_MOVE".info();
					break;		
				case win32.WM_SIZE:
					"(GetMsg_GetMsg) WM_SIZE".info();
					break;
				case win32.WM_ACTIVATE:
					"(GetMsg_GetMsg) WM_ACTIVATE".info();
					break;
				case win32.WM_COMMAND:
					"(GetMsg_GetMsg) WM_COMMAND".info();
					"(GetMsg_GetMsg) WM_SYSCOMMAND".info();
					menuCommand = (wParam.ToInt32() &amp; 0x0000FFFF);
					//int HighOrder = wParam.ToInt32() - LowOrder;
					"handle: {0}".debug(Handle);
					"menuCommand: {0}".debug(menuCommand);					
					break;	
				case win32.WM_SYSCOMMAND:
					"(GetMsg_GetMsg) WM_SYSCOMMAND".info();
					menuCommand = (wParam.ToInt32() &amp; 0x0000FFFF);					
					"handle: {0}".debug(Handle);
					"LowOrder: {0}".debug(menuCommand);										
					break;
				case win32.WM_MENUCOMMAND:
					"(GetMsg_GetMsg) WM_MENUCOMMAND".info();
					break;	
				case win32.WM_MENUSELECT:
					"(GetMsg_GetMsg) WM_MENUSELECT".info();
					break;										
			}
		};
 
 
//var process = "notepad.exe".startProcess();

//this.sleep(1000);  

var popupWindow = "Util - add Menu and inject Messages Hooks".popupWindow(); 	
popupWindow.insert_LogViewer();

var genericWindow = new GenericWindow();   
genericWindow.AssignHandle(popupWindow.Handle); 
//return "ok";
//genericWindow.details(); 


var _GlobalHooks = new GlobalHooks(popupWindow.Handle);
_GlobalHooks.GetMsg.GetMsg += new TransparencyMenu.GlobalHooks.WndProcEventHandler(GetMsg_GetMsg);// genericWindow.GetMsg_GetMsg); //

genericWindow.WindowsMessage = _GlobalHooks.ProcessWindowMessage; 




//return "no menu added";
//StringBuilder Title = new StringBuilder(256); 
//win32.SetWindowText(mainHandle, "this is a test");
//win32.GetWindowText(mainHandle, Title, 256); 	
Action&lt;Process&gt; addMenuItem =  
	(process)=&gt;{						
			var _Handle = process.MainWindowHandle;//Processes.getProcessCalled("notepad").MainWindowHandle;
		
			"Main Window HANDLE: {0}".info(_Handle);
			
			// insert SysMenu
			var sysMenuHandle = win32.GetSystemMenu(_Handle, false);        
			var numberOfSysMenuItems = win32.GetMenuItemCount(sysMenuHandle);
			var menuHandle  = win32.CreateMenu();  
			win32.InsertMenu(menuHandle, -1, win32.MF_BYPOSITION, 02001, "Send Command 02001 ");
			win32.InsertMenu(menuHandle, -1, win32.MF_BYPOSITION, 02002, "Send Command 02002 ");
			if (win32.InsertMenu(sysMenuHandle, numberOfSysMenuItems - 0, win32.MF_BYPOSITION | win32.MF_POPUP, menuHandle, "O2 Menu"))
				"O2's Sys Nenu added".info();
			else	
				"Failed to add O2 menu".error();
			//insert normal menu
			
			var windowMenuHandle = win32.GetMenu(_Handle);
			var numberOfMenuItems = win32.GetMenuItemCount(windowMenuHandle);
			menuHandle  = win32.CreateMenu();  
			win32.InsertMenu(menuHandle, -1, win32.MF_BYPOSITION, 02003, "Send Command 02003");
			win32.InsertMenu(menuHandle, -1, win32.MF_BYPOSITION, 02004, "Send Command 02004");
			if (win32.InsertMenu(windowMenuHandle, numberOfMenuItems - 0, win32.MF_BYPOSITION | win32.MF_POPUP, menuHandle, "O2 Menu"))
				"O2's top level menu added".info();
			else	
				"Failed to add O2 menu".error();

			 
			//win32.RemoveMenu(WindowMenuHandle, Index - 0, win32.MF_BYPOSITION);
			//win32.DestroyMenu(menuHandle);	
						
			
		};

Process selectedProcess = null;

Action hookSelectedProcess =
	()=&gt;{
			GlobalHooks.HookIndex = selectedProcess.Threads[0].Id; 
			if (GlobalHooks.HookIndex ==1)
			{
				"GlobalHooks.HookIndex was set to 0, stop execution since global hooks are not supported".error();
				return;
			}
			"Process Thread id: {0}".info(GlobalHooks.HookIndex);
			popupWindow.invokeOnThread(()=&gt; _GlobalHooks.GetMsg.Start() );
		};

Action unHookSelectedProcess =
	()=&gt;{
			"unHookSelectedProcess".info();
			 _GlobalHooks.GetMsg.Stop();
		};	
		


popupWindow.insert_Above(40,"Actions").add_Link("Add Menu item", 0,0,()=&gt; addMenuItem(selectedProcess))
			.append_Link("hook selected Process", 
				()=&gt; {	
						hookSelectedProcess();
					  })					  
			.append_Link("Stop Hooks", ()=&gt; unHookSelectedProcess())
			.append_Link("start notepad", ()=&gt; { 
													"notepad.exe".startProcess();
													currentFilter_TextBox.set_Text("notepad");
													showProcessToHook();
											    });
			//.append_TextBox("0").onTextChange((text)=&gt;  = text.toInt());

var treeView =  popupWindow.add_TreeView_with_PropertyGrid(false)
						   .afterSelect&lt;Process&gt;((process)=&gt;selectedProcess = process)
						   .sort();

Func&lt;Process, string&gt; processDescription = 
	(process)=&gt; {
					return "{0}  [id: {1}]".format(process.ProcessName, process.Id);
				};
var currentFilter = "";

showProcessToHook = 
	()=&gt;{	
			treeView.clear();
			if(currentFilter.valid())
				treeView.add_Nodes(Processes.getProcesses().where((process)=&gt; process.ProcessName.contains(currentFilter)), processDescription);
			else
				treeView.add_Nodes(Processes.getProcesses(),processDescription);  
		};		 

currentFilter_TextBox = treeView.insert_Above(20)
								.add_TextBox("filter","")
								.onTextChange((text)=&gt; { currentFilter = text; showProcessToHook();});
		
treeView.add_ContextMenu().add_MenuItem("refresh", ()=&gt; showProcessToHook());		

showProcessToHook();			
			 
return "done"; 

//using TransparencyMenu
//using System.Text
//using System.Diagnostics;
//using win32 = TransparencyMenu.Win32
//O2File:GenericWindow.cs
//O2File:GlobalHooks.cs
//O2File:Form1.cs
//O2File:Window.cs
//O2File:Win32.cs</SourceCode>
  <ReferencedAssemblies />
</H2>
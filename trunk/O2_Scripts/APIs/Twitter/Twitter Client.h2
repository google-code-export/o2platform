<?xml version="1.0"?>
<H2>
  <SourceCode>var fileWithCredentials = @"C:\O2\_USERDATA\TwitterAccounts.xml";
var mainPanel = O2Gui.open&lt;Panel&gt;("O2 Twitter Client", 900,400);

var wpfGui = mainPanel.add_Control&lt;WPF_GUI&gt;();
var tweetsToFetch = 40;
wpfGui.buildGui();			 

wpfGui.insert_Below&lt;Panel&gt;(130).add_LogViewer();
//var credentials = fileWithCredentials.deserialize&lt;SecretData&gt;();
ISecretData secretData = null; // = fileWithCredentials.deserialize&lt;SecretData&gt;(); 
var twitterAPI = new O2TwitterAPI(); 
wpfGui.Tag = twitterAPI;			//for the UnitTest
// TOP Panel

//var topPanel = wpfGui.insert_Above&lt;Panel&gt;(20); 
	         

var mainSection = wpfGui.add_Section("Main", "Welcome to O2's twitter client")
	.add_Link("User details",
		(panel)=&gt;{
					panel.add_Label("Current selected User",5,0);
					
					var usersComboBox = panel.add_ComboBox(0,120)
											 .onSelection&lt;ICredential&gt;( 
												   (credential)=&gt;{
												   					O2Thread.mtaThread(()=&gt; twitterAPI.login(credential));
																 });
					usersComboBox.append_Label("File with credentials")
							     .width(120)
							     .top(3)
						         .append_TextBox("")
						         .align_Right(panel)
						         .onTextChange((text)=&gt;{
						          							"onTextChange".debug();
						          							fileWithCredentials = text;
						          							secretData = fileWithCredentials.deserialize&lt;SecretData&gt;();
						          							usersComboBox.clear();           	 						
						          							if (secretData.notNull())
						          							{
						          								usersComboBox.add_Items(secretData.usernames("Twitter"));
						          								usersComboBox.select_Item(0);
						          							}
						          						})   
						         .set_Text(fileWithCredentials);
				    
				    var userName = panel.add_Label("UserName:", 40,0)
				    					.append_TextBox("",100);
				    var password = panel.add_Label("Password: ", 60,0)
				    					.append_TextBox("",100);
				    //password.Password = true;
				    var loginButton = password.append_Control&lt;Button&gt;()
				    					      .set_Text("Login")
				    					      .onClick(
				    					      	()=&gt;{
				    					      			var newCredential = new Credential(userName.get_Text(), password.get_Text());
				    					      			usersComboBox.add_Item(newCredential);
						          						usersComboBox.select_Item(0);
				    					      		});
				    					      
				    
		         	panel.add_Label("# Tweets to fetch", 100,00)
				       	 .append_TextBox(tweetsToFetch.str())
				         .onTextChange((text)=&gt;{
				         							if(text.isInt())
				         								tweetsToFetch = text.toInt();
			         							});

					userName.Tag = "username";   // do this so that we can find these textboxes from the unit tests
				    password.Tag = "password";			         							
/*					if (fileWithCredentials.fileExists().isFalse())
					{
						var userProvidedCredential = ascx_AskUserForLoginDetails.ask();     	
						if (userProvidedCredential.notNull())
						{
						  	usersComboBox.add_Item(userProvidedCredential);
						  	usersComboBox.selectFirst();
						} 
					}			         							*/
					
				 })

	// timelineTab   
	.add_Link("User's TimeLine",
		(panel)=&gt;{
					panel.add_TableList_With_Tweets("User Timeline",()=&gt; { return twitterAPI.home(tweetsToFetch);});				
				 })
	
	//userTweetsTab 
	.add_Link("User Tweets",
		(panel)=&gt;{
					panel.add_TableList_With_Tweets("User Tweets",()=&gt; { return twitterAPI.tweets(tweetsToFetch);});
				 })
			
	//writeTweetTab
	.add_Link("Write tweet",
		(panel)=&gt;{		
					var maxTweetSize = 140; 
					var tweetText = panel.add_TextArea(); 
					var bottomPanel = tweetText.insert_Below&lt;Panel&gt;(20);  
					var textSize = bottomPanel.add_Label("Tweet TextSize: 0",0,0);
	
								
					tweetText.onTextChange((text)=&gt;
						{		
							var size = text.size(); 
							textSize.set_Text("Tweet TextSize: {0}".format(size)); 
							tweetText.backColor( size &gt; maxTweetSize ? Color.Red : Color.White);
						});
					textSize.append_Link("post tweet",	
						()=&gt;
								{
									"in post tweet".debug();
									var response = twitterAPI.newTweet(tweetText.get_Text()); 
									if (response)
										tweetText.set_Text("");
									"after post tweet".debug();
								});
						
				})
	
//followersTab
	.add_Link("Followers",
		(panel)=&gt;{
					panel.add_TableList_With_Users(twitterAPI.followers());
				 })
		
//followingTab
	.add_Link("Following",
		(panel)=&gt;{
					panel.add_TableList_With_Users(twitterAPI.following());
				 });



//Options Tab
/*	  .add_Link("Options",
			  	()=&gt;{
			  		   wpfGui.WinFormPanel.clear();
					   wpfGui.WinFormPanel.						
			  		});*/

//Application.DoEvents();
//var userDetails = wpfGui.Links.name("User details");
//userDetails.click();

return mainPanel;  // for unit tests of this module	
// Defaut values 
													
return "ok";

/*
Panel panel2 = null;
var tabControl = panel2.add_TabControl();											 
//usersComboBox.add_Items(secretData.usernames());   
var writeTweetTab = tabControl.add_Tab("Write Tweet");
var timelineTab = tabControl.add_Tab("Public Timeline");
var userTweetsTab = tabControl.add_Tab("User Tweets");
var followersTab = tabControl.add_Tab("Followers").onSelected(()=&gt;{"followers".debug();});  
var followingTab = tabControl.add_Tab("Following").onSelected(()=&gt;{"following".debug();});
var optionsTab = tabControl.add_Tab("Options"); 
   
// optionsTab
optionsTab.add_Label("File with credentials",20,0)
          .append_TextBox(200)
          .onTextChange((text)=&gt;{
          							"onTextChange".debug();
          							fileWithCredentials = text;
          							secretData = fileWithCredentials.deserialize&lt;SecretData&gt;();
          							usersComboBox.clear();           	 						
          							usersComboBox.add_Items(secretData.usernames("Twitter"));
          							usersComboBox.select_Item(0);
          						})   
          .set_Text(fileWithCredentials);
 		  if (fileWithCredentials.fileExists().isFalse())
 		  {
 		  	var userProvidedCredential = ascx_AskUserForLoginDetails.ask();     	
 		  	if (userProvidedCredential.notNull())
 		  	{
	 		  	usersComboBox.add_Item(userProvidedCredential);
	 		  	usersComboBox.selectFirst();
	 		}
 		  }
 
// timelineTab   
timelineTab.onSelected(
	()=&gt;{
			timelineTab.add_TableList_With_Tweets(twitterAPI.home(500));
		});

//userTweetsTab 
userTweetsTab.onSelected(
	()=&gt;{
			userTweetsTab.add_TableList_With_Tweets(twitterAPI.tweets(500));
		}); 
		
//writeTweetTab
var maxTweetSize = 140; 
var tweetText = writeTweetTab.add_TextArea(); 
var bottomPanel = tweetText.insert_Below&lt;Panel&gt;(20);  
var textSize = bottomPanel.add_Label("Tweet TextSize: 0",0,0);
textSize.append_Link("post tweet",
	()=&gt;{
			"in post tweet".debug();
			var response = twitterAPI.newTweet(tweetText.get_Text()); 
			if (response)
				tweetText.set_Text("");
			"after post tweet".debug();			
		});
		
tweetText.onTextChange((text)=&gt;
	{		
		var size = text.size(); 
		textSize.set_Text("Tweet TextSize: {0}".format(size)); 
		tweetText.backColor( size &gt; maxTweetSize ? Color.Red : Color.White);
	});

//followersTab
followersTab.onSelected( 
	()=&gt;{
			followersTab.add_TableList_With_Users(twitterAPI.followers());
		});
		
//followingTab
followingTab.onSelected( 
	()=&gt;{
			followingTab.add_TableList_With_Users(twitterAPI.following());
		});
return "done";
*/ 
//O2File:ascx_AskUserForLoginDetails.cs
//O2File:O2TwitterAPI.cs
//O2File:WPF_GUI.cs

//O2Ref:TweetSharp.dll
//O2Ref:TweetSharp.Twitter.dll
//O2Ref:O2_API_Visualization.dll
//O2Ref:WindowsFormsIntegration.dll
//O2Ref:GraphSharp.dll
//O2Ref:QuickGraph.dll
//O2Ref:GraphSharp.Controls.dll
//O2Ref:ICSharpCode.AvalonEdit.dll
//O2Ref:WatiN.Core.1x.dll
</SourceCode>
  <ReferencedAssemblies />
</H2>
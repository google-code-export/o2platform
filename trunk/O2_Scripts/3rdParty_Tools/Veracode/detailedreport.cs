//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5420
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace https.www.veracode.com.schema.reports.export.Item1.Item0 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
    /// </para>
    /// </summary>
    public partial class detailedreport : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SeverityType> severityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator detailedreport(XElement xe) { return XTypedServices.ToXTypedElement<detailedreport>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static detailedreport() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("static-analysis", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("dynamic-analysis", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("manual-analysis", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("severity", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("flaw-status", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public detailedreport() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public AnalysisType staticanalysis {
            get {
                XElement x = this.GetElement(XName.Get("static-analysis", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((AnalysisType)(x));
            }
            set {
                this.SetElement(XName.Get("static-analysis", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public AnalysisType dynamicanalysis {
            get {
                XElement x = this.GetElement(XName.Get("dynamic-analysis", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((AnalysisType)(x));
            }
            set {
                this.SetElement(XName.Get("dynamic-analysis", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public ManualAnalysisType manualanalysis {
            get {
                XElement x = this.GetElement(XName.Get("manual-analysis", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((ManualAnalysisType)(x));
            }
            set {
                this.SetElement(XName.Get("manual-analysis", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public IList<SeverityType> severity {
            get {
                if ((this.severityField == null)) {
                    this.severityField = new XTypedList<SeverityType>(this, LinqToXsdTypeManager.Instance, XName.Get("severity", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.severityField;
            }
            set {
                if ((value == null)) {
                    this.severityField = null;
                }
                else {
                    if ((this.severityField == null)) {
                        this.severityField = XTypedList<SeverityType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("severity", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<SeverityType>(this.severityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (staticanalysis?, dynamicanalysis?, manualanalysis?, severity+, flawstatus)
        /// </para>
        /// </summary>
        public FlawStatusType flawstatus {
            get {
                XElement x = this.GetElement(XName.Get("flaw-status", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((FlawStatusType)(x));
            }
            set {
                this.SetElement(XName.Get("flaw-status", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string report_format_version {
            get {
                XAttribute x = this.Attribute(XName.Get("report_format_version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("report_format_version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string app_name {
            get {
                XAttribute x = this.Attribute(XName.Get("app_name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("app_name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal app_id {
            get {
                XAttribute x = this.Attribute(XName.Get("app_id", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("app_id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal build_id {
            get {
                XAttribute x = this.Attribute(XName.Get("build_id", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("build_id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string platform {
            get {
                XAttribute x = this.Attribute(XName.Get("platform", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("platform", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal assurance_level {
            get {
                XAttribute x = this.Attribute(XName.Get("assurance_level", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("assurance_level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string generation_date {
            get {
                XAttribute x = this.Attribute(XName.Get("generation_date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("generation_date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> total_flaws {
            get {
                XAttribute x = this.Attribute(XName.Get("total_flaws", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("total_flaws", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string teams {
            get {
                XAttribute x = this.Attribute(XName.Get("teams", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("teams", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string life_cycle_stage {
            get {
                XAttribute x = this.Attribute(XName.Get("life_cycle_stage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("life_cycle_stage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string planned_deployment_date {
            get {
                XAttribute x = this.Attribute(XName.Get("planned_deployment_date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("planned_deployment_date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string last_update_time {
            get {
                XAttribute x = this.Attribute(XName.Get("last_update_time", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("last_update_time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public bool is_latest_build {
            get {
                XAttribute x = this.Attribute(XName.Get("is_latest_build", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("is_latest_build", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("detailedreport", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static detailedreport Load(string xmlFile) {
            return XTypedServices.Load<detailedreport>(xmlFile);
        }
        
        public static detailedreport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<detailedreport>(xmlFile);
        }
        
        public static detailedreport Parse(string xml) {
            return XTypedServices.Parse<detailedreport>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<detailedreport>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("static-analysis", "https://www.veracode.com/schema/reports/export/1.0"), typeof(AnalysisType));
            localElementDictionary.Add(XName.Get("dynamic-analysis", "https://www.veracode.com/schema/reports/export/1.0"), typeof(AnalysisType));
            localElementDictionary.Add(XName.Get("manual-analysis", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ManualAnalysisType));
            localElementDictionary.Add(XName.Get("severity", "https://www.veracode.com/schema/reports/export/1.0"), typeof(SeverityType));
            localElementDictionary.Add(XName.Get("flaw-status", "https://www.veracode.com/schema/reports/export/1.0"), typeof(FlawStatusType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      For each severity, there is one attribute:
    ///      * level:  an integer between 0 and 5 inclusive.  The severity
    ///        5 flaws are the most severe; the severity 0 flaws are informational.
    ///        
    ///      There is one child element per severity:
    ///      * category: A category of flaws, with one per category for which there is at 
    ///        least one flaw.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (category*)
    /// </para>
    /// </summary>
    public partial class SeverityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CategoryType> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SeverityType(XElement xe) { return XTypedServices.ToXTypedElement<SeverityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SeverityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("category", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      For each severity, there is one attribute:
        ///      * level:  an integer between 0 and 5 inclusive.  The severity
        ///        5 flaws are the most severe; the severity 0 flaws are informational.
        ///        
        ///      There is one child element per severity:
        ///      * category: A category of flaws, with one per category for which there is at 
        ///        least one flaw.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (category*)
        /// </para>
        /// </summary>
        public SeverityType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (category*)
        /// </para>
        /// </summary>
        public IList<CategoryType> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<CategoryType>(this, LinqToXsdTypeManager.Instance, XName.Get("category", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<CategoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("category", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<CategoryType>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal level {
            get {
                XAttribute x = this.Attribute(XName.Get("level", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SeverityType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SeverityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("category", "https://www.veracode.com/schema/reports/export/1.0"), typeof(CategoryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      For each category, there are the following attributes:
    ///      * categoryid:  A numeric identifier for the category.
    ///      * categoryname:  The name of the category.
    ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
    ///        future release of the platform.)
    ///      
    ///      Each category also has the following child elements:
    ///      * desc:  A list of paragraphs describing the category.
    ///      * recommendations:  A list of paragraphs describing how to manage flaws within 
    ///        that category.
    ///      * cwe:  For each distinct CWE ID for which there is at least one flaw within this
    ///        category, there is a cwe element.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (desc, recommendations, cwe+)
    /// </para>
    /// </summary>
    public partial class CategoryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CweType> cweField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CategoryType(XElement xe) { return XTypedServices.ToXTypedElement<CategoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CategoryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("desc", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("recommendations", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("cwe", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      For each category, there are the following attributes:
        ///      * categoryid:  A numeric identifier for the category.
        ///      * categoryname:  The name of the category.
        ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
        ///        future release of the platform.)
        ///      
        ///      Each category also has the following child elements:
        ///      * desc:  A list of paragraphs describing the category.
        ///      * recommendations:  A list of paragraphs describing how to manage flaws within 
        ///        that category.
        ///      * cwe:  For each distinct CWE ID for which there is at least one flaw within this
        ///        category, there is a cwe element.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (desc, recommendations, cwe+)
        /// </para>
        /// </summary>
        public CategoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (desc, recommendations, cwe+)
        /// </para>
        /// </summary>
        public ParaListType desc {
            get {
                XElement x = this.GetElement(XName.Get("desc", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((ParaListType)(x));
            }
            set {
                this.SetElement(XName.Get("desc", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (desc, recommendations, cwe+)
        /// </para>
        /// </summary>
        public ParaListType recommendations {
            get {
                XElement x = this.GetElement(XName.Get("recommendations", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((ParaListType)(x));
            }
            set {
                this.SetElement(XName.Get("recommendations", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (desc, recommendations, cwe+)
        /// </para>
        /// </summary>
        public IList<CweType> cwe {
            get {
                if ((this.cweField == null)) {
                    this.cweField = new XTypedList<CweType>(this, LinqToXsdTypeManager.Instance, XName.Get("cwe", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.cweField;
            }
            set {
                if ((value == null)) {
                    this.cweField = null;
                }
                else {
                    if ((this.cweField == null)) {
                        this.cweField = XTypedList<CweType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("cwe", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<CweType>(this.cweField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal categoryid {
            get {
                XAttribute x = this.Attribute(XName.Get("categoryid", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("categoryid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string categoryname {
            get {
                XAttribute x = this.Attribute(XName.Get("categoryname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("categoryname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> pcirelated {
            get {
                XAttribute x = this.Attribute(XName.Get("pcirelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("pcirelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CategoryType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CategoryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("desc", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ParaListType));
            localElementDictionary.Add(XName.Get("recommendations", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ParaListType));
            localElementDictionary.Add(XName.Get("cwe", "https://www.veracode.com/schema/reports/export/1.0"), typeof(CweType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      For each CWE entry, there are the following attributes:
    ///      * cweId:  The CWE ID for the flaw type.
    ///      * cwename:  The name of the CWE flaw type.
    ///      
    ///      This element has these child elements:
    ///      * staticflaws:  If flaws of this type are found through static analysis,
    ///        those flaws are grouped under this element.
    ///      * dynamicflaws:  If flaws of this type are found through dynamic analysis,
    ///        those flaws are grouped under this element.
    ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
    ///        future release of the platform.)
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
    /// </para>
    /// </summary>
    public partial class CweType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CweType(XElement xe) { return XTypedServices.ToXTypedElement<CweType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CweType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("staticflaws", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("dynamicflaws", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("manualflaws", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      For each CWE entry, there are the following attributes:
        ///      * cweId:  The CWE ID for the flaw type.
        ///      * cwename:  The name of the CWE flaw type.
        ///      
        ///      This element has these child elements:
        ///      * staticflaws:  If flaws of this type are found through static analysis,
        ///        those flaws are grouped under this element.
        ///      * dynamicflaws:  If flaws of this type are found through dynamic analysis,
        ///        those flaws are grouped under this element.
        ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
        ///        future release of the platform.)
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
        /// </para>
        /// </summary>
        public CweType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
        /// </para>
        /// </summary>
        public descriptionLocalType description {
            get {
                XElement x = this.GetElement(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((descriptionLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
        /// </para>
        /// </summary>
        public FlawListType staticflaws {
            get {
                XElement x = this.GetElement(XName.Get("staticflaws", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((FlawListType)(x));
            }
            set {
                this.SetElement(XName.Get("staticflaws", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
        /// </para>
        /// </summary>
        public FlawListType dynamicflaws {
            get {
                XElement x = this.GetElement(XName.Get("dynamicflaws", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((FlawListType)(x));
            }
            set {
                this.SetElement(XName.Get("dynamicflaws", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (description, staticflaws?, dynamicflaws?, manualflaws?)
        /// </para>
        /// </summary>
        public FlawListType manualflaws {
            get {
                XElement x = this.GetElement(XName.Get("manualflaws", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((FlawListType)(x));
            }
            set {
                this.SetElement(XName.Get("manualflaws", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal cweid {
            get {
                XAttribute x = this.Attribute(XName.Get("cweid", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cweid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string cwename {
            get {
                XAttribute x = this.Attribute(XName.Get("cwename", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cwename", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> pcirelated {
            get {
                XAttribute x = this.Attribute(XName.Get("pcirelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("pcirelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CweType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CweType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"), typeof(descriptionLocalType));
            localElementDictionary.Add(XName.Get("staticflaws", "https://www.veracode.com/schema/reports/export/1.0"), typeof(FlawListType));
            localElementDictionary.Add(XName.Get("dynamicflaws", "https://www.veracode.com/schema/reports/export/1.0"), typeof(FlawListType));
            localElementDictionary.Add(XName.Get("manualflaws", "https://www.veracode.com/schema/reports/export/1.0"), typeof(FlawListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (text*)
        /// </para>
        /// </summary>
        public partial class descriptionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<textLocalType> textField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator descriptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<descriptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static descriptionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("text", "https://www.veracode.com/schema/reports/export/1.0")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (text*)
            /// </para>
            /// </summary>
            public descriptionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (text*)
            /// </para>
            /// </summary>
            public IList<https.www.veracode.com.schema.reports.export.Item1.Item0.CweType.descriptionLocalType.textLocalType> text {
                get {
                    if ((this.textField == null)) {
                        this.textField = new XTypedList<textLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("text", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    return this.textField;
                }
                set {
                    if ((value == null)) {
                        this.textField = null;
                    }
                    else {
                        if ((this.textField == null)) {
                            this.textField = XTypedList<textLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("text", "https://www.veracode.com/schema/reports/export/1.0"));
                        }
                        else {
                            XTypedServices.SetList<textLocalType>(this.textField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<descriptionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("text", "https://www.veracode.com/schema/reports/export/1.0"), typeof(textLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class textLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator textLocalType(XElement xe) { return XTypedServices.ToXTypedElement<textLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public textLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string text {
                    get {
                        XAttribute x = this.Attribute(XName.Get("text", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("text", "https://www.veracode.com/schema/reports/export/1.0");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<textLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    public sealed class cvssType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 10m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private cvssType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      For each analysis (static or dynamic), there is a list of modules.  If this
    ///      element is for static analysis, there is one module element per module 
    ///      analyzed.  If this element is for dynamic analysis, there is exactly one 
    ///      module element.  
    ///      
    ///      Each static or dynamic analysis has these attribute values:
    ///      * rating: A letter grade.
    ///      * score: A numeric score.
    ///      * mitigated_rating: A letter grade, taking into account flaws that are mitigated.
    ///      * mitigated_score: A numeric score, taking into account flaws that are mitigated.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (modules)
    /// </para>
    /// </summary>
    public partial class AnalysisType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnalysisType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      For each analysis (static or dynamic), there is a list of modules.  If this
        ///      element is for static analysis, there is one module element per module 
        ///      analyzed.  If this element is for dynamic analysis, there is exactly one 
        ///      module element.  
        ///      
        ///      Each static or dynamic analysis has these attribute values:
        ///      * rating: A letter grade.
        ///      * score: A numeric score.
        ///      * mitigated_rating: A letter grade, taking into account flaws that are mitigated.
        ///      * mitigated_score: A numeric score, taking into account flaws that are mitigated.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (modules)
        /// </para>
        /// </summary>
        public AnalysisType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (modules)
        /// </para>
        /// </summary>
        public modulesLocalType modules {
            get {
                XElement x = this.GetElement(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((modulesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string rating {
            get {
                XAttribute x = this.Attribute(XName.Get("rating", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rating", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal score {
            get {
                XAttribute x = this.Attribute(XName.Get("score", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("score", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mitigated_rating {
            get {
                XAttribute x = this.Attribute(XName.Get("mitigated_rating", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mitigated_rating", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> mitigated_score {
            get {
                XAttribute x = this.Attribute(XName.Get("mitigated_score", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mitigated_score", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string submitted_date {
            get {
                XAttribute x = this.Attribute(XName.Get("submitted_date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("submitted_date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string published_date {
            get {
                XAttribute x = this.Attribute(XName.Get("published_date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("published_date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnalysisType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"), typeof(modulesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (module*)
        /// </para>
        /// </summary>
        public partial class modulesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ModuleType> moduleField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator modulesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modulesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static modulesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (module*)
            /// </para>
            /// </summary>
            public modulesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (module*)
            /// </para>
            /// </summary>
            public IList<ModuleType> module {
                get {
                    if ((this.moduleField == null)) {
                        this.moduleField = new XTypedList<ModuleType>(this, LinqToXsdTypeManager.Instance, XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    return this.moduleField;
                }
                set {
                    if ((value == null)) {
                        this.moduleField = null;
                    }
                    else {
                        if ((this.moduleField == null)) {
                            this.moduleField = XTypedList<ModuleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"));
                        }
                        else {
                            XTypedServices.SetList<ModuleType>(this.moduleField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<modulesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ModuleType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      For manual analysis, there is global data associated with the scan.
    ///      The CIA adjustment factor is used to generate the final numeric score for
    ///      the scan. The delivery consultants, if any, are listed, followed by the
    ///      rest of the analysis for the scan.
    ///
    ///      Each manual analysis has these attribute values:
    ///      * rating: A letter grade.
    ///      * score: A numeric score.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (cia_adjustment?, delivery_consultant*, modules)
    /// </para>
    /// </summary>
    public partial class ManualAnalysisType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> delivery_consultantField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ManualAnalysisType(XElement xe) { return XTypedServices.ToXTypedElement<ManualAnalysisType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ManualAnalysisType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("cia_adjustment", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("delivery_consultant", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      For manual analysis, there is global data associated with the scan.
        ///      The CIA adjustment factor is used to generate the final numeric score for
        ///      the scan. The delivery consultants, if any, are listed, followed by the
        ///      rest of the analysis for the scan.
        ///
        ///      Each manual analysis has these attribute values:
        ///      * rating: A letter grade.
        ///      * score: A numeric score.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (cia_adjustment?, delivery_consultant*, modules)
        /// </para>
        /// </summary>
        public ManualAnalysisType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cia_adjustment?, delivery_consultant*, modules)
        /// </para>
        /// </summary>
        public System.Nullable<decimal> cia_adjustment {
            get {
                XElement x = this.GetElement(XName.Get("cia_adjustment", "https://www.veracode.com/schema/reports/export/1.0"));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NegativeInteger).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("cia_adjustment", "https://www.veracode.com/schema/reports/export/1.0"), value, "cia_adjustment", global::https.www.veracode.com.schema.reports.export.Item1.Item0.negativeInteger.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cia_adjustment?, delivery_consultant*, modules)
        /// </para>
        /// </summary>
        public IList<string> delivery_consultant {
            get {
                if ((this.delivery_consultantField == null)) {
                    this.delivery_consultantField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("delivery_consultant", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.delivery_consultantField;
            }
            set {
                if ((value == null)) {
                    this.delivery_consultantField = null;
                }
                else {
                    if ((this.delivery_consultantField == null)) {
                        this.delivery_consultantField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("delivery_consultant", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.delivery_consultantField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cia_adjustment?, delivery_consultant*, modules)
        /// </para>
        /// </summary>
        public modulesLocalType modules {
            get {
                XElement x = this.GetElement(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((modulesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string rating {
            get {
                XAttribute x = this.Attribute(XName.Get("rating", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rating", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal score {
            get {
                XAttribute x = this.Attribute(XName.Get("score", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("score", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ManualAnalysisType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ManualAnalysisType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("cia_adjustment", "https://www.veracode.com/schema/reports/export/1.0"), typeof(decimal));
            localElementDictionary.Add(XName.Get("delivery_consultant", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
            localElementDictionary.Add(XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0"), typeof(modulesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (module*)
        /// </para>
        /// </summary>
        public partial class modulesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ModuleType> moduleField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator modulesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<modulesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static modulesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (module*)
            /// </para>
            /// </summary>
            public modulesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (module*)
            /// </para>
            /// </summary>
            public IList<ModuleType> module {
                get {
                    if ((this.moduleField == null)) {
                        this.moduleField = new XTypedList<ModuleType>(this, LinqToXsdTypeManager.Instance, XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    return this.moduleField;
                }
                set {
                    if ((value == null)) {
                        this.moduleField = null;
                    }
                    else {
                        if ((this.moduleField == null)) {
                            this.moduleField = XTypedList<ModuleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"));
                        }
                        else {
                            XTypedServices.SetList<ModuleType>(this.moduleField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("modules", "https://www.veracode.com/schema/reports/export/1.0");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<modulesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("module", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ModuleType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      Each module element has the following attributes:
    ///      
    ///      * name:  The name of the module.  If the module represents dynamic
    ///        analysis, the name is blank.
    ///      * compiler:  The compiler that compiled the module.  This value is
    ///        blank for dynamic analysis module elements.
    ///      * os:  The name of the operating system for which the module is
    ///        targeted.  This value is blank for dynamic analysis module elements.
    ///      * architecture:  The name of the architecture for which the module is
    ///        targeted.  This value is blank for dynamic analysis module elements.
    ///      * score:  A module-specific score, which contributes toward the 
    ///        analysis scores.
    ///      * numflawssev0:  The number of severity-0 flaws.  (This is the lowest
    ///        flaw severity and usually referred to as informational.)
    ///      * numflawssev1:  The number of severity-1 flaws.
    ///      * numflawssev2:  The number of severity-2 flaws.
    ///      * numflawssev3:  The number of severity-3 flaws.
    ///      * numflawssev4:  The number of severity-4 flaws.
    ///      * numflawssev5:  The number of severity-5 flaws.  (This is the highest
    ///        flaw severity.)
    ///    
    /// </para>
    /// </summary>
    public partial class ModuleType : XTypedElement, IXMetaData {
        
         public static explicit operator ModuleType(XElement xe) { return XTypedServices.ToXTypedElement<ModuleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///      Each module element has the following attributes:
        ///      
        ///      * name:  The name of the module.  If the module represents dynamic
        ///        analysis, the name is blank.
        ///      * compiler:  The compiler that compiled the module.  This value is
        ///        blank for dynamic analysis module elements.
        ///      * os:  The name of the operating system for which the module is
        ///        targeted.  This value is blank for dynamic analysis module elements.
        ///      * architecture:  The name of the architecture for which the module is
        ///        targeted.  This value is blank for dynamic analysis module elements.
        ///      * score:  A module-specific score, which contributes toward the 
        ///        analysis scores.
        ///      * numflawssev0:  The number of severity-0 flaws.  (This is the lowest
        ///        flaw severity and usually referred to as informational.)
        ///      * numflawssev1:  The number of severity-1 flaws.
        ///      * numflawssev2:  The number of severity-2 flaws.
        ///      * numflawssev3:  The number of severity-3 flaws.
        ///      * numflawssev4:  The number of severity-4 flaws.
        ///      * numflawssev5:  The number of severity-5 flaws.  (This is the highest
        ///        flaw severity.)
        ///    
        /// </para>
        /// </summary>
        public ModuleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string compiler {
            get {
                XAttribute x = this.Attribute(XName.Get("compiler", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("compiler", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string os {
            get {
                XAttribute x = this.Attribute(XName.Get("os", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("os", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string architecture {
            get {
                XAttribute x = this.Attribute(XName.Get("architecture", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("architecture", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal score {
            get {
                XAttribute x = this.Attribute(XName.Get("score", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("score", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev0 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev0", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev0", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev1 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev1", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev2 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev2", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev3 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev3", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev4 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev4", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal numflawssev5 {
            get {
                XAttribute x = this.Attribute(XName.Get("numflawssev5", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numflawssev5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ModuleType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a bullet item within a paragraph.  This has one child 
    ///      element:  
    ///      * text:  The text of the bullet item.
    ///    
    /// </para>
    /// </summary>
    public partial class BulletItemType : XTypedElement, IXMetaData {
        
         public static explicit operator BulletItemType(XElement xe) { return XTypedServices.ToXTypedElement<BulletItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a bullet item within a paragraph.  This has one child 
        ///      element:  
        ///      * text:  The text of the bullet item.
        ///    
        /// </para>
        /// </summary>
        public BulletItemType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string text {
            get {
                XAttribute x = this.Attribute(XName.Get("text", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BulletItemType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BulletItemType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a text paragraph.  There is one attribute:
    ///      * text:  The text of the paragraph.
    ///      
    ///      There may be "bullet item" child elements, indicating list items.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (bulletitem*)
    /// </para>
    /// </summary>
    public partial class ParaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BulletItemType> bulletitemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ParaType(XElement xe) { return XTypedServices.ToXTypedElement<ParaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("bulletitem", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a text paragraph.  There is one attribute:
        ///      * text:  The text of the paragraph.
        ///      
        ///      There may be "bullet item" child elements, indicating list items.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (bulletitem*)
        /// </para>
        /// </summary>
        public ParaType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (bulletitem*)
        /// </para>
        /// </summary>
        public IList<BulletItemType> bulletitem {
            get {
                if ((this.bulletitemField == null)) {
                    this.bulletitemField = new XTypedList<BulletItemType>(this, LinqToXsdTypeManager.Instance, XName.Get("bulletitem", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.bulletitemField;
            }
            set {
                if ((value == null)) {
                    this.bulletitemField = null;
                }
                else {
                    if ((this.bulletitemField == null)) {
                        this.bulletitemField = XTypedList<BulletItemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bulletitem", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<BulletItemType>(this.bulletitemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string text {
            get {
                XAttribute x = this.Attribute(XName.Get("text", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ParaType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("bulletitem", "https://www.veracode.com/schema/reports/export/1.0"), typeof(BulletItemType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a list of paragraphs. This can contain any 
    ///      number of para child elements.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (para*)
    /// </para>
    /// </summary>
    public partial class ParaListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParaType> paraField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ParaListType(XElement xe) { return XTypedServices.ToXTypedElement<ParaListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParaListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("para", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a list of paragraphs. This can contain any 
        ///      number of para child elements.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (para*)
        /// </para>
        /// </summary>
        public ParaListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (para*)
        /// </para>
        /// </summary>
        public IList<ParaType> para {
            get {
                if ((this.paraField == null)) {
                    this.paraField = new XTypedList<ParaType>(this, LinqToXsdTypeManager.Instance, XName.Get("para", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.paraField;
            }
            set {
                if ((value == null)) {
                    this.paraField = null;
                }
                else {
                    if ((this.paraField == null)) {
                        this.paraField = XTypedList<ParaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("para", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<ParaType>(this.paraField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ParaListType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParaListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("para", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ParaType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This is a container for an appropriate list of flaw elements.  There is one
    ///      child flaw element per flaw.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (flaw*)
    /// </para>
    /// </summary>
    public partial class FlawListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlawType> flawField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FlawListType(XElement xe) { return XTypedServices.ToXTypedElement<FlawListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlawListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("flaw", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This is a container for an appropriate list of flaw elements.  There is one
        ///      child flaw element per flaw.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (flaw*)
        /// </para>
        /// </summary>
        public FlawListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (flaw*)
        /// </para>
        /// </summary>
        public IList<FlawType> flaw {
            get {
                if ((this.flawField == null)) {
                    this.flawField = new XTypedList<FlawType>(this, LinqToXsdTypeManager.Instance, XName.Get("flaw", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.flawField;
            }
            set {
                if ((value == null)) {
                    this.flawField = null;
                }
                else {
                    if ((this.flawField == null)) {
                        this.flawField = XTypedList<FlawType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("flaw", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<FlawType>(this.flawField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FlawListType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlawListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("flaw", "https://www.veracode.com/schema/reports/export/1.0"), typeof(FlawType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      There is one flaw element per flaw. A flaw element has these elements:
    ///      * mitigations: An optional list of any mitigation annotations associated with the flaw.
    ///      * annotations: An optional list of any annotations or comments associated with the flaw.
    ///      * exploitability_adjustments: An optional list of any exploitability adjustments associated with the flaw.
    ///      * exploit_desc: For manual flaws, an optional description of the flaw.
    ///      * severity_desc: For manual flaws, an optional description of the severity.
    ///      * remediation_desc: For manual flaws, an optional description for remediation.
    ///      * appendix: For manual flaws, if there are any screenshots associated with the flaw.
    ///
    ///      A flaw element has these attributes:
    ///      * severity:  The severity level of the flaw, with 5 being the most severe
    ///      * categoryname:  The name of the category.
    ///      * count: The number of times this flaw appears.
    ///      * issueid:  A unique identifier for the flaw across all builds of this app.
    ///        Note that single instances of a flaw found in multiple builds of an app
    ///        will have the same issueid value.
    ///      * module:  The name of the module in which the flaw is found.
    ///        and 0 being the least.
    ///      * type:  A very short description of the type of flaw.
    ///      * description:  A more detailed description of the type of flaw.
    ///      * note:  Any additional information added by our security analysts.
    ///      * cweid:  The CWE ID of the flaw.
    ///      * remediationeffort: The remediation effort level of the flaw, with 5 
    ///        requiring the most effort and 1 requiring the least.
    ///      * exploitLevel: Indication of the intrinsic likelihood that the flaw may be exploited by an attacker.
    ///        Ratings range from -2 (very unlikely to be exploited) to 2 (very likely to be exploited).
    ///        Rating of 0 means that the likelihood is unspecified.
    ///      * categoryid:  A numeric identifier for the category.
    ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
    ///        future release of the platform.)
    ///      * date_first_occurrence:  The date of submission of the build where Veracode first identified the
    ///        flaw.
    ///      * remediation_status:  One of the following values:  New, Open, Re-Open, Fixed
    ///      * sourcefile:  For flaws found through static analysis, the name of the
    ///        source file at which the flaw was found.
    ///      * line:  For flaws found through static analysis, the line number on which
    ///        the flaw was found.
    ///      * sourcefilepath:  For flaws found through static analysis, the name of
    ///        the source file path at which the flaw was found. It does not include
    ///        the file name.
    ///      * scope: An approximate classpath containing the flaw. Useful when more 
    ///        specific source information is unavailable	  
    ///      * functionprototype: A prototype of the function containing the flaw
    ///      * functionrelativelocation: A percent estimate of the way through the function
    ///        a flaw was found
    ///      * url:  For flaws found through dynamic analysis, the URL at which the flaw
    ///        was found.
    ///      * location: The location of the flaw, whether a url or the name of the
    ///        page the flaw was found on.
    ///      * cvss: A scaling factor for each flaws score weight.
    ///      * capecid: A category id for the flaw.
    ///      * exploitdifficulty: an enumeration.
    ///      * inputvector: Where the attack originates.    
    /// </para>
    /// <para>
    /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
    /// </para>
    /// </summary>
    public partial class FlawType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FlawType(XElement xe) { return XTypedServices.ToXTypedElement<FlawType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlawType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("mitigations", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("annotations", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("exploitability_adjustments", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("exploit_desc", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("severity_desc", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("remediation_desc", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("appendix", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      There is one flaw element per flaw. A flaw element has these elements:
        ///      * mitigations: An optional list of any mitigation annotations associated with the flaw.
        ///      * annotations: An optional list of any annotations or comments associated with the flaw.
        ///      * exploitability_adjustments: An optional list of any exploitability adjustments associated with the flaw.
        ///      * exploit_desc: For manual flaws, an optional description of the flaw.
        ///      * severity_desc: For manual flaws, an optional description of the severity.
        ///      * remediation_desc: For manual flaws, an optional description for remediation.
        ///      * appendix: For manual flaws, if there are any screenshots associated with the flaw.
        ///
        ///      A flaw element has these attributes:
        ///      * severity:  The severity level of the flaw, with 5 being the most severe
        ///      * categoryname:  The name of the category.
        ///      * count: The number of times this flaw appears.
        ///      * issueid:  A unique identifier for the flaw across all builds of this app.
        ///        Note that single instances of a flaw found in multiple builds of an app
        ///        will have the same issueid value.
        ///      * module:  The name of the module in which the flaw is found.
        ///        and 0 being the least.
        ///      * type:  A very short description of the type of flaw.
        ///      * description:  A more detailed description of the type of flaw.
        ///      * note:  Any additional information added by our security analysts.
        ///      * cweid:  The CWE ID of the flaw.
        ///      * remediationeffort: The remediation effort level of the flaw, with 5 
        ///        requiring the most effort and 1 requiring the least.
        ///      * exploitLevel: Indication of the intrinsic likelihood that the flaw may be exploited by an attacker.
        ///        Ratings range from -2 (very unlikely to be exploited) to 2 (very likely to be exploited).
        ///        Rating of 0 means that the likelihood is unspecified.
        ///      * categoryid:  A numeric identifier for the category.
        ///      * pcirelated:  Whether the flaw is PCI related.  (This will be specified in a 
        ///        future release of the platform.)
        ///      * date_first_occurrence:  The date of submission of the build where Veracode first identified the
        ///        flaw.
        ///      * remediation_status:  One of the following values:  New, Open, Re-Open, Fixed
        ///      * sourcefile:  For flaws found through static analysis, the name of the
        ///        source file at which the flaw was found.
        ///      * line:  For flaws found through static analysis, the line number on which
        ///        the flaw was found.
        ///      * sourcefilepath:  For flaws found through static analysis, the name of
        ///        the source file path at which the flaw was found. It does not include
        ///        the file name.
        ///      * scope: An approximate classpath containing the flaw. Useful when more 
        ///        specific source information is unavailable	  
        ///      * functionprototype: A prototype of the function containing the flaw
        ///      * functionrelativelocation: A percent estimate of the way through the function
        ///        a flaw was found
        ///      * url:  For flaws found through dynamic analysis, the URL at which the flaw
        ///        was found.
        ///      * location: The location of the flaw, whether a url or the name of the
        ///        page the flaw was found on.
        ///      * cvss: A scaling factor for each flaws score weight.
        ///      * capecid: A category id for the flaw.
        ///      * exploitdifficulty: an enumeration.
        ///      * inputvector: Where the attack originates.    
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public FlawType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public MitigationListType mitigations {
            get {
                XElement x = this.GetElement(XName.Get("mitigations", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((MitigationListType)(x));
            }
            set {
                this.SetElement(XName.Get("mitigations", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public AnnotationListType annotations {
            get {
                XElement x = this.GetElement(XName.Get("annotations", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((AnnotationListType)(x));
            }
            set {
                this.SetElement(XName.Get("annotations", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public ExploitAdjustmentListType exploitability_adjustments {
            get {
                XElement x = this.GetElement(XName.Get("exploitability_adjustments", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((ExploitAdjustmentListType)(x));
            }
            set {
                this.SetElement(XName.Get("exploitability_adjustments", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public string exploit_desc {
            get {
                XElement x = this.GetElement(XName.Get("exploit_desc", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("exploit_desc", "https://www.veracode.com/schema/reports/export/1.0"), value, "exploit_desc", global::https.www.veracode.com.schema.reports.export.Item1.Item0.LongTextType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public string severity_desc {
            get {
                XElement x = this.GetElement(XName.Get("severity_desc", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("severity_desc", "https://www.veracode.com/schema/reports/export/1.0"), value, "severity_desc", global::https.www.veracode.com.schema.reports.export.Item1.Item0.LongTextType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public string remediation_desc {
            get {
                XElement x = this.GetElement(XName.Get("remediation_desc", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("remediation_desc", "https://www.veracode.com/schema/reports/export/1.0"), value, "remediation_desc", global::https.www.veracode.com.schema.reports.export.Item1.Item0.LongTextType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (mitigations?, annotations?, exploitability_adjustments?, exploit_desc?, severity_desc?, remediation_desc?, appendix?)
        /// </para>
        /// </summary>
        public AppendixType appendix {
            get {
                XElement x = this.GetElement(XName.Get("appendix", "https://www.veracode.com/schema/reports/export/1.0"));
                return ((AppendixType)(x));
            }
            set {
                this.SetElement(XName.Get("appendix", "https://www.veracode.com/schema/reports/export/1.0"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal severity {
            get {
                XAttribute x = this.Attribute(XName.Get("severity", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("severity", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string categoryname {
            get {
                XAttribute x = this.Attribute(XName.Get("categoryname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("categoryname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> count {
            get {
                XAttribute x = this.Attribute(XName.Get("count", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal issueid {
            get {
                XAttribute x = this.Attribute(XName.Get("issueid", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("issueid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string module {
            get {
                XAttribute x = this.Attribute(XName.Get("module", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("module", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string description {
            get {
                XAttribute x = this.Attribute(XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string note {
            get {
                XAttribute x = this.Attribute(XName.Get("note", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("note", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal cweid {
            get {
                XAttribute x = this.Attribute(XName.Get("cweid", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cweid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal remediationeffort {
            get {
                XAttribute x = this.Attribute(XName.Get("remediationeffort", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("remediationeffort", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> exploitLevel {
            get {
                XAttribute x = this.Attribute(XName.Get("exploitLevel", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("exploitLevel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal categoryid {
            get {
                XAttribute x = this.Attribute(XName.Get("categoryid", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("categoryid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> pcirelated {
            get {
                XAttribute x = this.Attribute(XName.Get("pcirelated", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("pcirelated", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string date_first_occurrence {
            get {
                XAttribute x = this.Attribute(XName.Get("date_first_occurrence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("date_first_occurrence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string remediation_status {
            get {
                XAttribute x = this.Attribute(XName.Get("remediation_status", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("remediation_status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sourcefile {
            get {
                XAttribute x = this.Attribute(XName.Get("sourcefile", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sourcefile", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> line {
            get {
                XAttribute x = this.Attribute(XName.Get("line", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("line", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string sourcefilepath {
            get {
                XAttribute x = this.Attribute(XName.Get("sourcefilepath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sourcefilepath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string scope {
            get {
                XAttribute x = this.Attribute(XName.Get("scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string functionprototype {
            get {
                XAttribute x = this.Attribute(XName.Get("functionprototype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("functionprototype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> functionrelativelocation {
            get {
                XAttribute x = this.Attribute(XName.Get("functionrelativelocation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("functionrelativelocation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string url {
            get {
                XAttribute x = this.Attribute(XName.Get("url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string location {
            get {
                XAttribute x = this.Attribute(XName.Get("location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> cvss {
            get {
                XAttribute x = this.Attribute(XName.Get("cvss", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cvss", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> capecid {
            get {
                XAttribute x = this.Attribute(XName.Get("capecid", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("capecid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> exploitdifficulty {
            get {
                XAttribute x = this.Attribute(XName.Get("exploitdifficulty", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("exploitdifficulty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string inputvector {
            get {
                XAttribute x = this.Attribute(XName.Get("inputvector", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("inputvector", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string cia_impact {
            get {
                XAttribute x = this.Attribute(XName.Get("cia_impact", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("cia_impact", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FlawType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlawType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("mitigations", "https://www.veracode.com/schema/reports/export/1.0"), typeof(MitigationListType));
            localElementDictionary.Add(XName.Get("annotations", "https://www.veracode.com/schema/reports/export/1.0"), typeof(AnnotationListType));
            localElementDictionary.Add(XName.Get("exploitability_adjustments", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ExploitAdjustmentListType));
            localElementDictionary.Add(XName.Get("exploit_desc", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
            localElementDictionary.Add(XName.Get("severity_desc", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
            localElementDictionary.Add(XName.Get("remediation_desc", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
            localElementDictionary.Add(XName.Get("appendix", "https://www.veracode.com/schema/reports/export/1.0"), typeof(AppendixType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      A severity value is an integer between 0 and 5 inclusive, with 
    ///      5 being the most severe and 0 being the least severe.
    ///    
    /// </para>
    /// </summary>
    public sealed class SeverityValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 5m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private SeverityValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      An exploitability level is an integer between -2 and 2 inclusive.
    ///    
    /// </para>
    /// </summary>
    public sealed class ExploitabilityValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 2m, 0, null, -2m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ExploitabilityValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      A remediation effort value is an integer between 1 and 5 inclusive, with 
    ///      5 requiring the most effort to remediate and 1 requiring the least effort 
    ///      to remediate.
    ///    
    /// </para>
    /// </summary>
    public sealed class RemediationEffortValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 5m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private RemediationEffortValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a list of mitigation annotations for this flaw.
    ///      This can contain any number of mitigation child elements.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (mitigation*)
    /// </para>
    /// </summary>
    public partial class MitigationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MitigationType> mitigationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MitigationListType(XElement xe) { return XTypedServices.ToXTypedElement<MitigationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MitigationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("mitigation", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a list of mitigation annotations for this flaw.
        ///      This can contain any number of mitigation child elements.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (mitigation*)
        /// </para>
        /// </summary>
        public MitigationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (mitigation*)
        /// </para>
        /// </summary>
        public IList<MitigationType> mitigation {
            get {
                if ((this.mitigationField == null)) {
                    this.mitigationField = new XTypedList<MitigationType>(this, LinqToXsdTypeManager.Instance, XName.Get("mitigation", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.mitigationField;
            }
            set {
                if ((value == null)) {
                    this.mitigationField = null;
                }
                else {
                    if ((this.mitigationField == null)) {
                        this.mitigationField = XTypedList<MitigationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("mitigation", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<MitigationType>(this.mitigationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MitigationListType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MitigationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("mitigation", "https://www.veracode.com/schema/reports/export/1.0"), typeof(MitigationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      In some cases, a flaw's potential security impact may be mitigated
    ///      by a control external to the application itself, or inherent in the
    ///      design of the application. A reviewer can provide additional
    ///      information about the flaw by adding mitigations
    ///      to the flaw. Mitigations have the following attributes:
    ///      * action:  A specific reason why the flaw is mitigated.
    ///      * description:  A more detailed description of the type of mitigation
    ///        action.
    ///	  * user: The user who mitigated the flaw
    ///	  * date: The date and time the mitigation occured
    ///    
    /// </para>
    /// </summary>
    public partial class MitigationType : XTypedElement, IXMetaData {
        
         public static explicit operator MitigationType(XElement xe) { return XTypedServices.ToXTypedElement<MitigationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///      In some cases, a flaw's potential security impact may be mitigated
        ///      by a control external to the application itself, or inherent in the
        ///      design of the application. A reviewer can provide additional
        ///      information about the flaw by adding mitigations
        ///      to the flaw. Mitigations have the following attributes:
        ///      * action:  A specific reason why the flaw is mitigated.
        ///      * description:  A more detailed description of the type of mitigation
        ///        action.
        ///	  * user: The user who mitigated the flaw
        ///	  * date: The date and time the mitigation occured
        ///    
        /// </para>
        /// </summary>
        public MitigationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string description {
            get {
                XAttribute x = this.Attribute(XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string user {
            get {
                XAttribute x = this.Attribute(XName.Get("user", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("user", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string date {
            get {
                XAttribute x = this.Attribute(XName.Get("date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MitigationType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MitigationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a list of comment or potential false positive annotations 
    ///	  for this flaw. This can contain any number of annotation child elements.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (annotation*)
    /// </para>
    /// </summary>
    public partial class AnnotationListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnnotationType> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AnnotationListType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnnotationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("annotation", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a list of comment or potential false positive annotations 
        ///	  for this flaw. This can contain any number of annotation child elements.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (annotation*)
        /// </para>
        /// </summary>
        public AnnotationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*)
        /// </para>
        /// </summary>
        public IList<AnnotationType> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<AnnotationType>(this, LinqToXsdTypeManager.Instance, XName.Get("annotation", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<AnnotationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("annotation", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<AnnotationType>(this.annotationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationListType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("annotation", "https://www.veracode.com/schema/reports/export/1.0"), typeof(AnnotationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	  A reviewer can add a note to a flaw, or they can mark a flaw as a 
    ///	  potential false positive by creating an Annotation. Annotations 
    ///	  have the following attributes:
    ///	  * action: The purpose of this annotation (Comment, or marking a flaw as)
    ///	    a possible false positive
    ///	  * description: The note created by the reviewer for the annotation
    ///	  * user: The user who mitigated the flaw
    ///	  * date: The date and time the annotation was created
    ///    
    /// </para>
    /// </summary>
    public partial class AnnotationType : XTypedElement, IXMetaData {
        
         public static explicit operator AnnotationType(XElement xe) { return XTypedServices.ToXTypedElement<AnnotationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///	  A reviewer can add a note to a flaw, or they can mark a flaw as a 
        ///	  potential false positive by creating an Annotation. Annotations 
        ///	  have the following attributes:
        ///	  * action: The purpose of this annotation (Comment, or marking a flaw as)
        ///	    a possible false positive
        ///	  * description: The note created by the reviewer for the annotation
        ///	  * user: The user who mitigated the flaw
        ///	  * date: The date and time the annotation was created
        ///    
        /// </para>
        /// </summary>
        public AnnotationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string action {
            get {
                XAttribute x = this.Attribute(XName.Get("action", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string description {
            get {
                XAttribute x = this.Attribute(XName.Get("description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string user {
            get {
                XAttribute x = this.Attribute(XName.Get("user", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("user", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string date {
            get {
                XAttribute x = this.Attribute(XName.Get("date", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AnnotationType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnnotationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      This represents a list of exploitability adjustments made for this flaw.
    ///      This can contain any number of exploitability_adjustment child elements.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (exploitability_adjustment*)
    /// </para>
    /// </summary>
    public partial class ExploitAdjustmentListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExploitAdjustmentType> exploitability_adjustmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ExploitAdjustmentListType(XElement xe) { return XTypedServices.ToXTypedElement<ExploitAdjustmentListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExploitAdjustmentListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("exploitability_adjustment", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      This represents a list of exploitability adjustments made for this flaw.
        ///      This can contain any number of exploitability_adjustment child elements.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (exploitability_adjustment*)
        /// </para>
        /// </summary>
        public ExploitAdjustmentListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (exploitability_adjustment*)
        /// </para>
        /// </summary>
        public IList<ExploitAdjustmentType> exploitability_adjustment {
            get {
                if ((this.exploitability_adjustmentField == null)) {
                    this.exploitability_adjustmentField = new XTypedList<ExploitAdjustmentType>(this, LinqToXsdTypeManager.Instance, XName.Get("exploitability_adjustment", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.exploitability_adjustmentField;
            }
            set {
                if ((value == null)) {
                    this.exploitability_adjustmentField = null;
                }
                else {
                    if ((this.exploitability_adjustmentField == null)) {
                        this.exploitability_adjustmentField = XTypedList<ExploitAdjustmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("exploitability_adjustment", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<ExploitAdjustmentType>(this.exploitability_adjustmentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExploitAdjustmentListType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExploitAdjustmentListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("exploitability_adjustment", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ExploitAdjustmentType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///	  Each flaw may have 0 or more exploitability adjustments associated with it.
    ///     Exploitability gives an indication of how likely an attacker can exploit the flaw.
    ///     The exploitability adjustment shows one or more factors that may have been applied to
    ///     adjust the likelihood of being exploited. Factors such as WebApp, or the taint source are
    ///     commonly taken into consideration.
    ///     Each adjustment will have the following attributes:
    ///	 * score_adjustment: This denotes an integer range adjustment made to the overall exploitability
    ///       of the flaw.
    ///	 * note: The note or description for the adjustment.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (note)
    /// </para>
    /// </summary>
    public partial class ExploitAdjustmentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ExploitAdjustmentType(XElement xe) { return XTypedServices.ToXTypedElement<ExploitAdjustmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExploitAdjustmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("note", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///	  Each flaw may have 0 or more exploitability adjustments associated with it.
        ///     Exploitability gives an indication of how likely an attacker can exploit the flaw.
        ///     The exploitability adjustment shows one or more factors that may have been applied to
        ///     adjust the likelihood of being exploited. Factors such as WebApp, or the taint source are
        ///     commonly taken into consideration.
        ///     Each adjustment will have the following attributes:
        ///	 * score_adjustment: This denotes an integer range adjustment made to the overall exploitability
        ///       of the flaw.
        ///	 * note: The note or description for the adjustment.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (note)
        /// </para>
        /// </summary>
        public ExploitAdjustmentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (note)
        /// </para>
        /// </summary>
        public string note {
            get {
                XElement x = this.GetElement(XName.Get("note", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("note", "https://www.veracode.com/schema/reports/export/1.0"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int score_adjustment {
            get {
                XAttribute x = this.Attribute(XName.Get("score_adjustment", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("score_adjustment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExploitAdjustmentType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExploitAdjustmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("note", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      Range of positive integers that can be processed by Java.
    ///    
    /// </para>
    /// </summary>
    public sealed class positiveInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(64)), null, 0, 0, null, 2147483647m, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private positiveInteger() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      Range of negative integers that can be processed by Java.
    ///    
    /// </para>
    /// </summary>
    public sealed class negativeInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NegativeInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, -2147483648m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private negativeInteger() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The range of exploitability values pertaining to a flaw.
    ///    
    /// </para>
    /// </summary>
    public sealed class ExploitDifficultyValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        1,
                        2,
                        3}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ExploitDifficultyValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The range of exploitability adjustment values pertaining to a flaw.
    ///    
    /// </para>
    /// </summary>
    public sealed class ExploitAdjustmentValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        -2,
                        -1,
                        0,
                        1,
                        2}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private ExploitAdjustmentValueType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The maximum string size of a given text field.
    ///    
    /// </para>
    /// </summary>
    public sealed class LongTextType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 1024, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LongTextType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The element describes a screen shot for a flaw. There is a
    ///      description of the screen shot, and a element for the 
    ///      data and type.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (description, screenshot*, code*)
    /// </para>
    /// </summary>
    public partial class AppendixType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScreenshotType> screenshotField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> codeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AppendixType(XElement xe) { return XTypedServices.ToXTypedElement<AppendixType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AppendixType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("screenshot", "https://www.veracode.com/schema/reports/export/1.0")), new NamedContentModelEntity(XName.Get("code", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      The element describes a screen shot for a flaw. There is a
        ///      description of the screen shot, and a element for the 
        ///      data and type.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (description, screenshot*, code*)
        /// </para>
        /// </summary>
        public AppendixType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (description, screenshot*, code*)
        /// </para>
        /// </summary>
        public string description {
            get {
                XElement x = this.GetElement(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"), value, "description", global::https.www.veracode.com.schema.reports.export.Item1.Item0.LongTextType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (description, screenshot*, code*)
        /// </para>
        /// </summary>
        public IList<ScreenshotType> screenshot {
            get {
                if ((this.screenshotField == null)) {
                    this.screenshotField = new XTypedList<ScreenshotType>(this, LinqToXsdTypeManager.Instance, XName.Get("screenshot", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.screenshotField;
            }
            set {
                if ((value == null)) {
                    this.screenshotField = null;
                }
                else {
                    if ((this.screenshotField == null)) {
                        this.screenshotField = XTypedList<ScreenshotType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("screenshot", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<ScreenshotType>(this.screenshotField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (description, screenshot*, code*)
        /// </para>
        /// </summary>
        public IList<string> code {
            get {
                if ((this.codeField == null)) {
                    this.codeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("code", "https://www.veracode.com/schema/reports/export/1.0"));
                }
                return this.codeField;
            }
            set {
                if ((value == null)) {
                    this.codeField = null;
                }
                else {
                    if ((this.codeField == null)) {
                        this.codeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("code", "https://www.veracode.com/schema/reports/export/1.0"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.codeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AppendixType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AppendixType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("description", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
            localElementDictionary.Add(XName.Get("screenshot", "https://www.veracode.com/schema/reports/export/1.0"), typeof(ScreenshotType));
            localElementDictionary.Add(XName.Get("code", "https://www.veracode.com/schema/reports/export/1.0"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The element describes a screen shot for a flaw. There is a
    ///      format element to describe the file type, and the code
    ///      element will contain a base64 encoding of the actual binary
    ///      file.
    ///    
    /// </para>
    /// <para>
    /// Regular expression: (data)
    /// </para>
    /// </summary>
    public partial class ScreenshotType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ScreenshotType(XElement xe) { return XTypedServices.ToXTypedElement<ScreenshotType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScreenshotType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("data", "https://www.veracode.com/schema/reports/export/1.0")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      The element describes a screen shot for a flaw. There is a
        ///      format element to describe the file type, and the code
        ///      element will contain a base64 encoding of the actual binary
        ///      file.
        ///    
        /// </para>
        /// <para>
        /// Regular expression: (data)
        /// </para>
        /// </summary>
        public ScreenshotType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (data)
        /// </para>
        /// </summary>
        public byte[] data {
            get {
                XElement x = this.GetElement(XName.Get("data", "https://www.veracode.com/schema/reports/export/1.0"));
                return XTypedServices.ParseValue<byte[]>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
            set {
                this.SetElement(XName.Get("data", "https://www.veracode.com/schema/reports/export/1.0"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string format {
            get {
                XAttribute x = this.Attribute(XName.Get("format", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ScreenshotType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScreenshotType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("data", "https://www.veracode.com/schema/reports/export/1.0"), typeof(byte[]));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      The element describes summary data for the flaws in the build.
    ///      Each adjustment will have the following attributes:
    ///      * new:  The number of flaws first found in this build of the application.
    ///      * reopen:  The number of flaws found in a prior build of the application 
    ///        that were not new, but were not found in the build immediately prior to
    ///        this build.
    ///      * open:  The number of flaws found in this build that were also found in the
    ///        build immediately prior to this build.
    ///      * fixed:  The number of flaws found in the prior build that were not found in
    ///        the current build.
    ///      * total:  The total number of flaws found in this build.
    ///      * sev-1-change: The number of Severity 1 flaws found in this build, 
    ///        minus the number of Severity 1 flaws found in the build immediately prior
    ///        to this build.
    ///      * sev-2-change: The number of Severity 2 flaws found in this build, 
    ///        minus the number of Severity 2 flaws found in the build immediately prior
    ///        to this build.
    ///      * sev-3-change: The number of Severity 3 flaws found in this build, 
    ///        minus the number of Severity 3 flaws found in the build immediately prior
    ///        to this build.
    ///      * sev-4-change: The number of Severity 4 flaws found in this build, 
    ///        minus the number of Severity 4 flaws found in the build immediately prior
    ///        to this build.
    ///      * sev-5-change: The number of Severity 5 flaws found in this build, 
    ///        minus the number of Severity 5 flaws found in the build immediately prior
    ///        to this build.
    ///    
    /// </para>
    /// </summary>
    public partial class FlawStatusType : XTypedElement, IXMetaData {
        
         public static explicit operator FlawStatusType(XElement xe) { return XTypedServices.ToXTypedElement<FlawStatusType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///      The element describes summary data for the flaws in the build.
        ///      Each adjustment will have the following attributes:
        ///      * new:  The number of flaws first found in this build of the application.
        ///      * reopen:  The number of flaws found in a prior build of the application 
        ///        that were not new, but were not found in the build immediately prior to
        ///        this build.
        ///      * open:  The number of flaws found in this build that were also found in the
        ///        build immediately prior to this build.
        ///      * fixed:  The number of flaws found in the prior build that were not found in
        ///        the current build.
        ///      * total:  The total number of flaws found in this build.
        ///      * sev-1-change: The number of Severity 1 flaws found in this build, 
        ///        minus the number of Severity 1 flaws found in the build immediately prior
        ///        to this build.
        ///      * sev-2-change: The number of Severity 2 flaws found in this build, 
        ///        minus the number of Severity 2 flaws found in the build immediately prior
        ///        to this build.
        ///      * sev-3-change: The number of Severity 3 flaws found in this build, 
        ///        minus the number of Severity 3 flaws found in the build immediately prior
        ///        to this build.
        ///      * sev-4-change: The number of Severity 4 flaws found in this build, 
        ///        minus the number of Severity 4 flaws found in the build immediately prior
        ///        to this build.
        ///      * sev-5-change: The number of Severity 5 flaws found in this build, 
        ///        minus the number of Severity 5 flaws found in the build immediately prior
        ///        to this build.
        ///    
        /// </para>
        /// </summary>
        public FlawStatusType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal @new {
            get {
                XAttribute x = this.Attribute(XName.Get("new", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("new", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal reopen {
            get {
                XAttribute x = this.Attribute(XName.Get("reopen", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reopen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal open {
            get {
                XAttribute x = this.Attribute(XName.Get("open", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("open", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal @fixed {
            get {
                XAttribute x = this.Attribute(XName.Get("fixed", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal total {
            get {
                XAttribute x = this.Attribute(XName.Get("total", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("total", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal sev1change {
            get {
                XAttribute x = this.Attribute(XName.Get("sev-1-change", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sev-1-change", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal sev2change {
            get {
                XAttribute x = this.Attribute(XName.Get("sev-2-change", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sev-2-change", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal sev3change {
            get {
                XAttribute x = this.Attribute(XName.Get("sev-3-change", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sev-3-change", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal sev4change {
            get {
                XAttribute x = this.Attribute(XName.Get("sev-4-change", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sev-4-change", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal sev5change {
            get {
                XAttribute x = this.Attribute(XName.Get("sev-5-change", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("sev-5-change", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FlawStatusType", "https://www.veracode.com/schema/reports/export/1.0");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlawStatusType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///      Supported file types for screen shots.
    ///    
    /// </para>
    /// </summary>
    public sealed class ScreenshotFormatType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GIF",
                        "JPG",
                        "PNG"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ScreenshotFormatType() {
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("SeverityType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.SeverityType));
            typeDictionary.Add(XName.Get("CategoryType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.CategoryType));
            typeDictionary.Add(XName.Get("CweType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.CweType));
            typeDictionary.Add(XName.Get("AnalysisType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.AnalysisType));
            typeDictionary.Add(XName.Get("ManualAnalysisType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ManualAnalysisType));
            typeDictionary.Add(XName.Get("ModuleType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ModuleType));
            typeDictionary.Add(XName.Get("BulletItemType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.BulletItemType));
            typeDictionary.Add(XName.Get("ParaType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ParaType));
            typeDictionary.Add(XName.Get("ParaListType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ParaListType));
            typeDictionary.Add(XName.Get("FlawListType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.FlawListType));
            typeDictionary.Add(XName.Get("FlawType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.FlawType));
            typeDictionary.Add(XName.Get("MitigationListType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.MitigationListType));
            typeDictionary.Add(XName.Get("MitigationType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.MitigationType));
            typeDictionary.Add(XName.Get("AnnotationListType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.AnnotationListType));
            typeDictionary.Add(XName.Get("AnnotationType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.AnnotationType));
            typeDictionary.Add(XName.Get("ExploitAdjustmentListType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ExploitAdjustmentListType));
            typeDictionary.Add(XName.Get("ExploitAdjustmentType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ExploitAdjustmentType));
            typeDictionary.Add(XName.Get("AppendixType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.AppendixType));
            typeDictionary.Add(XName.Get("ScreenshotType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.ScreenshotType));
            typeDictionary.Add(XName.Get("FlawStatusType", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.FlawStatusType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("detailedreport", "https://www.veracode.com/schema/reports/export/1.0"), typeof(global::https.www.veracode.com.schema.reports.export.Item1.Item0.detailedreport));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("detailedreport", "https://www.veracode.com/schema/reports/export/1.0")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public detailedreport detailedreport {  get {return rootObject as detailedreport; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(detailedreport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::https.www.veracode.com.schema.reports.export.Item1.Item0.detailedreport detailedreport {  get {return rootObject as global::https.www.veracode.com.schema.reports.export.Item1.Item0.detailedreport; } }
        
        private XRoot() {
        }
        
        public XRoot(global::https.www.veracode.com.schema.reports.export.Item1.Item0.detailedreport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}

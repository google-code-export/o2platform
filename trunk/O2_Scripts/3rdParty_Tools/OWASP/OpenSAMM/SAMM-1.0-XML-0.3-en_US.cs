//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;



public partial class entry : XTypedElement, IXMetaData {
    
         public static explicit operator entry(XElement xe) { return XTypedServices.ToXTypedElement<entry>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    public entry() {
    }
    
    public string TypedValue {
        get {
            XElement x = this.Untyped;
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("entry", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static entry Load(string xmlFile) {
        return XTypedServices.Load<entry>(xmlFile);
    }
    
    public static entry Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<entry>(xmlFile);
    }
    
    public static entry Parse(string xml) {
        return XTypedServices.Parse<entry>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<entry>(this);
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

/// <summary>
/// <para>
/// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
/// </para>
/// </summary>
public partial class SAMM : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<businessfunctionsLocalType> businessfunctionsField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<securitypracticesLocalType> securitypracticesField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<sectionLocalType> sectionField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<sectionsplitLocalType> sectionsplitField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<misctextLocalType> misctextField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<leveldataLocalType> leveldataField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator SAMM(XElement xe) { return XTypedServices.ToXTypedElement<SAMM>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static SAMM() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("business-functions", "")), new NamedContentModelEntity(XName.Get("security-practices", "")), new NamedContentModelEntity(XName.Get("section", "")), new NamedContentModelEntity(XName.Get("section-split", "")), new NamedContentModelEntity(XName.Get("misc-text", "")), new NamedContentModelEntity(XName.Get("level-data", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public SAMM() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.businessfunctionsLocalType> businessfunctions {
        get {
            if ((this.businessfunctionsField == null)) {
                this.businessfunctionsField = new XTypedList<businessfunctionsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("business-functions", ""));
            }
            return this.businessfunctionsField;
        }
        set {
            if ((value == null)) {
                this.businessfunctionsField = null;
            }
            else {
                if ((this.businessfunctionsField == null)) {
                    this.businessfunctionsField = XTypedList<businessfunctionsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("business-functions", ""));
                }
                else {
                    XTypedServices.SetList<businessfunctionsLocalType>(this.businessfunctionsField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.securitypracticesLocalType> securitypractices {
        get {
            if ((this.securitypracticesField == null)) {
                this.securitypracticesField = new XTypedList<securitypracticesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("security-practices", ""));
            }
            return this.securitypracticesField;
        }
        set {
            if ((value == null)) {
                this.securitypracticesField = null;
            }
            else {
                if ((this.securitypracticesField == null)) {
                    this.securitypracticesField = XTypedList<securitypracticesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("security-practices", ""));
                }
                else {
                    XTypedServices.SetList<securitypracticesLocalType>(this.securitypracticesField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.sectionLocalType> section {
        get {
            if ((this.sectionField == null)) {
                this.sectionField = new XTypedList<sectionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("section", ""));
            }
            return this.sectionField;
        }
        set {
            if ((value == null)) {
                this.sectionField = null;
            }
            else {
                if ((this.sectionField == null)) {
                    this.sectionField = XTypedList<sectionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("section", ""));
                }
                else {
                    XTypedServices.SetList<sectionLocalType>(this.sectionField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.sectionsplitLocalType> sectionsplit {
        get {
            if ((this.sectionsplitField == null)) {
                this.sectionsplitField = new XTypedList<sectionsplitLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("section-split", ""));
            }
            return this.sectionsplitField;
        }
        set {
            if ((value == null)) {
                this.sectionsplitField = null;
            }
            else {
                if ((this.sectionsplitField == null)) {
                    this.sectionsplitField = XTypedList<sectionsplitLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("section-split", ""));
                }
                else {
                    XTypedServices.SetList<sectionsplitLocalType>(this.sectionsplitField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.misctextLocalType> misctext {
        get {
            if ((this.misctextField == null)) {
                this.misctextField = new XTypedList<misctextLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("misc-text", ""));
            }
            return this.misctextField;
        }
        set {
            if ((value == null)) {
                this.misctextField = null;
            }
            else {
                if ((this.misctextField == null)) {
                    this.misctextField = XTypedList<misctextLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("misc-text", ""));
                }
                else {
                    XTypedServices.SetList<misctextLocalType>(this.misctextField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (businessfunctions*, securitypractices*, section*, sectionsplit*, misctext*, leveldata*)
    /// </para>
    /// </summary>
    public IList<SAMM.leveldataLocalType> leveldata {
        get {
            if ((this.leveldataField == null)) {
                this.leveldataField = new XTypedList<leveldataLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("level-data", ""));
            }
            return this.leveldataField;
        }
        set {
            if ((value == null)) {
                this.leveldataField = null;
            }
            else {
                if ((this.leveldataField == null)) {
                    this.leveldataField = XTypedList<leveldataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("level-data", ""));
                }
                else {
                    XTypedServices.SetList<leveldataLocalType>(this.leveldataField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string sammversion {
        get {
            XAttribute x = this.Attribute(XName.Get("samm-version", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("samm-version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string revision {
        get {
            XAttribute x = this.Attribute(XName.Get("revision", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("revision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("SAMM", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static SAMM Load(string xmlFile) {
        return XTypedServices.Load<SAMM>(xmlFile);
    }
    
    public static SAMM Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<SAMM>(xmlFile);
    }
    
    public static SAMM Parse(string xml) {
        return XTypedServices.Parse<SAMM>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<SAMM>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("business-functions", ""), typeof(businessfunctionsLocalType));
        localElementDictionary.Add(XName.Get("security-practices", ""), typeof(securitypracticesLocalType));
        localElementDictionary.Add(XName.Get("section", ""), typeof(sectionLocalType));
        localElementDictionary.Add(XName.Get("section-split", ""), typeof(sectionsplitLocalType));
        localElementDictionary.Add(XName.Get("misc-text", ""), typeof(misctextLocalType));
        localElementDictionary.Add(XName.Get("level-data", ""), typeof(leveldataLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (businessfunction*)
    /// </para>
    /// </summary>
    public partial class businessfunctionsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<businessfunctionLocalType> businessfunctionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator businessfunctionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<businessfunctionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static businessfunctionsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("business-function", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (businessfunction*)
        /// </para>
        /// </summary>
        public businessfunctionsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (businessfunction*)
        /// </para>
        /// </summary>
        public IList<SAMM.businessfunctionsLocalType.businessfunctionLocalType> businessfunction {
            get {
                if ((this.businessfunctionField == null)) {
                    this.businessfunctionField = new XTypedList<businessfunctionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("business-function", ""));
                }
                return this.businessfunctionField;
            }
            set {
                if ((value == null)) {
                    this.businessfunctionField = null;
                }
                else {
                    if ((this.businessfunctionField == null)) {
                        this.businessfunctionField = XTypedList<businessfunctionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("business-function", ""));
                    }
                    else {
                        XTypedServices.SetList<businessfunctionLocalType>(this.businessfunctionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("business-functions", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<businessfunctionsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("business-function", ""), typeof(businessfunctionLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title?, description?)
        /// </para>
        /// </summary>
        public partial class businessfunctionLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator businessfunctionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<businessfunctionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static businessfunctionLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("description", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (title?, description?)
            /// </para>
            /// </summary>
            public businessfunctionLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, description?)
            /// </para>
            /// </summary>
            public string title {
                get {
                    XElement x = this.GetElement(XName.Get("title", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, description?)
            /// </para>
            /// </summary>
            public string description {
                get {
                    XElement x = this.GetElement(XName.Get("description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string number {
                get {
                    XAttribute x = this.Attribute(XName.Get("number", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("business-function", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<businessfunctionLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                localElementDictionary.Add(XName.Get("description", ""), typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (securitypractice*)
    /// </para>
    /// </summary>
    public partial class securitypracticesLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<securitypracticeLocalType> securitypracticeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator securitypracticesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<securitypracticesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static securitypracticesLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("security-practice", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (securitypractice*)
        /// </para>
        /// </summary>
        public securitypracticesLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (securitypractice*)
        /// </para>
        /// </summary>
        public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType> securitypractice {
            get {
                if ((this.securitypracticeField == null)) {
                    this.securitypracticeField = new XTypedList<securitypracticeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("security-practice", ""));
                }
                return this.securitypracticeField;
            }
            set {
                if ((value == null)) {
                    this.securitypracticeField = null;
                }
                else {
                    if ((this.securitypracticeField == null)) {
                        this.securitypracticeField = XTypedList<securitypracticeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("security-practice", ""));
                    }
                    else {
                        XTypedServices.SetList<securitypracticeLocalType>(this.securitypracticeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("security-practices", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<securitypracticesLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("security-practice", ""), typeof(securitypracticeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
        /// </para>
        /// </summary>
        public partial class securitypracticeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<levelLocalType> levelField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator securitypracticeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<securitypracticeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static securitypracticeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("abbreviation", "")), new NamedContentModelEntity(XName.Get("description-short", "")), new NamedContentModelEntity(XName.Get("description", "")), new NamedContentModelEntity(XName.Get("level", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public securitypracticeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public string title {
                get {
                    XElement x = this.GetElement(XName.Get("title", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public string abbreviation {
                get {
                    XElement x = this.GetElement(XName.Get("abbreviation", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("abbreviation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public string descriptionshort {
                get {
                    XElement x = this.GetElement(XName.Get("description-short", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("description-short", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public string description {
                get {
                    XElement x = this.GetElement(XName.Get("description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (title?, abbreviation?, descriptionshort?, description?, level*)
            /// </para>
            /// </summary>
            public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType> level {
                get {
                    if ((this.levelField == null)) {
                        this.levelField = new XTypedList<levelLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("level", ""));
                    }
                    return this.levelField;
                }
                set {
                    if ((value == null)) {
                        this.levelField = null;
                    }
                    else {
                        if ((this.levelField == null)) {
                            this.levelField = XTypedList<levelLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("level", ""));
                        }
                        else {
                            XTypedServices.SetList<levelLocalType>(this.levelField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string number {
                get {
                    XAttribute x = this.Attribute(XName.Get("number", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string businessfunction {
                get {
                    XAttribute x = this.Attribute(XName.Get("business-function", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("business-function", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("security-practice", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<securitypracticeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                localElementDictionary.Add(XName.Get("abbreviation", ""), typeof(string));
                localElementDictionary.Add(XName.Get("description-short", ""), typeof(string));
                localElementDictionary.Add(XName.Get("description", ""), typeof(string));
                localElementDictionary.Add(XName.Get("level", ""), typeof(levelLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
            /// </para>
            /// </summary>
            public partial class levelLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<activitiesLocalType> activitiesField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<assessmentLocalType> assessmentField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<resultsLocalType> resultsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<metricsLocalType> metricsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<costsLocalType> costsField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<personnelLocalType> personnelField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<relatedLocalType> relatedField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator levelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<levelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static levelLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("objective", "")), new NamedContentModelEntity(XName.Get("entry", "")), new NamedContentModelEntity(XName.Get("activities", "")), new NamedContentModelEntity(XName.Get("assessment", "")), new NamedContentModelEntity(XName.Get("results", "")), new NamedContentModelEntity(XName.Get("metrics", "")), new NamedContentModelEntity(XName.Get("costs", "")), new NamedContentModelEntity(XName.Get("personnel", "")), new NamedContentModelEntity(XName.Get("related", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public levelLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public string objective {
                    get {
                        XElement x = this.GetElement(XName.Get("objective", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("objective", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public string entry {
                    get {
                        XElement x = this.GetElement(XName.Get("entry", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("entry", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.activitiesLocalType> activities {
                    get {
                        if ((this.activitiesField == null)) {
                            this.activitiesField = new XTypedList<activitiesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("activities", ""));
                        }
                        return this.activitiesField;
                    }
                    set {
                        if ((value == null)) {
                            this.activitiesField = null;
                        }
                        else {
                            if ((this.activitiesField == null)) {
                                this.activitiesField = XTypedList<activitiesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("activities", ""));
                            }
                            else {
                                XTypedServices.SetList<activitiesLocalType>(this.activitiesField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.assessmentLocalType> assessment {
                    get {
                        if ((this.assessmentField == null)) {
                            this.assessmentField = new XTypedList<assessmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("assessment", ""));
                        }
                        return this.assessmentField;
                    }
                    set {
                        if ((value == null)) {
                            this.assessmentField = null;
                        }
                        else {
                            if ((this.assessmentField == null)) {
                                this.assessmentField = XTypedList<assessmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("assessment", ""));
                            }
                            else {
                                XTypedServices.SetList<assessmentLocalType>(this.assessmentField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.resultsLocalType> results {
                    get {
                        if ((this.resultsField == null)) {
                            this.resultsField = new XTypedList<resultsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("results", ""));
                        }
                        return this.resultsField;
                    }
                    set {
                        if ((value == null)) {
                            this.resultsField = null;
                        }
                        else {
                            if ((this.resultsField == null)) {
                                this.resultsField = XTypedList<resultsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("results", ""));
                            }
                            else {
                                XTypedServices.SetList<resultsLocalType>(this.resultsField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.metricsLocalType> metrics {
                    get {
                        if ((this.metricsField == null)) {
                            this.metricsField = new XTypedList<metricsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("metrics", ""));
                        }
                        return this.metricsField;
                    }
                    set {
                        if ((value == null)) {
                            this.metricsField = null;
                        }
                        else {
                            if ((this.metricsField == null)) {
                                this.metricsField = XTypedList<metricsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("metrics", ""));
                            }
                            else {
                                XTypedServices.SetList<metricsLocalType>(this.metricsField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.costsLocalType> costs {
                    get {
                        if ((this.costsField == null)) {
                            this.costsField = new XTypedList<costsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("costs", ""));
                        }
                        return this.costsField;
                    }
                    set {
                        if ((value == null)) {
                            this.costsField = null;
                        }
                        else {
                            if ((this.costsField == null)) {
                                this.costsField = XTypedList<costsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("costs", ""));
                            }
                            else {
                                XTypedServices.SetList<costsLocalType>(this.costsField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.personnelLocalType> personnel {
                    get {
                        if ((this.personnelField == null)) {
                            this.personnelField = new XTypedList<personnelLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("personnel", ""));
                        }
                        return this.personnelField;
                    }
                    set {
                        if ((value == null)) {
                            this.personnelField = null;
                        }
                        else {
                            if ((this.personnelField == null)) {
                                this.personnelField = XTypedList<personnelLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("personnel", ""));
                            }
                            else {
                                XTypedServices.SetList<personnelLocalType>(this.personnelField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (objective?, entry?, activities*, assessment*, results*, metrics*, costs*, personnel*, related*)
                /// </para>
                /// </summary>
                public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.relatedLocalType> related {
                    get {
                        if ((this.relatedField == null)) {
                            this.relatedField = new XTypedList<relatedLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("related", ""));
                        }
                        return this.relatedField;
                    }
                    set {
                        if ((value == null)) {
                            this.relatedField = null;
                        }
                        else {
                            if ((this.relatedField == null)) {
                                this.relatedField = XTypedList<relatedLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("related", ""));
                            }
                            else {
                                XTypedServices.SetList<relatedLocalType>(this.relatedField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string number {
                    get {
                        XAttribute x = this.Attribute(XName.Get("number", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string id {
                    get {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("level", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<levelLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("objective", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("entry", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("activities", ""), typeof(activitiesLocalType));
                    localElementDictionary.Add(XName.Get("assessment", ""), typeof(assessmentLocalType));
                    localElementDictionary.Add(XName.Get("results", ""), typeof(resultsLocalType));
                    localElementDictionary.Add(XName.Get("metrics", ""), typeof(metricsLocalType));
                    localElementDictionary.Add(XName.Get("costs", ""), typeof(costsLocalType));
                    localElementDictionary.Add(XName.Get("personnel", ""), typeof(personnelLocalType));
                    localElementDictionary.Add(XName.Get("related", ""), typeof(relatedLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, activity*)
                /// </para>
                /// </summary>
                public partial class activitiesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<activityLocalType> activityField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator activitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static activitiesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("activity", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, activity*)
                    /// </para>
                    /// </summary>
                    public activitiesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, activity*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, activity*)
                    /// </para>
                    /// </summary>
                    public IList<SAMM.securitypracticesLocalType.securitypracticeLocalType.levelLocalType.activitiesLocalType.activityLocalType> activity {
                        get {
                            if ((this.activityField == null)) {
                                this.activityField = new XTypedList<activityLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("activity", ""));
                            }
                            return this.activityField;
                        }
                        set {
                            if ((value == null)) {
                                this.activityField = null;
                            }
                            else {
                                if ((this.activityField == null)) {
                                    this.activityField = XTypedList<activityLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("activity", ""));
                                }
                                else {
                                    XTypedServices.SetList<activityLocalType>(this.activityField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("activities", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<activitiesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("activity", ""), typeof(activityLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, content?)
                    /// </para>
                    /// </summary>
                    public partial class activityLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator activityLocalType(XElement xe) { return XTypedServices.ToXTypedElement<activityLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static activityLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("content", "")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (title?, content?)
                        /// </para>
                        /// </summary>
                        public activityLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (title?, content?)
                        /// </para>
                        /// </summary>
                        public string title {
                            get {
                                XElement x = this.GetElement(XName.Get("title", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (title?, content?)
                        /// </para>
                        /// </summary>
                        public string content {
                            get {
                                XElement x = this.GetElement(XName.Get("content", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("content", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string number {
                            get {
                                XAttribute x = this.Attribute(XName.Get("number", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetAttribute(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// </summary>
                        public string id {
                            get {
                                XAttribute x = this.Attribute(XName.Get("id", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("activity", "");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<activityLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("content", ""), typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class assessmentLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator assessmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<assessmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static assessmentLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public assessmentLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("assessment", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<assessmentLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class resultsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator resultsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<resultsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static resultsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public resultsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("results", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<resultsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class metricsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator metricsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<metricsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static metricsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public metricsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("metrics", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<metricsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class costsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator costsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<costsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static costsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public costsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("costs", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<costsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class personnelLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator personnelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<personnelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static personnelLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public personnelLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("personnel", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<personnelLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (title?, entry*)
                /// </para>
                /// </summary>
                public partial class relatedLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<entry> entryField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator relatedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<relatedLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static relatedLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("entry", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public relatedLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public string title {
                        get {
                            XElement x = this.GetElement(XName.Get("title", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (title?, entry*)
                    /// </para>
                    /// </summary>
                    public IList<entry> entry {
                        get {
                            if ((this.entryField == null)) {
                                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                            }
                            return this.entryField;
                        }
                        set {
                            if ((value == null)) {
                                this.entryField = null;
                            }
                            else {
                                if ((this.entryField == null)) {
                                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                                }
                                else {
                                    XTypedServices.SetList<entry>(this.entryField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("related", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<relatedLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("title", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title?, subtitle?, version?, content*)
    /// </para>
    /// </summary>
    public partial class sectionLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<contentLocalType> contentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator sectionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sectionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sectionLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("subtitle", "")), new NamedContentModelEntity(XName.Get("version", "")), new NamedContentModelEntity(XName.Get("content", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title?, subtitle?, version?, content*)
        /// </para>
        /// </summary>
        public sectionLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, version?, content*)
        /// </para>
        /// </summary>
        public string title {
            get {
                XElement x = this.GetElement(XName.Get("title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, version?, content*)
        /// </para>
        /// </summary>
        public string subtitle {
            get {
                XElement x = this.GetElement(XName.Get("subtitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("subtitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, version?, content*)
        /// </para>
        /// </summary>
        public string version {
            get {
                XElement x = this.GetElement(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, version?, content*)
        /// </para>
        /// </summary>
        public IList<SAMM.sectionLocalType.contentLocalType> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<contentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("content", ""));
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<contentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("content", ""));
                    }
                    else {
                        XTypedServices.SetList<contentLocalType>(this.contentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("section", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sectionLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("title", ""), typeof(string));
            localElementDictionary.Add(XName.Get("subtitle", ""), typeof(string));
            localElementDictionary.Add(XName.Get("version", ""), typeof(string));
            localElementDictionary.Add(XName.Get("content", ""), typeof(contentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
        /// </para>
        /// </summary>
        public partial class contentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<heading1LocalType> heading1Field;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<bulletLocalType> bulletField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<emphLocalType> emphField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<heading2LocalType> heading2Field;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator contentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<contentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static contentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("heading-bullets", "")), new NamedContentModelEntity(XName.Get("heading1", "")), new NamedContentModelEntity(XName.Get("bullet", "")), new NamedContentModelEntity(XName.Get("emph", "")), new NamedContentModelEntity(XName.Get("heading2", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public contentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public string headingbullets {
                get {
                    XElement x = this.GetElement(XName.Get("heading-bullets", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("heading-bullets", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public IList<SAMM.sectionLocalType.contentLocalType.heading1LocalType> heading1 {
                get {
                    if ((this.heading1Field == null)) {
                        this.heading1Field = new XTypedList<heading1LocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("heading1", ""));
                    }
                    return this.heading1Field;
                }
                set {
                    if ((value == null)) {
                        this.heading1Field = null;
                    }
                    else {
                        if ((this.heading1Field == null)) {
                            this.heading1Field = XTypedList<heading1LocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("heading1", ""));
                        }
                        else {
                            XTypedServices.SetList<heading1LocalType>(this.heading1Field, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public IList<SAMM.sectionLocalType.contentLocalType.bulletLocalType> bullet {
                get {
                    if ((this.bulletField == null)) {
                        this.bulletField = new XTypedList<bulletLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("bullet", ""));
                    }
                    return this.bulletField;
                }
                set {
                    if ((value == null)) {
                        this.bulletField = null;
                    }
                    else {
                        if ((this.bulletField == null)) {
                            this.bulletField = XTypedList<bulletLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("bullet", ""));
                        }
                        else {
                            XTypedServices.SetList<bulletLocalType>(this.bulletField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public IList<SAMM.sectionLocalType.contentLocalType.emphLocalType> emph {
                get {
                    if ((this.emphField == null)) {
                        this.emphField = new XTypedList<emphLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("emph", ""));
                    }
                    return this.emphField;
                }
                set {
                    if ((value == null)) {
                        this.emphField = null;
                    }
                    else {
                        if ((this.emphField == null)) {
                            this.emphField = XTypedList<emphLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("emph", ""));
                        }
                        else {
                            XTypedServices.SetList<emphLocalType>(this.emphField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (headingbullets?, heading1*, bullet*, emph*, heading2*)
            /// </para>
            /// </summary>
            public IList<SAMM.sectionLocalType.contentLocalType.heading2LocalType> heading2 {
                get {
                    if ((this.heading2Field == null)) {
                        this.heading2Field = new XTypedList<heading2LocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("heading2", ""));
                    }
                    return this.heading2Field;
                }
                set {
                    if ((value == null)) {
                        this.heading2Field = null;
                    }
                    else {
                        if ((this.heading2Field == null)) {
                            this.heading2Field = XTypedList<heading2LocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("heading2", ""));
                        }
                        else {
                            XTypedServices.SetList<heading2LocalType>(this.heading2Field, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("content", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<contentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("heading-bullets", ""), typeof(string));
                localElementDictionary.Add(XName.Get("heading1", ""), typeof(heading1LocalType));
                localElementDictionary.Add(XName.Get("bullet", ""), typeof(bulletLocalType));
                localElementDictionary.Add(XName.Get("emph", ""), typeof(emphLocalType));
                localElementDictionary.Add(XName.Get("heading2", ""), typeof(heading2LocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class heading1LocalType : XTypedElement, IXMetaData {
                
         public static explicit operator heading1LocalType(XElement xe) { return XTypedServices.ToXTypedElement<heading1LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public heading1LocalType() {
                }
                
                public string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("heading1", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<heading1LocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (emph?)
            /// </para>
            /// </summary>
            public partial class bulletLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator bulletLocalType(XElement xe) { return XTypedServices.ToXTypedElement<bulletLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static bulletLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("emph", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (emph?)
                /// </para>
                /// </summary>
                public bulletLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (emph?)
                /// </para>
                /// </summary>
                public string emph {
                    get {
                        XElement x = this.GetElement(XName.Get("emph", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("emph", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("bullet", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<bulletLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("emph", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            public partial class emphLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator emphLocalType(XElement xe) { return XTypedServices.ToXTypedElement<emphLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public emphLocalType() {
                }
                
                public string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("emph", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<emphLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class heading2LocalType : XTypedElement, IXMetaData {
                
         public static explicit operator heading2LocalType(XElement xe) { return XTypedServices.ToXTypedElement<heading2LocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public heading2LocalType() {
                }
                
                public string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("heading2", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<heading2LocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (title?, subtitle?, content?)
    /// </para>
    /// </summary>
    public partial class sectionsplitLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator sectionsplitLocalType(XElement xe) { return XTypedServices.ToXTypedElement<sectionsplitLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sectionsplitLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("title", "")), new NamedContentModelEntity(XName.Get("subtitle", "")), new NamedContentModelEntity(XName.Get("content", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (title?, subtitle?, content?)
        /// </para>
        /// </summary>
        public sectionsplitLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, content?)
        /// </para>
        /// </summary>
        public string title {
            get {
                XElement x = this.GetElement(XName.Get("title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, content?)
        /// </para>
        /// </summary>
        public string subtitle {
            get {
                XElement x = this.GetElement(XName.Get("subtitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("subtitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (title?, subtitle?, content?)
        /// </para>
        /// </summary>
        public string content {
            get {
                XElement x = this.GetElement(XName.Get("content", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("content", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string number {
            get {
                XAttribute x = this.Attribute(XName.Get("number", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("section-split", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sectionsplitLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("title", ""), typeof(string));
            localElementDictionary.Add(XName.Get("subtitle", ""), typeof(string));
            localElementDictionary.Add(XName.Get("content", ""), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry*)
    /// </para>
    /// </summary>
    public partial class misctextLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entry> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator misctextLocalType(XElement xe) { return XTypedServices.ToXTypedElement<misctextLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static misctextLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("entry", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entry*)
        /// </para>
        /// </summary>
        public misctextLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (entry*)
        /// </para>
        /// </summary>
        public IList<entry> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                    }
                    else {
                        XTypedServices.SetList<entry>(this.entryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("misc-text", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<misctextLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (levelvalue*)
    /// </para>
    /// </summary>
    public partial class leveldataLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<levelvalueLocalType> levelvalueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator leveldataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<leveldataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static leveldataLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("level-value", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (levelvalue*)
        /// </para>
        /// </summary>
        public leveldataLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (levelvalue*)
        /// </para>
        /// </summary>
        public IList<SAMM.leveldataLocalType.levelvalueLocalType> levelvalue {
            get {
                if ((this.levelvalueField == null)) {
                    this.levelvalueField = new XTypedList<levelvalueLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("level-value", ""));
                }
                return this.levelvalueField;
            }
            set {
                if ((value == null)) {
                    this.levelvalueField = null;
                }
                else {
                    if ((this.levelvalueField == null)) {
                        this.levelvalueField = XTypedList<levelvalueLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("level-value", ""));
                    }
                    else {
                        XTypedServices.SetList<levelvalueLocalType>(this.levelvalueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("level-data", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<leveldataLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("level-value", ""), typeof(levelvalueLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class levelvalueLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator levelvalueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<levelvalueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public levelvalueLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string id {
                get {
                    XAttribute x = this.Attribute(XName.Get("id", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string value {
                get {
                    XAttribute x = this.Attribute(XName.Get("value", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("level-value", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<levelvalueLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (entry | SAMM)*
/// </para>
/// </summary>
public partial class NewDataSet : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<entry> entryField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<SAMM> SAMMField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator NewDataSet(XElement xe) { return XTypedServices.ToXTypedElement<NewDataSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static NewDataSet() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (entry | SAMM)*
    /// </para>
    /// </summary>
    public NewDataSet() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (entry | SAMM)*
    /// </para>
    /// </summary>
    public IList<entry> entry {
        get {
            if ((this.entryField == null)) {
                this.entryField = new XTypedList<entry>(this, LinqToXsdTypeManager.Instance, XName.Get("entry", ""));
            }
            return this.entryField;
        }
        set {
            if ((value == null)) {
                this.entryField = null;
            }
            else {
                if ((this.entryField == null)) {
                    this.entryField = XTypedList<entry>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entry", ""));
                }
                else {
                    XTypedServices.SetList<entry>(this.entryField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (entry | SAMM)*
    /// </para>
    /// </summary>
    public IList<SAMM> SAMM {
        get {
            if ((this.SAMMField == null)) {
                this.SAMMField = new XTypedList<SAMM>(this, LinqToXsdTypeManager.Instance, XName.Get("SAMM", ""));
            }
            return this.SAMMField;
        }
        set {
            if ((value == null)) {
                this.SAMMField = null;
            }
            else {
                if ((this.SAMMField == null)) {
                    this.SAMMField = XTypedList<SAMM>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SAMM", ""));
                }
                else {
                    XTypedServices.SetList<SAMM>(this.SAMMField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("NewDataSet", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static NewDataSet Load(string xmlFile) {
        return XTypedServices.Load<NewDataSet>(xmlFile);
    }
    
    public static NewDataSet Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<NewDataSet>(xmlFile);
    }
    
    public static NewDataSet Parse(string xml) {
        return XTypedServices.Parse<NewDataSet>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<NewDataSet>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("entry", ""), typeof(entry));
        localElementDictionary.Add(XName.Get("SAMM", ""), typeof(SAMM));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return XTypedServices.EmptyDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("entry", ""), typeof(global::entry));
        elementDictionary.Add(XName.Get("SAMM", ""), typeof(global::SAMM));
        elementDictionary.Add(XName.Get("NewDataSet", ""), typeof(global::NewDataSet));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("entry", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public entry entry {  get {return rootObject as entry; } }

    public SAMM SAMM {  get {return rootObject as SAMM; } }

    public NewDataSet NewDataSet {  get {return rootObject as NewDataSet; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(entry root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(SAMM root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(NewDataSet root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public entry entry {  get {return rootObject as entry; } }

    public SAMM SAMM {  get {return rootObject as SAMM; } }

    public NewDataSet NewDataSet {  get {return rootObject as NewDataSet; } }
    
    private XRoot() {
    }
    
    public XRoot(entry root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(SAMM root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(NewDataSet root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace schemas.microsoft.com.developer.msbuild.Item2003 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
    /// </para>
    /// </summary>
    public partial class Project : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyGroupLocalType> PropertyGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ItemGroupLocalType> ItemGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ImportLocalType> ImportField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProjectExtensionsLocalType> ProjectExtensionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Project(XElement xe) { return XTypedServices.ToXTypedElement<Project>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Project() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PropertyGroup", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ItemGroup", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Import", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ProjectExtensions", "http://schemas.microsoft.com/developer/msbuild/2003")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
        /// </para>
        /// </summary>
        public Project() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
        /// </para>
        /// </summary>
        public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.PropertyGroupLocalType> PropertyGroup {
            get {
                if ((this.PropertyGroupField == null)) {
                    this.PropertyGroupField = new XTypedList<PropertyGroupLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("PropertyGroup", "http://schemas.microsoft.com/developer/msbuild/2003"));
                }
                return this.PropertyGroupField;
            }
            set {
                if ((value == null)) {
                    this.PropertyGroupField = null;
                }
                else {
                    if ((this.PropertyGroupField == null)) {
                        this.PropertyGroupField = XTypedList<PropertyGroupLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PropertyGroup", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    else {
                        XTypedServices.SetList<PropertyGroupLocalType>(this.PropertyGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
        /// </para>
        /// </summary>
        public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType> ItemGroup {
            get {
                if ((this.ItemGroupField == null)) {
                    this.ItemGroupField = new XTypedList<ItemGroupLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ItemGroup", "http://schemas.microsoft.com/developer/msbuild/2003"));
                }
                return this.ItemGroupField;
            }
            set {
                if ((value == null)) {
                    this.ItemGroupField = null;
                }
                else {
                    if ((this.ItemGroupField == null)) {
                        this.ItemGroupField = XTypedList<ItemGroupLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ItemGroup", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    else {
                        XTypedServices.SetList<ItemGroupLocalType>(this.ItemGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
        /// </para>
        /// </summary>
        public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ImportLocalType> Import {
            get {
                if ((this.ImportField == null)) {
                    this.ImportField = new XTypedList<ImportLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Import", "http://schemas.microsoft.com/developer/msbuild/2003"));
                }
                return this.ImportField;
            }
            set {
                if ((value == null)) {
                    this.ImportField = null;
                }
                else {
                    if ((this.ImportField == null)) {
                        this.ImportField = XTypedList<ImportLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Import", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    else {
                        XTypedServices.SetList<ImportLocalType>(this.ImportField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PropertyGroup*, ItemGroup*, Import*, ProjectExtensions*)
        /// </para>
        /// </summary>
        public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ProjectExtensionsLocalType> ProjectExtensions {
            get {
                if ((this.ProjectExtensionsField == null)) {
                    this.ProjectExtensionsField = new XTypedList<ProjectExtensionsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProjectExtensions", "http://schemas.microsoft.com/developer/msbuild/2003"));
                }
                return this.ProjectExtensionsField;
            }
            set {
                if ((value == null)) {
                    this.ProjectExtensionsField = null;
                }
                else {
                    if ((this.ProjectExtensionsField == null)) {
                        this.ProjectExtensionsField = XTypedList<ProjectExtensionsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProjectExtensions", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    else {
                        XTypedServices.SetList<ProjectExtensionsLocalType>(this.ProjectExtensionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolsVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolsVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolsVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultTargets {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultTargets", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultTargets", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Project Load(string xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Parse(string xml) {
            return XTypedServices.Parse<Project>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Project>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PropertyGroup", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(PropertyGroupLocalType));
            localElementDictionary.Add(XName.Get("ItemGroup", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ItemGroupLocalType));
            localElementDictionary.Add(XName.Get("Import", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ImportLocalType));
            localElementDictionary.Add(XName.Get("ProjectExtensions", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ProjectExtensionsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
        /// </para>
        /// </summary>
        public partial class PropertyGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ConfigurationLocalType> ConfigurationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PlatformLocalType> PlatformField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator PropertyGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PropertyGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PropertyGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DebugSymbols", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DebugType", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Optimize", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("OutputPath", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DefineConstants", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ErrorReport", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("WarningLevel", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("RunCodeAnalysis", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("CodeAnalysisIgnoreGeneratedCode", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ProductVersion", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SchemaVersion", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ProjectGuid", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ProjectTypeGuids", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("OutputType", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("AppDesignerFolder", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("RootNamespace", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("AssemblyName", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("TargetFrameworkVersion", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SccProjectName", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SccLocalPath", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SccAuxPath", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SccProvider", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SignAssembly", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("AssemblyOriginatorKeyFile", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("FileUpgradeFlags", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("OldToolsVersion", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("UpgradeBackupLocation", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Configuration", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Platform", "http://schemas.microsoft.com/developer/msbuild/2003")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public PropertyGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string DebugSymbols {
                get {
                    XElement x = this.GetElement(XName.Get("DebugSymbols", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("DebugSymbols", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string DebugType {
                get {
                    XElement x = this.GetElement(XName.Get("DebugType", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("DebugType", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string Optimize {
                get {
                    XElement x = this.GetElement(XName.Get("Optimize", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Optimize", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string OutputPath {
                get {
                    XElement x = this.GetElement(XName.Get("OutputPath", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("OutputPath", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string DefineConstants {
                get {
                    XElement x = this.GetElement(XName.Get("DefineConstants", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("DefineConstants", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string ErrorReport {
                get {
                    XElement x = this.GetElement(XName.Get("ErrorReport", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ErrorReport", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string WarningLevel {
                get {
                    XElement x = this.GetElement(XName.Get("WarningLevel", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("WarningLevel", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string RunCodeAnalysis {
                get {
                    XElement x = this.GetElement(XName.Get("RunCodeAnalysis", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("RunCodeAnalysis", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string CodeAnalysisIgnoreGeneratedCode {
                get {
                    XElement x = this.GetElement(XName.Get("CodeAnalysisIgnoreGeneratedCode", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("CodeAnalysisIgnoreGeneratedCode", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string ProductVersion {
                get {
                    XElement x = this.GetElement(XName.Get("ProductVersion", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ProductVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SchemaVersion {
                get {
                    XElement x = this.GetElement(XName.Get("SchemaVersion", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SchemaVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string ProjectGuid {
                get {
                    XElement x = this.GetElement(XName.Get("ProjectGuid", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ProjectGuid", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string ProjectTypeGuids {
                get {
                    XElement x = this.GetElement(XName.Get("ProjectTypeGuids", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("ProjectTypeGuids", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string OutputType {
                get {
                    XElement x = this.GetElement(XName.Get("OutputType", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("OutputType", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string AppDesignerFolder {
                get {
                    XElement x = this.GetElement(XName.Get("AppDesignerFolder", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("AppDesignerFolder", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string RootNamespace {
                get {
                    XElement x = this.GetElement(XName.Get("RootNamespace", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("RootNamespace", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string AssemblyName {
                get {
                    XElement x = this.GetElement(XName.Get("AssemblyName", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("AssemblyName", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string TargetFrameworkVersion {
                get {
                    XElement x = this.GetElement(XName.Get("TargetFrameworkVersion", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("TargetFrameworkVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SccProjectName {
                get {
                    XElement x = this.GetElement(XName.Get("SccProjectName", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SccProjectName", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SccLocalPath {
                get {
                    XElement x = this.GetElement(XName.Get("SccLocalPath", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SccLocalPath", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SccAuxPath {
                get {
                    XElement x = this.GetElement(XName.Get("SccAuxPath", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SccAuxPath", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SccProvider {
                get {
                    XElement x = this.GetElement(XName.Get("SccProvider", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SccProvider", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string SignAssembly {
                get {
                    XElement x = this.GetElement(XName.Get("SignAssembly", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SignAssembly", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string AssemblyOriginatorKeyFile {
                get {
                    XElement x = this.GetElement(XName.Get("AssemblyOriginatorKeyFile", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("AssemblyOriginatorKeyFile", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string FileUpgradeFlags {
                get {
                    XElement x = this.GetElement(XName.Get("FileUpgradeFlags", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("FileUpgradeFlags", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string OldToolsVersion {
                get {
                    XElement x = this.GetElement(XName.Get("OldToolsVersion", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("OldToolsVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public string UpgradeBackupLocation {
                get {
                    XElement x = this.GetElement(XName.Get("UpgradeBackupLocation", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("UpgradeBackupLocation", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.PropertyGroupLocalType.ConfigurationLocalType> Configuration {
                get {
                    if ((this.ConfigurationField == null)) {
                        this.ConfigurationField = new XTypedList<ConfigurationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Configuration", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.ConfigurationField;
                }
                set {
                    if ((value == null)) {
                        this.ConfigurationField = null;
                    }
                    else {
                        if ((this.ConfigurationField == null)) {
                            this.ConfigurationField = XTypedList<ConfigurationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Configuration", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<ConfigurationLocalType>(this.ConfigurationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (DebugSymbols?, DebugType?, Optimize?, OutputPath?, DefineConstants?, ErrorReport?, WarningLevel?, RunCodeAnalysis?, CodeAnalysisIgnoreGeneratedCode?, ProductVersion?, SchemaVersion?, ProjectGuid?, ProjectTypeGuids?, OutputType?, AppDesignerFolder?, RootNamespace?, AssemblyName?, TargetFrameworkVersion?, SccProjectName?, SccLocalPath?, SccAuxPath?, SccProvider?, SignAssembly?, AssemblyOriginatorKeyFile?, FileUpgradeFlags?, OldToolsVersion?, UpgradeBackupLocation?, Configuration*, Platform*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.PropertyGroupLocalType.PlatformLocalType> Platform {
                get {
                    if ((this.PlatformField == null)) {
                        this.PlatformField = new XTypedList<PlatformLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Platform", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.PlatformField;
                }
                set {
                    if ((value == null)) {
                        this.PlatformField = null;
                    }
                    else {
                        if ((this.PlatformField == null)) {
                            this.PlatformField = XTypedList<PlatformLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Platform", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<PlatformLocalType>(this.PlatformField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Condition {
                get {
                    XAttribute x = this.Attribute(XName.Get("Condition", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Condition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("PropertyGroup", "http://schemas.microsoft.com/developer/msbuild/2003");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PropertyGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("DebugSymbols", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("DebugType", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("Optimize", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("OutputPath", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("DefineConstants", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("ErrorReport", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("WarningLevel", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("RunCodeAnalysis", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("CodeAnalysisIgnoreGeneratedCode", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("ProductVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SchemaVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("ProjectGuid", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("ProjectTypeGuids", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("OutputType", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("AppDesignerFolder", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("RootNamespace", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("AssemblyName", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("TargetFrameworkVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SccProjectName", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SccLocalPath", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SccAuxPath", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SccProvider", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("SignAssembly", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("AssemblyOriginatorKeyFile", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("FileUpgradeFlags", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("OldToolsVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("UpgradeBackupLocation", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                localElementDictionary.Add(XName.Get("Configuration", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ConfigurationLocalType));
                localElementDictionary.Add(XName.Get("Platform", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(PlatformLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class ConfigurationLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator ConfigurationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ConfigurationLocalType() {
                }
                
                public string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Condition {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Condition", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Condition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Configuration", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ConfigurationLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class PlatformLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator PlatformLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PlatformLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public PlatformLocalType() {
                }
                
                public string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Condition {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Condition", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Condition", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Platform", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PlatformLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
        /// </para>
        /// </summary>
        public partial class ItemGroupLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CompileLocalType> CompileField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ContentLocalType> ContentField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ReferenceLocalType> ReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ProjectReferenceLocalType> ProjectReferenceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<EmbeddedResourceLocalType> EmbeddedResourceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<NoneLocalType> NoneField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FolderLocalType> FolderField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator ItemGroupLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ItemGroupLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ItemGroupLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Compile", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Content", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Reference", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("ProjectReference", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("EmbeddedResource", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("None", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Folder", "http://schemas.microsoft.com/developer/msbuild/2003")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public ItemGroupLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.CompileLocalType> Compile {
                get {
                    if ((this.CompileField == null)) {
                        this.CompileField = new XTypedList<CompileLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Compile", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.CompileField;
                }
                set {
                    if ((value == null)) {
                        this.CompileField = null;
                    }
                    else {
                        if ((this.CompileField == null)) {
                            this.CompileField = XTypedList<CompileLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Compile", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<CompileLocalType>(this.CompileField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.ContentLocalType> Content {
                get {
                    if ((this.ContentField == null)) {
                        this.ContentField = new XTypedList<ContentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Content", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.ContentField;
                }
                set {
                    if ((value == null)) {
                        this.ContentField = null;
                    }
                    else {
                        if ((this.ContentField == null)) {
                            this.ContentField = XTypedList<ContentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Content", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<ContentLocalType>(this.ContentField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.ReferenceLocalType> Reference {
                get {
                    if ((this.ReferenceField == null)) {
                        this.ReferenceField = new XTypedList<ReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Reference", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.ReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.ReferenceField = null;
                    }
                    else {
                        if ((this.ReferenceField == null)) {
                            this.ReferenceField = XTypedList<ReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Reference", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<ReferenceLocalType>(this.ReferenceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.ProjectReferenceLocalType> ProjectReference {
                get {
                    if ((this.ProjectReferenceField == null)) {
                        this.ProjectReferenceField = new XTypedList<ProjectReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ProjectReference", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.ProjectReferenceField;
                }
                set {
                    if ((value == null)) {
                        this.ProjectReferenceField = null;
                    }
                    else {
                        if ((this.ProjectReferenceField == null)) {
                            this.ProjectReferenceField = XTypedList<ProjectReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProjectReference", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<ProjectReferenceLocalType>(this.ProjectReferenceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.EmbeddedResourceLocalType> EmbeddedResource {
                get {
                    if ((this.EmbeddedResourceField == null)) {
                        this.EmbeddedResourceField = new XTypedList<EmbeddedResourceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("EmbeddedResource", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.EmbeddedResourceField;
                }
                set {
                    if ((value == null)) {
                        this.EmbeddedResourceField = null;
                    }
                    else {
                        if ((this.EmbeddedResourceField == null)) {
                            this.EmbeddedResourceField = XTypedList<EmbeddedResourceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("EmbeddedResource", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<EmbeddedResourceLocalType>(this.EmbeddedResourceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.NoneLocalType> None {
                get {
                    if ((this.NoneField == null)) {
                        this.NoneField = new XTypedList<NoneLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("None", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.NoneField;
                }
                set {
                    if ((value == null)) {
                        this.NoneField = null;
                    }
                    else {
                        if ((this.NoneField == null)) {
                            this.NoneField = XTypedList<NoneLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("None", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<NoneLocalType>(this.NoneField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Compile*, Content*, Reference*, ProjectReference*, EmbeddedResource*, None*, Folder*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ItemGroupLocalType.FolderLocalType> Folder {
                get {
                    if ((this.FolderField == null)) {
                        this.FolderField = new XTypedList<FolderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Folder", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.FolderField;
                }
                set {
                    if ((value == null)) {
                        this.FolderField = null;
                    }
                    else {
                        if ((this.FolderField == null)) {
                            this.FolderField = XTypedList<FolderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Folder", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<FolderLocalType>(this.FolderField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ItemGroup", "http://schemas.microsoft.com/developer/msbuild/2003");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ItemGroupLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Compile", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(CompileLocalType));
                localElementDictionary.Add(XName.Get("Content", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ContentLocalType));
                localElementDictionary.Add(XName.Get("Reference", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ReferenceLocalType));
                localElementDictionary.Add(XName.Get("ProjectReference", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(ProjectReferenceLocalType));
                localElementDictionary.Add(XName.Get("EmbeddedResource", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(EmbeddedResourceLocalType));
                localElementDictionary.Add(XName.Get("None", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(NoneLocalType));
                localElementDictionary.Add(XName.Get("Folder", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(FolderLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
            /// </para>
            /// </summary>
            public partial class CompileLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator CompileLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CompileLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CompileLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AutoGen", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DesignTimeSharedInput", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DependentUpon", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
                /// </para>
                /// </summary>
                public CompileLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
                /// </para>
                /// </summary>
                public string AutoGen {
                    get {
                        XElement x = this.GetElement(XName.Get("AutoGen", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("AutoGen", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
                /// </para>
                /// </summary>
                public string DesignTimeSharedInput {
                    get {
                        XElement x = this.GetElement(XName.Get("DesignTimeSharedInput", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("DesignTimeSharedInput", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
                /// </para>
                /// </summary>
                public string DependentUpon {
                    get {
                        XElement x = this.GetElement(XName.Get("DependentUpon", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("DependentUpon", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AutoGen?, DesignTimeSharedInput?, DependentUpon?, SubType?)
                /// </para>
                /// </summary>
                public string SubType {
                    get {
                        XElement x = this.GetElement(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Compile", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CompileLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("AutoGen", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("DesignTimeSharedInput", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("DependentUpon", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SubType?)
            /// </para>
            /// </summary>
            public partial class ContentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ContentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ContentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (SubType?)
                /// </para>
                /// </summary>
                public ContentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (SubType?)
                /// </para>
                /// </summary>
                public string SubType {
                    get {
                        XElement x = this.GetElement(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Content", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ContentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("SubType", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RequiredTargetFramework?, SpecificVersion?, HintPath?)
            /// </para>
            /// </summary>
            public partial class ReferenceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ReferenceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RequiredTargetFramework", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SpecificVersion", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("HintPath", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (RequiredTargetFramework?, SpecificVersion?, HintPath?)
                /// </para>
                /// </summary>
                public ReferenceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (RequiredTargetFramework?, SpecificVersion?, HintPath?)
                /// </para>
                /// </summary>
                public string RequiredTargetFramework {
                    get {
                        XElement x = this.GetElement(XName.Get("RequiredTargetFramework", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("RequiredTargetFramework", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (RequiredTargetFramework?, SpecificVersion?, HintPath?)
                /// </para>
                /// </summary>
                public string SpecificVersion {
                    get {
                        XElement x = this.GetElement(XName.Get("SpecificVersion", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("SpecificVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (RequiredTargetFramework?, SpecificVersion?, HintPath?)
                /// </para>
                /// </summary>
                public string HintPath {
                    get {
                        XElement x = this.GetElement(XName.Get("HintPath", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("HintPath", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Reference", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ReferenceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("RequiredTargetFramework", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("SpecificVersion", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("HintPath", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Project?, Name?)
            /// </para>
            /// </summary>
            public partial class ProjectReferenceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ProjectReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProjectReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ProjectReferenceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("Name", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Project?, Name?)
                /// </para>
                /// </summary>
                public ProjectReferenceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Project?, Name?)
                /// </para>
                /// </summary>
                public string Project {
                    get {
                        XElement x = this.GetElement(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Project?, Name?)
                /// </para>
                /// </summary>
                public string Name {
                    get {
                        XElement x = this.GetElement(XName.Get("Name", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("Name", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ProjectReference", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ProjectReferenceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("Name", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            public partial class EmbeddedResourceLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator EmbeddedResourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EmbeddedResourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public EmbeddedResourceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("EmbeddedResource", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EmbeddedResourceLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Generator?, LastGenOutput?)
            /// </para>
            /// </summary>
            public partial class NoneLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator NoneLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NoneLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static NoneLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Generator", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("LastGenOutput", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Generator?, LastGenOutput?)
                /// </para>
                /// </summary>
                public NoneLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Generator?, LastGenOutput?)
                /// </para>
                /// </summary>
                public string Generator {
                    get {
                        XElement x = this.GetElement(XName.Get("Generator", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("Generator", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Generator?, LastGenOutput?)
                /// </para>
                /// </summary>
                public string LastGenOutput {
                    get {
                        XElement x = this.GetElement(XName.Get("LastGenOutput", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("LastGenOutput", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("None", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<NoneLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("Generator", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                    localElementDictionary.Add(XName.Get("LastGenOutput", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            public partial class FolderLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator FolderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FolderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public FolderLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Include {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Include", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Include", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Folder", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<FolderLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        public partial class ImportLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator ImportLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ImportLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public ImportLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Project {
                get {
                    XAttribute x = this.Attribute(XName.Get("Project", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Project", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Import", "http://schemas.microsoft.com/developer/msbuild/2003");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ImportLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VisualStudio*)
        /// </para>
        /// </summary>
        public partial class ProjectExtensionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<VisualStudioLocalType> VisualStudioField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator ProjectExtensionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProjectExtensionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ProjectExtensionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VisualStudio", "http://schemas.microsoft.com/developer/msbuild/2003")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (VisualStudio*)
            /// </para>
            /// </summary>
            public ProjectExtensionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (VisualStudio*)
            /// </para>
            /// </summary>
            public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ProjectExtensionsLocalType.VisualStudioLocalType> VisualStudio {
                get {
                    if ((this.VisualStudioField == null)) {
                        this.VisualStudioField = new XTypedList<VisualStudioLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("VisualStudio", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    return this.VisualStudioField;
                }
                set {
                    if ((value == null)) {
                        this.VisualStudioField = null;
                    }
                    else {
                        if ((this.VisualStudioField == null)) {
                            this.VisualStudioField = XTypedList<VisualStudioLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VisualStudio", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        else {
                            XTypedServices.SetList<VisualStudioLocalType>(this.VisualStudioField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ProjectExtensions", "http://schemas.microsoft.com/developer/msbuild/2003");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ProjectExtensionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("VisualStudio", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(VisualStudioLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FlavorProperties*)
            /// </para>
            /// </summary>
            public partial class VisualStudioLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<FlavorPropertiesLocalType> FlavorPropertiesField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator VisualStudioLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VisualStudioLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static VisualStudioLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FlavorProperties", "http://schemas.microsoft.com/developer/msbuild/2003")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FlavorProperties*)
                /// </para>
                /// </summary>
                public VisualStudioLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (FlavorProperties*)
                /// </para>
                /// </summary>
                public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ProjectExtensionsLocalType.VisualStudioLocalType.FlavorPropertiesLocalType> FlavorProperties {
                    get {
                        if ((this.FlavorPropertiesField == null)) {
                            this.FlavorPropertiesField = new XTypedList<FlavorPropertiesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("FlavorProperties", "http://schemas.microsoft.com/developer/msbuild/2003"));
                        }
                        return this.FlavorPropertiesField;
                    }
                    set {
                        if ((value == null)) {
                            this.FlavorPropertiesField = null;
                        }
                        else {
                            if ((this.FlavorPropertiesField == null)) {
                                this.FlavorPropertiesField = XTypedList<FlavorPropertiesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FlavorProperties", "http://schemas.microsoft.com/developer/msbuild/2003"));
                            }
                            else {
                                XTypedServices.SetList<FlavorPropertiesLocalType>(this.FlavorPropertiesField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("VisualStudio", "http://schemas.microsoft.com/developer/msbuild/2003");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<VisualStudioLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("FlavorProperties", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(FlavorPropertiesLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (WebProjectProperties*)
                /// </para>
                /// </summary>
                public partial class FlavorPropertiesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<WebProjectPropertiesLocalType> WebProjectPropertiesField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator FlavorPropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FlavorPropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static FlavorPropertiesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("WebProjectProperties", "http://schemas.microsoft.com/developer/msbuild/2003")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (WebProjectProperties*)
                    /// </para>
                    /// </summary>
                    public FlavorPropertiesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (WebProjectProperties*)
                    /// </para>
                    /// </summary>
                    public IList<schemas.microsoft.com.developer.msbuild.Item2003.Project.ProjectExtensionsLocalType.VisualStudioLocalType.FlavorPropertiesLocalType.WebProjectPropertiesLocalType> WebProjectProperties {
                        get {
                            if ((this.WebProjectPropertiesField == null)) {
                                this.WebProjectPropertiesField = new XTypedList<WebProjectPropertiesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("WebProjectProperties", "http://schemas.microsoft.com/developer/msbuild/2003"));
                            }
                            return this.WebProjectPropertiesField;
                        }
                        set {
                            if ((value == null)) {
                                this.WebProjectPropertiesField = null;
                            }
                            else {
                                if ((this.WebProjectPropertiesField == null)) {
                                    this.WebProjectPropertiesField = XTypedList<WebProjectPropertiesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebProjectProperties", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                }
                                else {
                                    XTypedServices.SetList<WebProjectPropertiesLocalType>(this.WebProjectPropertiesField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string GUID {
                        get {
                            XAttribute x = this.Attribute(XName.Get("GUID", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("GUID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("FlavorProperties", "http://schemas.microsoft.com/developer/msbuild/2003");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<FlavorPropertiesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("WebProjectProperties", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(WebProjectPropertiesLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                    /// </para>
                    /// </summary>
                    public partial class WebProjectPropertiesLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
         public static explicit operator WebProjectPropertiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WebProjectPropertiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static WebProjectPropertiesLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UseIIS", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("AutoAssignPort", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DevelopmentServerPort", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("DevelopmentServerVPath", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("IISUrl", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("NTLMAuthentication", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("UseCustomServer", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("CustomServerUrl", "http://schemas.microsoft.com/developer/msbuild/2003")), new NamedContentModelEntity(XName.Get("SaveServerSettingsInUserFile", "http://schemas.microsoft.com/developer/msbuild/2003")));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public WebProjectPropertiesLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string UseIIS {
                            get {
                                XElement x = this.GetElement(XName.Get("UseIIS", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("UseIIS", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string AutoAssignPort {
                            get {
                                XElement x = this.GetElement(XName.Get("AutoAssignPort", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("AutoAssignPort", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string DevelopmentServerPort {
                            get {
                                XElement x = this.GetElement(XName.Get("DevelopmentServerPort", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("DevelopmentServerPort", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string DevelopmentServerVPath {
                            get {
                                XElement x = this.GetElement(XName.Get("DevelopmentServerVPath", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("DevelopmentServerVPath", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string IISUrl {
                            get {
                                XElement x = this.GetElement(XName.Get("IISUrl", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("IISUrl", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string NTLMAuthentication {
                            get {
                                XElement x = this.GetElement(XName.Get("NTLMAuthentication", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("NTLMAuthentication", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string UseCustomServer {
                            get {
                                XElement x = this.GetElement(XName.Get("UseCustomServer", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("UseCustomServer", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string CustomServerUrl {
                            get {
                                XElement x = this.GetElement(XName.Get("CustomServerUrl", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("CustomServerUrl", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (UseIIS?, AutoAssignPort?, DevelopmentServerPort?, DevelopmentServerVPath?, IISUrl?, NTLMAuthentication?, UseCustomServer?, CustomServerUrl?, SaveServerSettingsInUserFile?)
                        /// </para>
                        /// </summary>
                        public string SaveServerSettingsInUserFile {
                            get {
                                XElement x = this.GetElement(XName.Get("SaveServerSettingsInUserFile", "http://schemas.microsoft.com/developer/msbuild/2003"));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(XName.Get("SaveServerSettingsInUserFile", "http://schemas.microsoft.com/developer/msbuild/2003"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName {
                            get {
                                return XName.Get("WebProjectProperties", "http://schemas.microsoft.com/developer/msbuild/2003");
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<WebProjectPropertiesLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(XName.Get("UseIIS", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("AutoAssignPort", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("DevelopmentServerPort", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("DevelopmentServerVPath", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("IISUrl", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("NTLMAuthentication", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("UseCustomServer", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("CustomServerUrl", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                            localElementDictionary.Add(XName.Get("SaveServerSettingsInUserFile", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Project)*
    /// </para>
    /// </summary>
    public partial class NewDataSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Project> ProjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator NewDataSet(XElement xe) { return XTypedServices.ToXTypedElement<NewDataSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NewDataSet() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Project)*
        /// </para>
        /// </summary>
        public NewDataSet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Project)*
        /// </para>
        /// </summary>
        public IList<Project> Project {
            get {
                if ((this.ProjectField == null)) {
                    this.ProjectField = new XTypedList<Project>(this, LinqToXsdTypeManager.Instance, XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"));
                }
                return this.ProjectField;
            }
            set {
                if ((value == null)) {
                    this.ProjectField = null;
                }
                else {
                    if ((this.ProjectField == null)) {
                        this.ProjectField = XTypedList<Project>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"));
                    }
                    else {
                        XTypedServices.SetList<Project>(this.ProjectField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NewDataSet", "http://schemas.microsoft.com/developer/msbuild/2003");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NewDataSet Load(string xmlFile) {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }
        
        public static NewDataSet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }
        
        public static NewDataSet Parse(string xml) {
            return XTypedServices.Parse<NewDataSet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NewDataSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(Project));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(global::schemas.microsoft.com.developer.msbuild.Item2003.Project));
            elementDictionary.Add(XName.Get("NewDataSet", "http://schemas.microsoft.com/developer/msbuild/2003"), typeof(global::schemas.microsoft.com.developer.msbuild.Item2003.NewDataSet));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("Project", "http://schemas.microsoft.com/developer/msbuild/2003")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Project Project {  get {return rootObject as Project; } }

    public NewDataSet NewDataSet {  get {return rootObject as NewDataSet; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NewDataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::schemas.microsoft.com.developer.msbuild.Item2003.Project Project {  get {return rootObject as global::schemas.microsoft.com.developer.msbuild.Item2003.Project; } }

    public global::schemas.microsoft.com.developer.msbuild.Item2003.NewDataSet NewDataSet {  get {return rootObject as global::schemas.microsoft.com.developer.msbuild.Item2003.NewDataSet; } }
        
        private XRoot() {
        }
        
        public XRoot(global::schemas.microsoft.com.developer.msbuild.Item2003.Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::schemas.microsoft.com.developer.msbuild.Item2003.NewDataSet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}

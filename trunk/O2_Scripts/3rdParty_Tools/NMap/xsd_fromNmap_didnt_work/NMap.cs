//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tempuri.org.nmap {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
    /// </para>
    /// </summary>
    public partial class nmaprun : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<scaninfo> scaninfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<taskbegin> taskbeginField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<taskprogress> taskprogressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<taskend> taskendField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<prescript> prescriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<postscript> postscriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<host> hostField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<output> outputField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator nmaprun(XElement xe) { return XTypedServices.ToXTypedElement<nmaprun>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static nmaprun() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public nmaprun() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<scaninfo> scaninfo {
            get {
                if ((this.scaninfoField == null)) {
                    this.scaninfoField = new XTypedList<scaninfo>(this, LinqToXsdTypeManager.Instance, XName.Get("scaninfo", "http://tempuri.org/nmap"));
                }
                return this.scaninfoField;
            }
            set {
                if ((value == null)) {
                    this.scaninfoField = null;
                }
                else {
                    if ((this.scaninfoField == null)) {
                        this.scaninfoField = XTypedList<scaninfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("scaninfo", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<scaninfo>(this.scaninfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public verbose verbose {
            get {
                XElement x = this.GetElement(XName.Get("verbose", "http://tempuri.org/nmap"));
                return ((verbose)(x));
            }
            set {
                this.SetElement(XName.Get("verbose", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public debugging debugging {
            get {
                XElement x = this.GetElement(XName.Get("debugging", "http://tempuri.org/nmap"));
                return ((debugging)(x));
            }
            set {
                this.SetElement(XName.Get("debugging", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<taskbegin> taskbegin {
            get {
                if ((this.taskbeginField == null)) {
                    this.taskbeginField = new XTypedList<taskbegin>(this, LinqToXsdTypeManager.Instance, XName.Get("taskbegin", "http://tempuri.org/nmap"));
                }
                return this.taskbeginField;
            }
            set {
                if ((value == null)) {
                    this.taskbeginField = null;
                }
                else {
                    if ((this.taskbeginField == null)) {
                        this.taskbeginField = XTypedList<taskbegin>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("taskbegin", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<taskbegin>(this.taskbeginField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<taskprogress> taskprogress {
            get {
                if ((this.taskprogressField == null)) {
                    this.taskprogressField = new XTypedList<taskprogress>(this, LinqToXsdTypeManager.Instance, XName.Get("taskprogress", "http://tempuri.org/nmap"));
                }
                return this.taskprogressField;
            }
            set {
                if ((value == null)) {
                    this.taskprogressField = null;
                }
                else {
                    if ((this.taskprogressField == null)) {
                        this.taskprogressField = XTypedList<taskprogress>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("taskprogress", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<taskprogress>(this.taskprogressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<taskend> taskend {
            get {
                if ((this.taskendField == null)) {
                    this.taskendField = new XTypedList<taskend>(this, LinqToXsdTypeManager.Instance, XName.Get("taskend", "http://tempuri.org/nmap"));
                }
                return this.taskendField;
            }
            set {
                if ((value == null)) {
                    this.taskendField = null;
                }
                else {
                    if ((this.taskendField == null)) {
                        this.taskendField = XTypedList<taskend>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("taskend", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<taskend>(this.taskendField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<prescript> prescript {
            get {
                if ((this.prescriptField == null)) {
                    this.prescriptField = new XTypedList<prescript>(this, LinqToXsdTypeManager.Instance, XName.Get("prescript", "http://tempuri.org/nmap"));
                }
                return this.prescriptField;
            }
            set {
                if ((value == null)) {
                    this.prescriptField = null;
                }
                else {
                    if ((this.prescriptField == null)) {
                        this.prescriptField = XTypedList<prescript>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("prescript", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<prescript>(this.prescriptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<postscript> postscript {
            get {
                if ((this.postscriptField == null)) {
                    this.postscriptField = new XTypedList<postscript>(this, LinqToXsdTypeManager.Instance, XName.Get("postscript", "http://tempuri.org/nmap"));
                }
                return this.postscriptField;
            }
            set {
                if ((value == null)) {
                    this.postscriptField = null;
                }
                else {
                    if ((this.postscriptField == null)) {
                        this.postscriptField = XTypedList<postscript>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("postscript", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<postscript>(this.postscriptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<host> host {
            get {
                if ((this.hostField == null)) {
                    this.hostField = new XTypedList<host>(this, LinqToXsdTypeManager.Instance, XName.Get("host", "http://tempuri.org/nmap"));
                }
                return this.hostField;
            }
            set {
                if ((value == null)) {
                    this.hostField = null;
                }
                else {
                    if ((this.hostField == null)) {
                        this.hostField = XTypedList<host>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("host", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<host>(this.hostField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public IList<output> output {
            get {
                if ((this.outputField == null)) {
                    this.outputField = new XTypedList<output>(this, LinqToXsdTypeManager.Instance, XName.Get("output", "http://tempuri.org/nmap"));
                }
                return this.outputField;
            }
            set {
                if ((value == null)) {
                    this.outputField = null;
                }
                else {
                    if ((this.outputField == null)) {
                        this.outputField = XTypedList<output>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("output", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<output>(this.outputField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (scaninfo*, verbose, debugging, (taskbegin | taskprogress | taskend | prescript | postscript | host | output)*, runstats)
        /// </para>
        /// </summary>
        public runstats runstats {
            get {
                XElement x = this.GetElement(XName.Get("runstats", "http://tempuri.org/nmap"));
                return ((runstats)(x));
            }
            set {
                this.SetElement(XName.Get("runstats", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string scanner {
            get {
                XAttribute x = this.Attribute(XName.Get("scanner", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scanner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string args {
            get {
                XAttribute x = this.Attribute(XName.Get("args", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("args", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string start {
            get {
                XAttribute x = this.Attribute(XName.Get("start", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("start", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string startstr {
            get {
                XAttribute x = this.Attribute(XName.Get("startstr", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("startstr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string profile_name {
            get {
                XAttribute x = this.Attribute(XName.Get("profile_name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("profile_name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string xmloutputversion {
            get {
                XAttribute x = this.Attribute(XName.Get("xmloutputversion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("xmloutputversion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nmaprun", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static nmaprun Load(string xmlFile) {
            return XTypedServices.Load<nmaprun>(xmlFile);
        }
        
        public static nmaprun Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nmaprun>(xmlFile);
        }
        
        public static nmaprun Parse(string xml) {
            return XTypedServices.Parse<nmaprun>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nmaprun>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("scaninfo", "http://tempuri.org/nmap"), typeof(scaninfo));
            localElementDictionary.Add(XName.Get("verbose", "http://tempuri.org/nmap"), typeof(verbose));
            localElementDictionary.Add(XName.Get("debugging", "http://tempuri.org/nmap"), typeof(debugging));
            localElementDictionary.Add(XName.Get("taskbegin", "http://tempuri.org/nmap"), typeof(taskbegin));
            localElementDictionary.Add(XName.Get("taskprogress", "http://tempuri.org/nmap"), typeof(taskprogress));
            localElementDictionary.Add(XName.Get("taskend", "http://tempuri.org/nmap"), typeof(taskend));
            localElementDictionary.Add(XName.Get("prescript", "http://tempuri.org/nmap"), typeof(prescript));
            localElementDictionary.Add(XName.Get("postscript", "http://tempuri.org/nmap"), typeof(postscript));
            localElementDictionary.Add(XName.Get("host", "http://tempuri.org/nmap"), typeof(host));
            localElementDictionary.Add(XName.Get("output", "http://tempuri.org/nmap"), typeof(output));
            localElementDictionary.Add(XName.Get("runstats", "http://tempuri.org/nmap"), typeof(runstats));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class scaninfo : XTypedElement, IXMetaData {
        
         public static explicit operator scaninfo(XElement xe) { return XTypedServices.ToXTypedElement<scaninfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public scaninfo() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string scanflags {
            get {
                XAttribute x = this.Attribute(XName.Get("scanflags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("scanflags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string protocol {
            get {
                XAttribute x = this.Attribute(XName.Get("protocol", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("protocol", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string numservices {
            get {
                XAttribute x = this.Attribute(XName.Get("numservices", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numservices", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string services {
            get {
                XAttribute x = this.Attribute(XName.Get("services", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("services", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("scaninfo", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static scaninfo Load(string xmlFile) {
            return XTypedServices.Load<scaninfo>(xmlFile);
        }
        
        public static scaninfo Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<scaninfo>(xmlFile);
        }
        
        public static scaninfo Parse(string xml) {
            return XTypedServices.Parse<scaninfo>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<scaninfo>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class verbose : XTypedElement, IXMetaData {
        
         public static explicit operator verbose(XElement xe) { return XTypedServices.ToXTypedElement<verbose>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public verbose() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string level {
            get {
                XAttribute x = this.Attribute(XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("verbose", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static verbose Load(string xmlFile) {
            return XTypedServices.Load<verbose>(xmlFile);
        }
        
        public static verbose Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<verbose>(xmlFile);
        }
        
        public static verbose Parse(string xml) {
            return XTypedServices.Parse<verbose>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<verbose>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class debugging : XTypedElement, IXMetaData {
        
         public static explicit operator debugging(XElement xe) { return XTypedServices.ToXTypedElement<debugging>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public debugging() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string level {
            get {
                XAttribute x = this.Attribute(XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("debugging", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static debugging Load(string xmlFile) {
            return XTypedServices.Load<debugging>(xmlFile);
        }
        
        public static debugging Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<debugging>(xmlFile);
        }
        
        public static debugging Parse(string xml) {
            return XTypedServices.Parse<debugging>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<debugging>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class taskbegin : XTypedElement, IXMetaData {
        
         public static explicit operator taskbegin(XElement xe) { return XTypedServices.ToXTypedElement<taskbegin>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public taskbegin() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string task {
            get {
                XAttribute x = this.Attribute(XName.Get("task", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("task", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string time {
            get {
                XAttribute x = this.Attribute(XName.Get("time", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extrainfo {
            get {
                XAttribute x = this.Attribute(XName.Get("extrainfo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extrainfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("taskbegin", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static taskbegin Load(string xmlFile) {
            return XTypedServices.Load<taskbegin>(xmlFile);
        }
        
        public static taskbegin Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<taskbegin>(xmlFile);
        }
        
        public static taskbegin Parse(string xml) {
            return XTypedServices.Parse<taskbegin>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<taskbegin>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class taskprogress : XTypedElement, IXMetaData {
        
         public static explicit operator taskprogress(XElement xe) { return XTypedServices.ToXTypedElement<taskprogress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public taskprogress() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string task {
            get {
                XAttribute x = this.Attribute(XName.Get("task", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("task", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string time {
            get {
                XAttribute x = this.Attribute(XName.Get("time", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string percent {
            get {
                XAttribute x = this.Attribute(XName.Get("percent", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("percent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string remaining {
            get {
                XAttribute x = this.Attribute(XName.Get("remaining", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("remaining", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string etc {
            get {
                XAttribute x = this.Attribute(XName.Get("etc", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("etc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("taskprogress", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static taskprogress Load(string xmlFile) {
            return XTypedServices.Load<taskprogress>(xmlFile);
        }
        
        public static taskprogress Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<taskprogress>(xmlFile);
        }
        
        public static taskprogress Parse(string xml) {
            return XTypedServices.Parse<taskprogress>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<taskprogress>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class taskend : XTypedElement, IXMetaData {
        
         public static explicit operator taskend(XElement xe) { return XTypedServices.ToXTypedElement<taskend>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public taskend() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string task {
            get {
                XAttribute x = this.Attribute(XName.Get("task", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("task", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string time {
            get {
                XAttribute x = this.Attribute(XName.Get("time", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extrainfo {
            get {
                XAttribute x = this.Attribute(XName.Get("extrainfo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extrainfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("taskend", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static taskend Load(string xmlFile) {
            return XTypedServices.Load<taskend>(xmlFile);
        }
        
        public static taskend Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<taskend>(xmlFile);
        }
        
        public static taskend Parse(string xml) {
            return XTypedServices.Parse<taskend>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<taskend>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
    /// </para>
    /// </summary>
    public partial class host : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<address> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hostnames> hostnamesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<smurf> smurfField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ports> portsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<os> osField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<distance> distanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<uptime> uptimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tcpsequence> tcpsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ipidsequence> ipidsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tcptssequence> tcptssequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hostscript> hostscriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<trace> traceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator host(XElement xe) { return XTypedServices.ToXTypedElement<host>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static host() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public host() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public status status {
            get {
                XElement x = this.GetElement(XName.Get("status", "http://tempuri.org/nmap"));
                return ((status)(x));
            }
            set {
                this.SetElement(XName.Get("status", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<address> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<address>(this, LinqToXsdTypeManager.Instance, XName.Get("address", "http://tempuri.org/nmap"));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<address>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("address", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<address>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<hostnames> hostnames {
            get {
                if ((this.hostnamesField == null)) {
                    this.hostnamesField = new XTypedList<hostnames>(this, LinqToXsdTypeManager.Instance, XName.Get("hostnames", "http://tempuri.org/nmap"));
                }
                return this.hostnamesField;
            }
            set {
                if ((value == null)) {
                    this.hostnamesField = null;
                }
                else {
                    if ((this.hostnamesField == null)) {
                        this.hostnamesField = XTypedList<hostnames>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hostnames", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<hostnames>(this.hostnamesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<smurf> smurf {
            get {
                if ((this.smurfField == null)) {
                    this.smurfField = new XTypedList<smurf>(this, LinqToXsdTypeManager.Instance, XName.Get("smurf", "http://tempuri.org/nmap"));
                }
                return this.smurfField;
            }
            set {
                if ((value == null)) {
                    this.smurfField = null;
                }
                else {
                    if ((this.smurfField == null)) {
                        this.smurfField = XTypedList<smurf>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("smurf", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<smurf>(this.smurfField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<ports> ports {
            get {
                if ((this.portsField == null)) {
                    this.portsField = new XTypedList<ports>(this, LinqToXsdTypeManager.Instance, XName.Get("ports", "http://tempuri.org/nmap"));
                }
                return this.portsField;
            }
            set {
                if ((value == null)) {
                    this.portsField = null;
                }
                else {
                    if ((this.portsField == null)) {
                        this.portsField = XTypedList<ports>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ports", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<ports>(this.portsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<os> os {
            get {
                if ((this.osField == null)) {
                    this.osField = new XTypedList<os>(this, LinqToXsdTypeManager.Instance, XName.Get("os", "http://tempuri.org/nmap"));
                }
                return this.osField;
            }
            set {
                if ((value == null)) {
                    this.osField = null;
                }
                else {
                    if ((this.osField == null)) {
                        this.osField = XTypedList<os>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("os", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<os>(this.osField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<distance> distance {
            get {
                if ((this.distanceField == null)) {
                    this.distanceField = new XTypedList<distance>(this, LinqToXsdTypeManager.Instance, XName.Get("distance", "http://tempuri.org/nmap"));
                }
                return this.distanceField;
            }
            set {
                if ((value == null)) {
                    this.distanceField = null;
                }
                else {
                    if ((this.distanceField == null)) {
                        this.distanceField = XTypedList<distance>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("distance", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<distance>(this.distanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<uptime> uptime {
            get {
                if ((this.uptimeField == null)) {
                    this.uptimeField = new XTypedList<uptime>(this, LinqToXsdTypeManager.Instance, XName.Get("uptime", "http://tempuri.org/nmap"));
                }
                return this.uptimeField;
            }
            set {
                if ((value == null)) {
                    this.uptimeField = null;
                }
                else {
                    if ((this.uptimeField == null)) {
                        this.uptimeField = XTypedList<uptime>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("uptime", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<uptime>(this.uptimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<tcpsequence> tcpsequence {
            get {
                if ((this.tcpsequenceField == null)) {
                    this.tcpsequenceField = new XTypedList<tcpsequence>(this, LinqToXsdTypeManager.Instance, XName.Get("tcpsequence", "http://tempuri.org/nmap"));
                }
                return this.tcpsequenceField;
            }
            set {
                if ((value == null)) {
                    this.tcpsequenceField = null;
                }
                else {
                    if ((this.tcpsequenceField == null)) {
                        this.tcpsequenceField = XTypedList<tcpsequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tcpsequence", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<tcpsequence>(this.tcpsequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<ipidsequence> ipidsequence {
            get {
                if ((this.ipidsequenceField == null)) {
                    this.ipidsequenceField = new XTypedList<ipidsequence>(this, LinqToXsdTypeManager.Instance, XName.Get("ipidsequence", "http://tempuri.org/nmap"));
                }
                return this.ipidsequenceField;
            }
            set {
                if ((value == null)) {
                    this.ipidsequenceField = null;
                }
                else {
                    if ((this.ipidsequenceField == null)) {
                        this.ipidsequenceField = XTypedList<ipidsequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ipidsequence", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<ipidsequence>(this.ipidsequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<tcptssequence> tcptssequence {
            get {
                if ((this.tcptssequenceField == null)) {
                    this.tcptssequenceField = new XTypedList<tcptssequence>(this, LinqToXsdTypeManager.Instance, XName.Get("tcptssequence", "http://tempuri.org/nmap"));
                }
                return this.tcptssequenceField;
            }
            set {
                if ((value == null)) {
                    this.tcptssequenceField = null;
                }
                else {
                    if ((this.tcptssequenceField == null)) {
                        this.tcptssequenceField = XTypedList<tcptssequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tcptssequence", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<tcptssequence>(this.tcptssequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<hostscript> hostscript {
            get {
                if ((this.hostscriptField == null)) {
                    this.hostscriptField = new XTypedList<hostscript>(this, LinqToXsdTypeManager.Instance, XName.Get("hostscript", "http://tempuri.org/nmap"));
                }
                return this.hostscriptField;
            }
            set {
                if ((value == null)) {
                    this.hostscriptField = null;
                }
                else {
                    if ((this.hostscriptField == null)) {
                        this.hostscriptField = XTypedList<hostscript>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hostscript", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<hostscript>(this.hostscriptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public IList<trace> trace {
            get {
                if ((this.traceField == null)) {
                    this.traceField = new XTypedList<trace>(this, LinqToXsdTypeManager.Instance, XName.Get("trace", "http://tempuri.org/nmap"));
                }
                return this.traceField;
            }
            set {
                if ((value == null)) {
                    this.traceField = null;
                }
                else {
                    if ((this.traceField == null)) {
                        this.traceField = XTypedList<trace>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("trace", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<trace>(this.traceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (status, address, (address | hostnames | smurf | ports | os | distance | uptime | tcpsequence | ipidsequence | tcptssequence | hostscript | trace)*, times?)
        /// </para>
        /// </summary>
        public times times {
            get {
                XElement x = this.GetElement(XName.Get("times", "http://tempuri.org/nmap"));
                return ((times)(x));
            }
            set {
                this.SetElement(XName.Get("times", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string starttime {
            get {
                XAttribute x = this.Attribute(XName.Get("starttime", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("starttime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string endtime {
            get {
                XAttribute x = this.Attribute(XName.Get("endtime", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("endtime", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string comment {
            get {
                XAttribute x = this.Attribute(XName.Get("comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("host", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static host Load(string xmlFile) {
            return XTypedServices.Load<host>(xmlFile);
        }
        
        public static host Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<host>(xmlFile);
        }
        
        public static host Parse(string xml) {
            return XTypedServices.Parse<host>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<host>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("status", "http://tempuri.org/nmap"), typeof(status));
            localElementDictionary.Add(XName.Get("address", "http://tempuri.org/nmap"), typeof(address));
            localElementDictionary.Add(XName.Get("hostnames", "http://tempuri.org/nmap"), typeof(hostnames));
            localElementDictionary.Add(XName.Get("smurf", "http://tempuri.org/nmap"), typeof(smurf));
            localElementDictionary.Add(XName.Get("ports", "http://tempuri.org/nmap"), typeof(ports));
            localElementDictionary.Add(XName.Get("os", "http://tempuri.org/nmap"), typeof(os));
            localElementDictionary.Add(XName.Get("distance", "http://tempuri.org/nmap"), typeof(distance));
            localElementDictionary.Add(XName.Get("uptime", "http://tempuri.org/nmap"), typeof(uptime));
            localElementDictionary.Add(XName.Get("tcpsequence", "http://tempuri.org/nmap"), typeof(tcpsequence));
            localElementDictionary.Add(XName.Get("ipidsequence", "http://tempuri.org/nmap"), typeof(ipidsequence));
            localElementDictionary.Add(XName.Get("tcptssequence", "http://tempuri.org/nmap"), typeof(tcptssequence));
            localElementDictionary.Add(XName.Get("hostscript", "http://tempuri.org/nmap"), typeof(hostscript));
            localElementDictionary.Add(XName.Get("trace", "http://tempuri.org/nmap"), typeof(trace));
            localElementDictionary.Add(XName.Get("times", "http://tempuri.org/nmap"), typeof(times));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class status : XTypedElement, IXMetaData {
        
         public static explicit operator status(XElement xe) { return XTypedServices.ToXTypedElement<status>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public status() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string state {
            get {
                XAttribute x = this.Attribute(XName.Get("state", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string reason {
            get {
                XAttribute x = this.Attribute(XName.Get("reason", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reason", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("status", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static status Load(string xmlFile) {
            return XTypedServices.Load<status>(xmlFile);
        }
        
        public static status Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<status>(xmlFile);
        }
        
        public static status Parse(string xml) {
            return XTypedServices.Parse<status>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<status>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class address : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string addrtypeDefaultValue = "ipv4";
        
         public static explicit operator address(XElement xe) { return XTypedServices.ToXTypedElement<address>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public address() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string addr {
            get {
                XAttribute x = this.Attribute(XName.Get("addr", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("addr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string addrtype {
            get {
                XAttribute x = this.Attribute(XName.Get("addrtype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, addrtypeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("addrtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string vendor {
            get {
                XAttribute x = this.Attribute(XName.Get("vendor", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("vendor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("address", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static address Load(string xmlFile) {
            return XTypedServices.Load<address>(xmlFile);
        }
        
        public static address Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<address>(xmlFile);
        }
        
        public static address Parse(string xml) {
            return XTypedServices.Parse<address>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<address>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (hostname)*
    /// </para>
    /// </summary>
    public partial class hostnames : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hostname> hostnameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator hostnames(XElement xe) { return XTypedServices.ToXTypedElement<hostnames>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static hostnames() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hostname)*
        /// </para>
        /// </summary>
        public hostnames() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (hostname)*
        /// </para>
        /// </summary>
        public IList<hostname> hostname {
            get {
                if ((this.hostnameField == null)) {
                    this.hostnameField = new XTypedList<hostname>(this, LinqToXsdTypeManager.Instance, XName.Get("hostname", "http://tempuri.org/nmap"));
                }
                return this.hostnameField;
            }
            set {
                if ((value == null)) {
                    this.hostnameField = null;
                }
                else {
                    if ((this.hostnameField == null)) {
                        this.hostnameField = XTypedList<hostname>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hostname", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<hostname>(this.hostnameField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hostnames", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hostnames Load(string xmlFile) {
            return XTypedServices.Load<hostnames>(xmlFile);
        }
        
        public static hostnames Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hostnames>(xmlFile);
        }
        
        public static hostnames Parse(string xml) {
            return XTypedServices.Parse<hostnames>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hostnames>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("hostname", "http://tempuri.org/nmap"), typeof(hostname));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class hostname : XTypedElement, IXMetaData {
        
         public static explicit operator hostname(XElement xe) { return XTypedServices.ToXTypedElement<hostname>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public hostname() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hostname", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hostname Load(string xmlFile) {
            return XTypedServices.Load<hostname>(xmlFile);
        }
        
        public static hostname Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hostname>(xmlFile);
        }
        
        public static hostname Parse(string xml) {
            return XTypedServices.Parse<hostname>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hostname>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class smurf : XTypedElement, IXMetaData {
        
         public static explicit operator smurf(XElement xe) { return XTypedServices.ToXTypedElement<smurf>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public smurf() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string responses {
            get {
                XAttribute x = this.Attribute(XName.Get("responses", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("responses", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("smurf", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static smurf Load(string xmlFile) {
            return XTypedServices.Load<smurf>(xmlFile);
        }
        
        public static smurf Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<smurf>(xmlFile);
        }
        
        public static smurf Parse(string xml) {
            return XTypedServices.Parse<smurf>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<smurf>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (extraports*, port*)
    /// </para>
    /// </summary>
    public partial class ports : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extraports> extraportsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<port> portField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ports(XElement xe) { return XTypedServices.ToXTypedElement<ports>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ports() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("extraports", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("port", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (extraports*, port*)
        /// </para>
        /// </summary>
        public ports() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (extraports*, port*)
        /// </para>
        /// </summary>
        public IList<extraports> extraports {
            get {
                if ((this.extraportsField == null)) {
                    this.extraportsField = new XTypedList<extraports>(this, LinqToXsdTypeManager.Instance, XName.Get("extraports", "http://tempuri.org/nmap"));
                }
                return this.extraportsField;
            }
            set {
                if ((value == null)) {
                    this.extraportsField = null;
                }
                else {
                    if ((this.extraportsField == null)) {
                        this.extraportsField = XTypedList<extraports>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("extraports", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<extraports>(this.extraportsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (extraports*, port*)
        /// </para>
        /// </summary>
        public IList<port> port {
            get {
                if ((this.portField == null)) {
                    this.portField = new XTypedList<port>(this, LinqToXsdTypeManager.Instance, XName.Get("port", "http://tempuri.org/nmap"));
                }
                return this.portField;
            }
            set {
                if ((value == null)) {
                    this.portField = null;
                }
                else {
                    if ((this.portField == null)) {
                        this.portField = XTypedList<port>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("port", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<port>(this.portField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ports", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ports Load(string xmlFile) {
            return XTypedServices.Load<ports>(xmlFile);
        }
        
        public static ports Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ports>(xmlFile);
        }
        
        public static ports Parse(string xml) {
            return XTypedServices.Parse<ports>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ports>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("extraports", "http://tempuri.org/nmap"), typeof(extraports));
            localElementDictionary.Add(XName.Get("port", "http://tempuri.org/nmap"), typeof(port));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (extrareasons)*
    /// </para>
    /// </summary>
    public partial class extraports : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<extrareasons> extrareasonsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator extraports(XElement xe) { return XTypedServices.ToXTypedElement<extraports>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extraports() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (extrareasons)*
        /// </para>
        /// </summary>
        public extraports() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (extrareasons)*
        /// </para>
        /// </summary>
        public IList<extrareasons> extrareasons {
            get {
                if ((this.extrareasonsField == null)) {
                    this.extrareasonsField = new XTypedList<extrareasons>(this, LinqToXsdTypeManager.Instance, XName.Get("extrareasons", "http://tempuri.org/nmap"));
                }
                return this.extrareasonsField;
            }
            set {
                if ((value == null)) {
                    this.extrareasonsField = null;
                }
                else {
                    if ((this.extrareasonsField == null)) {
                        this.extrareasonsField = XTypedList<extrareasons>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("extrareasons", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<extrareasons>(this.extrareasonsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string state {
            get {
                XAttribute x = this.Attribute(XName.Get("state", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string count {
            get {
                XAttribute x = this.Attribute(XName.Get("count", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("extraports", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static extraports Load(string xmlFile) {
            return XTypedServices.Load<extraports>(xmlFile);
        }
        
        public static extraports Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<extraports>(xmlFile);
        }
        
        public static extraports Parse(string xml) {
            return XTypedServices.Parse<extraports>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extraports>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("extrareasons", "http://tempuri.org/nmap"), typeof(extrareasons));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class extrareasons : XTypedElement, IXMetaData {
        
         public static explicit operator extrareasons(XElement xe) { return XTypedServices.ToXTypedElement<extrareasons>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extrareasons() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string reason {
            get {
                XAttribute x = this.Attribute(XName.Get("reason", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reason", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string count {
            get {
                XAttribute x = this.Attribute(XName.Get("count", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("extrareasons", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static extrareasons Load(string xmlFile) {
            return XTypedServices.Load<extrareasons>(xmlFile);
        }
        
        public static extrareasons Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<extrareasons>(xmlFile);
        }
        
        public static extrareasons Parse(string xml) {
            return XTypedServices.Parse<extrareasons>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extrareasons>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (state, owner?, service?, script*)
    /// </para>
    /// </summary>
    public partial class port : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<script> scriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator port(XElement xe) { return XTypedServices.ToXTypedElement<port>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static port() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("state", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("owner", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("service", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("script", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (state, owner?, service?, script*)
        /// </para>
        /// </summary>
        public port() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (state, owner?, service?, script*)
        /// </para>
        /// </summary>
        public state state {
            get {
                XElement x = this.GetElement(XName.Get("state", "http://tempuri.org/nmap"));
                return ((state)(x));
            }
            set {
                this.SetElement(XName.Get("state", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (state, owner?, service?, script*)
        /// </para>
        /// </summary>
        public owner owner {
            get {
                XElement x = this.GetElement(XName.Get("owner", "http://tempuri.org/nmap"));
                return ((owner)(x));
            }
            set {
                this.SetElement(XName.Get("owner", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (state, owner?, service?, script*)
        /// </para>
        /// </summary>
        public service service {
            get {
                XElement x = this.GetElement(XName.Get("service", "http://tempuri.org/nmap"));
                return ((service)(x));
            }
            set {
                this.SetElement(XName.Get("service", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (state, owner?, service?, script*)
        /// </para>
        /// </summary>
        public IList<script> script {
            get {
                if ((this.scriptField == null)) {
                    this.scriptField = new XTypedList<script>(this, LinqToXsdTypeManager.Instance, XName.Get("script", "http://tempuri.org/nmap"));
                }
                return this.scriptField;
            }
            set {
                if ((value == null)) {
                    this.scriptField = null;
                }
                else {
                    if ((this.scriptField == null)) {
                        this.scriptField = XTypedList<script>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("script", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<script>(this.scriptField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string protocol {
            get {
                XAttribute x = this.Attribute(XName.Get("protocol", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("protocol", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string portid {
            get {
                XAttribute x = this.Attribute(XName.Get("portid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("portid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("port", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static port Load(string xmlFile) {
            return XTypedServices.Load<port>(xmlFile);
        }
        
        public static port Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<port>(xmlFile);
        }
        
        public static port Parse(string xml) {
            return XTypedServices.Parse<port>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<port>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("state", "http://tempuri.org/nmap"), typeof(state));
            localElementDictionary.Add(XName.Get("owner", "http://tempuri.org/nmap"), typeof(owner));
            localElementDictionary.Add(XName.Get("service", "http://tempuri.org/nmap"), typeof(service));
            localElementDictionary.Add(XName.Get("script", "http://tempuri.org/nmap"), typeof(script));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class state : XTypedElement, IXMetaData {
        
         public static explicit operator state(XElement xe) { return XTypedServices.ToXTypedElement<state>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public state() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string state1 {
            get {
                XAttribute x = this.Attribute(XName.Get("state", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string reason {
            get {
                XAttribute x = this.Attribute(XName.Get("reason", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reason", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string reason_ttl {
            get {
                XAttribute x = this.Attribute(XName.Get("reason_ttl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reason_ttl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string reason_ip {
            get {
                XAttribute x = this.Attribute(XName.Get("reason_ip", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("reason_ip", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("state", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static state Load(string xmlFile) {
            return XTypedServices.Load<state>(xmlFile);
        }
        
        public static state Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<state>(xmlFile);
        }
        
        public static state Parse(string xml) {
            return XTypedServices.Parse<state>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<state>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class owner : XTypedElement, IXMetaData {
        
         public static explicit operator owner(XElement xe) { return XTypedServices.ToXTypedElement<owner>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public owner() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("owner", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static owner Load(string xmlFile) {
            return XTypedServices.Load<owner>(xmlFile);
        }
        
        public static owner Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<owner>(xmlFile);
        }
        
        public static owner Parse(string xml) {
            return XTypedServices.Parse<owner>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<owner>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (cpe*)
    /// </para>
    /// </summary>
    public partial class service : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<cpe> cpeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator service(XElement xe) { return XTypedServices.ToXTypedElement<service>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static service() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("cpe", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cpe*)
        /// </para>
        /// </summary>
        public service() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cpe*)
        /// </para>
        /// </summary>
        public IList<cpe> cpe {
            get {
                if ((this.cpeField == null)) {
                    this.cpeField = new XSimpleList<cpe>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("cpe", "http://tempuri.org/nmap"));
                }
                return this.cpeField;
            }
            set {
                if ((value == null)) {
                    this.cpeField = null;
                }
                else {
                    if ((this.cpeField == null)) {
                        this.cpeField = XSimpleList<cpe>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("cpe", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<cpe>(this.cpeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string conf {
            get {
                XAttribute x = this.Attribute(XName.Get("conf", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("conf", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string method {
            get {
                XAttribute x = this.Attribute(XName.Get("method", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("method", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string product {
            get {
                XAttribute x = this.Attribute(XName.Get("product", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("product", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string extrainfo {
            get {
                XAttribute x = this.Attribute(XName.Get("extrainfo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("extrainfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string tunnel {
            get {
                XAttribute x = this.Attribute(XName.Get("tunnel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("tunnel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proto {
            get {
                XAttribute x = this.Attribute(XName.Get("proto", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proto", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string rpcnum {
            get {
                XAttribute x = this.Attribute(XName.Get("rpcnum", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rpcnum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lowver {
            get {
                XAttribute x = this.Attribute(XName.Get("lowver", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lowver", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string highver {
            get {
                XAttribute x = this.Attribute(XName.Get("highver", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("highver", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string hostname {
            get {
                XAttribute x = this.Attribute(XName.Get("hostname", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("hostname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ostype {
            get {
                XAttribute x = this.Attribute(XName.Get("ostype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ostype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string devicetype {
            get {
                XAttribute x = this.Attribute(XName.Get("devicetype", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("devicetype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string servicefp {
            get {
                XAttribute x = this.Attribute(XName.Get("servicefp", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("servicefp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("service", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static service Load(string xmlFile) {
            return XTypedServices.Load<service>(xmlFile);
        }
        
        public static service Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<service>(xmlFile);
        }
        
        public static service Parse(string xml) {
            return XTypedServices.Parse<service>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<service>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("cpe", "http://tempuri.org/nmap"), typeof(cpe));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class script : XTypedElement, IXMetaData {
        
         public static explicit operator script(XElement xe) { return XTypedServices.ToXTypedElement<script>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public script() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string id {
            get {
                XAttribute x = this.Attribute(XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string output {
            get {
                XAttribute x = this.Attribute(XName.Get("output", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("output", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("script", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static script Load(string xmlFile) {
            return XTypedServices.Load<script>(xmlFile);
        }
        
        public static script Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<script>(xmlFile);
        }
        
        public static script Parse(string xml) {
            return XTypedServices.Parse<script>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<script>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
    /// </para>
    /// </summary>
    public partial class os : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<portused> portusedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<osclass> osclassField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<osmatch> osmatchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<osfingerprint> osfingerprintField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator os(XElement xe) { return XTypedServices.ToXTypedElement<os>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static os() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("portused", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("osclass", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("osmatch", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("osfingerprint", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
        /// </para>
        /// </summary>
        public os() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
        /// </para>
        /// </summary>
        public IList<portused> portused {
            get {
                if ((this.portusedField == null)) {
                    this.portusedField = new XTypedList<portused>(this, LinqToXsdTypeManager.Instance, XName.Get("portused", "http://tempuri.org/nmap"));
                }
                return this.portusedField;
            }
            set {
                if ((value == null)) {
                    this.portusedField = null;
                }
                else {
                    if ((this.portusedField == null)) {
                        this.portusedField = XTypedList<portused>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("portused", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<portused>(this.portusedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
        /// </para>
        /// </summary>
        public IList<osclass> osclass {
            get {
                if ((this.osclassField == null)) {
                    this.osclassField = new XTypedList<osclass>(this, LinqToXsdTypeManager.Instance, XName.Get("osclass", "http://tempuri.org/nmap"));
                }
                return this.osclassField;
            }
            set {
                if ((value == null)) {
                    this.osclassField = null;
                }
                else {
                    if ((this.osclassField == null)) {
                        this.osclassField = XTypedList<osclass>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("osclass", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<osclass>(this.osclassField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
        /// </para>
        /// </summary>
        public IList<osmatch> osmatch {
            get {
                if ((this.osmatchField == null)) {
                    this.osmatchField = new XTypedList<osmatch>(this, LinqToXsdTypeManager.Instance, XName.Get("osmatch", "http://tempuri.org/nmap"));
                }
                return this.osmatchField;
            }
            set {
                if ((value == null)) {
                    this.osmatchField = null;
                }
                else {
                    if ((this.osmatchField == null)) {
                        this.osmatchField = XTypedList<osmatch>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("osmatch", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<osmatch>(this.osmatchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*, osfingerprint*)
        /// </para>
        /// </summary>
        public IList<osfingerprint> osfingerprint {
            get {
                if ((this.osfingerprintField == null)) {
                    this.osfingerprintField = new XTypedList<osfingerprint>(this, LinqToXsdTypeManager.Instance, XName.Get("osfingerprint", "http://tempuri.org/nmap"));
                }
                return this.osfingerprintField;
            }
            set {
                if ((value == null)) {
                    this.osfingerprintField = null;
                }
                else {
                    if ((this.osfingerprintField == null)) {
                        this.osfingerprintField = XTypedList<osfingerprint>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("osfingerprint", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<osfingerprint>(this.osfingerprintField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("os", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static os Load(string xmlFile) {
            return XTypedServices.Load<os>(xmlFile);
        }
        
        public static os Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<os>(xmlFile);
        }
        
        public static os Parse(string xml) {
            return XTypedServices.Parse<os>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<os>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("portused", "http://tempuri.org/nmap"), typeof(portused));
            localElementDictionary.Add(XName.Get("osclass", "http://tempuri.org/nmap"), typeof(osclass));
            localElementDictionary.Add(XName.Get("osmatch", "http://tempuri.org/nmap"), typeof(osmatch));
            localElementDictionary.Add(XName.Get("osfingerprint", "http://tempuri.org/nmap"), typeof(osfingerprint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class portused : XTypedElement, IXMetaData {
        
         public static explicit operator portused(XElement xe) { return XTypedServices.ToXTypedElement<portused>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public portused() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string state {
            get {
                XAttribute x = this.Attribute(XName.Get("state", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string proto {
            get {
                XAttribute x = this.Attribute(XName.Get("proto", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proto", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string portid {
            get {
                XAttribute x = this.Attribute(XName.Get("portid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("portid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("portused", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static portused Load(string xmlFile) {
            return XTypedServices.Load<portused>(xmlFile);
        }
        
        public static portused Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<portused>(xmlFile);
        }
        
        public static portused Parse(string xml) {
            return XTypedServices.Parse<portused>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<portused>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (cpe*)
    /// </para>
    /// </summary>
    public partial class osclass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<cpe> cpeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator osclass(XElement xe) { return XTypedServices.ToXTypedElement<osclass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static osclass() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("cpe", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (cpe*)
        /// </para>
        /// </summary>
        public osclass() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cpe*)
        /// </para>
        /// </summary>
        public IList<cpe> cpe {
            get {
                if ((this.cpeField == null)) {
                    this.cpeField = new XSimpleList<cpe>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("cpe", "http://tempuri.org/nmap"));
                }
                return this.cpeField;
            }
            set {
                if ((value == null)) {
                    this.cpeField = null;
                }
                else {
                    if ((this.cpeField == null)) {
                        this.cpeField = XSimpleList<cpe>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("cpe", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<cpe>(this.cpeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string vendor {
            get {
                XAttribute x = this.Attribute(XName.Get("vendor", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("vendor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string osgen {
            get {
                XAttribute x = this.Attribute(XName.Get("osgen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("osgen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string accuracy {
            get {
                XAttribute x = this.Attribute(XName.Get("accuracy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("accuracy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string osfamily {
            get {
                XAttribute x = this.Attribute(XName.Get("osfamily", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("osfamily", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("osclass", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static osclass Load(string xmlFile) {
            return XTypedServices.Load<osclass>(xmlFile);
        }
        
        public static osclass Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<osclass>(xmlFile);
        }
        
        public static osclass Parse(string xml) {
            return XTypedServices.Parse<osclass>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<osclass>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("cpe", "http://tempuri.org/nmap"), typeof(cpe));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class osmatch : XTypedElement, IXMetaData {
        
         public static explicit operator osmatch(XElement xe) { return XTypedServices.ToXTypedElement<osmatch>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public osmatch() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string accuracy {
            get {
                XAttribute x = this.Attribute(XName.Get("accuracy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("accuracy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string line {
            get {
                XAttribute x = this.Attribute(XName.Get("line", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("line", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("osmatch", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static osmatch Load(string xmlFile) {
            return XTypedServices.Load<osmatch>(xmlFile);
        }
        
        public static osmatch Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<osmatch>(xmlFile);
        }
        
        public static osmatch Parse(string xml) {
            return XTypedServices.Parse<osmatch>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<osmatch>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class osfingerprint : XTypedElement, IXMetaData {
        
         public static explicit operator osfingerprint(XElement xe) { return XTypedServices.ToXTypedElement<osfingerprint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public osfingerprint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string fingerprint {
            get {
                XAttribute x = this.Attribute(XName.Get("fingerprint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("fingerprint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("osfingerprint", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static osfingerprint Load(string xmlFile) {
            return XTypedServices.Load<osfingerprint>(xmlFile);
        }
        
        public static osfingerprint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<osfingerprint>(xmlFile);
        }
        
        public static osfingerprint Parse(string xml) {
            return XTypedServices.Parse<osfingerprint>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<osfingerprint>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class distance : XTypedElement, IXMetaData {
        
         public static explicit operator distance(XElement xe) { return XTypedServices.ToXTypedElement<distance>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public distance() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("distance", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static distance Load(string xmlFile) {
            return XTypedServices.Load<distance>(xmlFile);
        }
        
        public static distance Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<distance>(xmlFile);
        }
        
        public static distance Parse(string xml) {
            return XTypedServices.Parse<distance>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<distance>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class uptime : XTypedElement, IXMetaData {
        
         public static explicit operator uptime(XElement xe) { return XTypedServices.ToXTypedElement<uptime>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public uptime() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string seconds {
            get {
                XAttribute x = this.Attribute(XName.Get("seconds", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("seconds", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string lastboot {
            get {
                XAttribute x = this.Attribute(XName.Get("lastboot", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("lastboot", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("uptime", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static uptime Load(string xmlFile) {
            return XTypedServices.Load<uptime>(xmlFile);
        }
        
        public static uptime Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<uptime>(xmlFile);
        }
        
        public static uptime Parse(string xml) {
            return XTypedServices.Parse<uptime>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uptime>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class tcpsequence : XTypedElement, IXMetaData {
        
         public static explicit operator tcpsequence(XElement xe) { return XTypedServices.ToXTypedElement<tcpsequence>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public tcpsequence() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string difficulty {
            get {
                XAttribute x = this.Attribute(XName.Get("difficulty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("difficulty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string values {
            get {
                XAttribute x = this.Attribute(XName.Get("values", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tcpsequence", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tcpsequence Load(string xmlFile) {
            return XTypedServices.Load<tcpsequence>(xmlFile);
        }
        
        public static tcpsequence Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tcpsequence>(xmlFile);
        }
        
        public static tcpsequence Parse(string xml) {
            return XTypedServices.Parse<tcpsequence>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tcpsequence>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ipidsequence : XTypedElement, IXMetaData {
        
         public static explicit operator ipidsequence(XElement xe) { return XTypedServices.ToXTypedElement<ipidsequence>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ipidsequence() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string values {
            get {
                XAttribute x = this.Attribute(XName.Get("values", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ipidsequence", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ipidsequence Load(string xmlFile) {
            return XTypedServices.Load<ipidsequence>(xmlFile);
        }
        
        public static ipidsequence Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ipidsequence>(xmlFile);
        }
        
        public static ipidsequence Parse(string xml) {
            return XTypedServices.Parse<ipidsequence>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ipidsequence>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class tcptssequence : XTypedElement, IXMetaData {
        
         public static explicit operator tcptssequence(XElement xe) { return XTypedServices.ToXTypedElement<tcptssequence>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public tcptssequence() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string values {
            get {
                XAttribute x = this.Attribute(XName.Get("values", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("tcptssequence", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tcptssequence Load(string xmlFile) {
            return XTypedServices.Load<tcptssequence>(xmlFile);
        }
        
        public static tcptssequence Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tcptssequence>(xmlFile);
        }
        
        public static tcptssequence Parse(string xml) {
            return XTypedServices.Parse<tcptssequence>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tcptssequence>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (hop*)
    /// </para>
    /// </summary>
    public partial class trace : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hop> hopField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator trace(XElement xe) { return XTypedServices.ToXTypedElement<trace>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static trace() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("hop", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hop*)
        /// </para>
        /// </summary>
        public trace() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (hop*)
        /// </para>
        /// </summary>
        public IList<hop> hop {
            get {
                if ((this.hopField == null)) {
                    this.hopField = new XTypedList<hop>(this, LinqToXsdTypeManager.Instance, XName.Get("hop", "http://tempuri.org/nmap"));
                }
                return this.hopField;
            }
            set {
                if ((value == null)) {
                    this.hopField = null;
                }
                else {
                    if ((this.hopField == null)) {
                        this.hopField = XTypedList<hop>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hop", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<hop>(this.hopField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string proto {
            get {
                XAttribute x = this.Attribute(XName.Get("proto", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("proto", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string port {
            get {
                XAttribute x = this.Attribute(XName.Get("port", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("port", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("trace", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static trace Load(string xmlFile) {
            return XTypedServices.Load<trace>(xmlFile);
        }
        
        public static trace Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<trace>(xmlFile);
        }
        
        public static trace Parse(string xml) {
            return XTypedServices.Parse<trace>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<trace>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("hop", "http://tempuri.org/nmap"), typeof(hop));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class hop : XTypedElement, IXMetaData {
        
         public static explicit operator hop(XElement xe) { return XTypedServices.ToXTypedElement<hop>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public hop() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ttl {
            get {
                XAttribute x = this.Attribute(XName.Get("ttl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ttl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string rtt {
            get {
                XAttribute x = this.Attribute(XName.Get("rtt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rtt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ipaddr {
            get {
                XAttribute x = this.Attribute(XName.Get("ipaddr", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ipaddr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string host {
            get {
                XAttribute x = this.Attribute(XName.Get("host", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("host", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hop", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hop Load(string xmlFile) {
            return XTypedServices.Load<hop>(xmlFile);
        }
        
        public static hop Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hop>(xmlFile);
        }
        
        public static hop Parse(string xml) {
            return XTypedServices.Parse<hop>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hop>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class times : XTypedElement, IXMetaData {
        
         public static explicit operator times(XElement xe) { return XTypedServices.ToXTypedElement<times>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public times() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string srtt {
            get {
                XAttribute x = this.Attribute(XName.Get("srtt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("srtt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string rttvar {
            get {
                XAttribute x = this.Attribute(XName.Get("rttvar", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("rttvar", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string to {
            get {
                XAttribute x = this.Attribute(XName.Get("to", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("to", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("times", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static times Load(string xmlFile) {
            return XTypedServices.Load<times>(xmlFile);
        }
        
        public static times Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<times>(xmlFile);
        }
        
        public static times Parse(string xml) {
            return XTypedServices.Parse<times>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<times>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class output : XTypedElement, IXMetaData {
        
         public static explicit operator output(XElement xe) { return XTypedServices.ToXTypedElement<output>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public output() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("output", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static output Load(string xmlFile) {
            return XTypedServices.Load<output>(xmlFile);
        }
        
        public static output Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<output>(xmlFile);
        }
        
        public static output Parse(string xml) {
            return XTypedServices.Parse<output>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<output>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (finished, hosts)
    /// </para>
    /// </summary>
    public partial class runstats : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator runstats(XElement xe) { return XTypedServices.ToXTypedElement<runstats>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static runstats() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("finished", "http://tempuri.org/nmap")), new NamedContentModelEntity(XName.Get("hosts", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (finished, hosts)
        /// </para>
        /// </summary>
        public runstats() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (finished, hosts)
        /// </para>
        /// </summary>
        public finished finished {
            get {
                XElement x = this.GetElement(XName.Get("finished", "http://tempuri.org/nmap"));
                return ((finished)(x));
            }
            set {
                this.SetElement(XName.Get("finished", "http://tempuri.org/nmap"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (finished, hosts)
        /// </para>
        /// </summary>
        public hosts hosts {
            get {
                XElement x = this.GetElement(XName.Get("hosts", "http://tempuri.org/nmap"));
                return ((hosts)(x));
            }
            set {
                this.SetElement(XName.Get("hosts", "http://tempuri.org/nmap"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("runstats", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static runstats Load(string xmlFile) {
            return XTypedServices.Load<runstats>(xmlFile);
        }
        
        public static runstats Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<runstats>(xmlFile);
        }
        
        public static runstats Parse(string xml) {
            return XTypedServices.Parse<runstats>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<runstats>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("finished", "http://tempuri.org/nmap"), typeof(finished));
            localElementDictionary.Add(XName.Get("hosts", "http://tempuri.org/nmap"), typeof(hosts));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class finished : XTypedElement, IXMetaData {
        
         public static explicit operator finished(XElement xe) { return XTypedServices.ToXTypedElement<finished>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public finished() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string time {
            get {
                XAttribute x = this.Attribute(XName.Get("time", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string timestr {
            get {
                XAttribute x = this.Attribute(XName.Get("timestr", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("timestr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string elapsed {
            get {
                XAttribute x = this.Attribute(XName.Get("elapsed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("elapsed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string summary {
            get {
                XAttribute x = this.Attribute(XName.Get("summary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("summary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string exit {
            get {
                XAttribute x = this.Attribute(XName.Get("exit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("exit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string errormsg {
            get {
                XAttribute x = this.Attribute(XName.Get("errormsg", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("errormsg", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("finished", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static finished Load(string xmlFile) {
            return XTypedServices.Load<finished>(xmlFile);
        }
        
        public static finished Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<finished>(xmlFile);
        }
        
        public static finished Parse(string xml) {
            return XTypedServices.Parse<finished>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<finished>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class hosts : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string upDefaultValue = "0";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string downDefaultValue = "0";
        
         public static explicit operator hosts(XElement xe) { return XTypedServices.ToXTypedElement<hosts>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public hosts() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string up {
            get {
                XAttribute x = this.Attribute(XName.Get("up", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, upDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("up", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string down {
            get {
                XAttribute x = this.Attribute(XName.Get("down", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, downDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("down", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string total {
            get {
                XAttribute x = this.Attribute(XName.Get("total", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("total", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hosts", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hosts Load(string xmlFile) {
            return XTypedServices.Load<hosts>(xmlFile);
        }
        
        public static hosts Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hosts>(xmlFile);
        }
        
        public static hosts Parse(string xml) {
            return XTypedServices.Parse<hosts>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hosts>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (script+)
    /// </para>
    /// </summary>
    public partial class hostscript : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<script> scriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator hostscript(XElement xe) { return XTypedServices.ToXTypedElement<hostscript>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static hostscript() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("script", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public hostscript() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public IList<script> script {
            get {
                if ((this.scriptField == null)) {
                    this.scriptField = new XTypedList<script>(this, LinqToXsdTypeManager.Instance, XName.Get("script", "http://tempuri.org/nmap"));
                }
                return this.scriptField;
            }
            set {
                if ((value == null)) {
                    this.scriptField = null;
                }
                else {
                    if ((this.scriptField == null)) {
                        this.scriptField = XTypedList<script>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("script", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<script>(this.scriptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("hostscript", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static hostscript Load(string xmlFile) {
            return XTypedServices.Load<hostscript>(xmlFile);
        }
        
        public static hostscript Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<hostscript>(xmlFile);
        }
        
        public static hostscript Parse(string xml) {
            return XTypedServices.Parse<hostscript>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hostscript>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("script", "http://tempuri.org/nmap"), typeof(script));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (script+)
    /// </para>
    /// </summary>
    public partial class prescript : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<script> scriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator prescript(XElement xe) { return XTypedServices.ToXTypedElement<prescript>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prescript() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("script", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public prescript() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public IList<script> script {
            get {
                if ((this.scriptField == null)) {
                    this.scriptField = new XTypedList<script>(this, LinqToXsdTypeManager.Instance, XName.Get("script", "http://tempuri.org/nmap"));
                }
                return this.scriptField;
            }
            set {
                if ((value == null)) {
                    this.scriptField = null;
                }
                else {
                    if ((this.scriptField == null)) {
                        this.scriptField = XTypedList<script>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("script", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<script>(this.scriptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("prescript", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prescript Load(string xmlFile) {
            return XTypedServices.Load<prescript>(xmlFile);
        }
        
        public static prescript Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prescript>(xmlFile);
        }
        
        public static prescript Parse(string xml) {
            return XTypedServices.Parse<prescript>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prescript>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("script", "http://tempuri.org/nmap"), typeof(script));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (script+)
    /// </para>
    /// </summary>
    public partial class postscript : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<script> scriptField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator postscript(XElement xe) { return XTypedServices.ToXTypedElement<postscript>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static postscript() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("script", "http://tempuri.org/nmap")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public postscript() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (script+)
        /// </para>
        /// </summary>
        public IList<script> script {
            get {
                if ((this.scriptField == null)) {
                    this.scriptField = new XTypedList<script>(this, LinqToXsdTypeManager.Instance, XName.Get("script", "http://tempuri.org/nmap"));
                }
                return this.scriptField;
            }
            set {
                if ((value == null)) {
                    this.scriptField = null;
                }
                else {
                    if ((this.scriptField == null)) {
                        this.scriptField = XTypedList<script>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("script", "http://tempuri.org/nmap"));
                    }
                    else {
                        XTypedServices.SetList<script>(this.scriptField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("postscript", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static postscript Load(string xmlFile) {
            return XTypedServices.Load<postscript>(xmlFile);
        }
        
        public static postscript Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<postscript>(xmlFile);
        }
        
        public static postscript Parse(string xml) {
            return XTypedServices.Parse<postscript>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<postscript>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("script", "http://tempuri.org/nmap"), typeof(script));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class cpe : XTypedElement, IXMetaData {
        
         public static explicit operator cpe(XElement xe) { return XTypedServices.ToXTypedElement<cpe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public cpe() {
        }
        
        public cpe(string content) {
            this.TypedValue = content;
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("cpe", "http://tempuri.org/nmap");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static cpe Load(string xmlFile) {
            return XTypedServices.Load<cpe>(xmlFile);
        }
        
        public static cpe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<cpe>(xmlFile);
        }
        
        public static cpe Parse(string xml) {
            return XTypedServices.Parse<cpe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cpe>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("nmaprun", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.nmaprun));
            elementDictionary.Add(XName.Get("scaninfo", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.scaninfo));
            elementDictionary.Add(XName.Get("verbose", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.verbose));
            elementDictionary.Add(XName.Get("debugging", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.debugging));
            elementDictionary.Add(XName.Get("taskbegin", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.taskbegin));
            elementDictionary.Add(XName.Get("taskprogress", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.taskprogress));
            elementDictionary.Add(XName.Get("taskend", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.taskend));
            elementDictionary.Add(XName.Get("host", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.host));
            elementDictionary.Add(XName.Get("status", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.status));
            elementDictionary.Add(XName.Get("address", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.address));
            elementDictionary.Add(XName.Get("hostnames", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.hostnames));
            elementDictionary.Add(XName.Get("hostname", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.hostname));
            elementDictionary.Add(XName.Get("smurf", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.smurf));
            elementDictionary.Add(XName.Get("ports", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.ports));
            elementDictionary.Add(XName.Get("extraports", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.extraports));
            elementDictionary.Add(XName.Get("extrareasons", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.extrareasons));
            elementDictionary.Add(XName.Get("port", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.port));
            elementDictionary.Add(XName.Get("state", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.state));
            elementDictionary.Add(XName.Get("owner", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.owner));
            elementDictionary.Add(XName.Get("service", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.service));
            elementDictionary.Add(XName.Get("script", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.script));
            elementDictionary.Add(XName.Get("os", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.os));
            elementDictionary.Add(XName.Get("portused", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.portused));
            elementDictionary.Add(XName.Get("osclass", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.osclass));
            elementDictionary.Add(XName.Get("osmatch", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.osmatch));
            elementDictionary.Add(XName.Get("osfingerprint", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.osfingerprint));
            elementDictionary.Add(XName.Get("distance", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.distance));
            elementDictionary.Add(XName.Get("uptime", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.uptime));
            elementDictionary.Add(XName.Get("tcpsequence", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.tcpsequence));
            elementDictionary.Add(XName.Get("ipidsequence", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.ipidsequence));
            elementDictionary.Add(XName.Get("tcptssequence", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.tcptssequence));
            elementDictionary.Add(XName.Get("trace", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.trace));
            elementDictionary.Add(XName.Get("hop", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.hop));
            elementDictionary.Add(XName.Get("times", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.times));
            elementDictionary.Add(XName.Get("output", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.output));
            elementDictionary.Add(XName.Get("runstats", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.runstats));
            elementDictionary.Add(XName.Get("finished", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.finished));
            elementDictionary.Add(XName.Get("hosts", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.hosts));
            elementDictionary.Add(XName.Get("hostscript", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.hostscript));
            elementDictionary.Add(XName.Get("prescript", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.prescript));
            elementDictionary.Add(XName.Get("postscript", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.postscript));
            elementDictionary.Add(XName.Get("cpe", "http://tempuri.org/nmap"), typeof(global::tempuri.org.nmap.cpe));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("nmaprun", "http://tempuri.org/nmap")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public nmaprun nmaprun {  get {return rootObject as nmaprun; } }

    public scaninfo scaninfo {  get {return rootObject as scaninfo; } }

    public verbose verbose {  get {return rootObject as verbose; } }

    public debugging debugging {  get {return rootObject as debugging; } }

    public taskbegin taskbegin {  get {return rootObject as taskbegin; } }

    public taskprogress taskprogress {  get {return rootObject as taskprogress; } }

    public taskend taskend {  get {return rootObject as taskend; } }

    public host host {  get {return rootObject as host; } }

    public status status {  get {return rootObject as status; } }

    public address address {  get {return rootObject as address; } }

    public hostnames hostnames {  get {return rootObject as hostnames; } }

    public hostname hostname {  get {return rootObject as hostname; } }

    public smurf smurf {  get {return rootObject as smurf; } }

    public ports ports {  get {return rootObject as ports; } }

    public extraports extraports {  get {return rootObject as extraports; } }

    public extrareasons extrareasons {  get {return rootObject as extrareasons; } }

    public port port {  get {return rootObject as port; } }

    public state state {  get {return rootObject as state; } }

    public owner owner {  get {return rootObject as owner; } }

    public service service {  get {return rootObject as service; } }

    public script script {  get {return rootObject as script; } }

    public os os {  get {return rootObject as os; } }

    public portused portused {  get {return rootObject as portused; } }

    public osclass osclass {  get {return rootObject as osclass; } }

    public osmatch osmatch {  get {return rootObject as osmatch; } }

    public osfingerprint osfingerprint {  get {return rootObject as osfingerprint; } }

    public distance distance {  get {return rootObject as distance; } }

    public uptime uptime {  get {return rootObject as uptime; } }

    public tcpsequence tcpsequence {  get {return rootObject as tcpsequence; } }

    public ipidsequence ipidsequence {  get {return rootObject as ipidsequence; } }

    public tcptssequence tcptssequence {  get {return rootObject as tcptssequence; } }

    public trace trace {  get {return rootObject as trace; } }

    public hop hop {  get {return rootObject as hop; } }

    public times times {  get {return rootObject as times; } }

    public output output {  get {return rootObject as output; } }

    public runstats runstats {  get {return rootObject as runstats; } }

    public finished finished {  get {return rootObject as finished; } }

    public hosts hosts {  get {return rootObject as hosts; } }

    public hostscript hostscript {  get {return rootObject as hostscript; } }

    public prescript prescript {  get {return rootObject as prescript; } }

    public postscript postscript {  get {return rootObject as postscript; } }

    public cpe cpe {  get {return rootObject as cpe; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(nmaprun root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(scaninfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(verbose root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(debugging root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(taskbegin root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(taskprogress root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(taskend root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(host root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(status root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(address root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hostnames root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hostname root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(smurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ports root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(extraports root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(extrareasons root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(port root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(state root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(owner root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(service root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(script root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(os root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(portused root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(osclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(osmatch root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(osfingerprint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(distance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(uptime root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tcpsequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ipidsequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tcptssequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(trace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hop root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(times root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(output root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(runstats root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(finished root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hosts root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(hostscript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prescript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(postscript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(cpe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::tempuri.org.nmap.nmaprun nmaprun {  get {return rootObject as global::tempuri.org.nmap.nmaprun; } }

    public global::tempuri.org.nmap.scaninfo scaninfo {  get {return rootObject as global::tempuri.org.nmap.scaninfo; } }

    public global::tempuri.org.nmap.verbose verbose {  get {return rootObject as global::tempuri.org.nmap.verbose; } }

    public global::tempuri.org.nmap.debugging debugging {  get {return rootObject as global::tempuri.org.nmap.debugging; } }

    public global::tempuri.org.nmap.taskbegin taskbegin {  get {return rootObject as global::tempuri.org.nmap.taskbegin; } }

    public global::tempuri.org.nmap.taskprogress taskprogress {  get {return rootObject as global::tempuri.org.nmap.taskprogress; } }

    public global::tempuri.org.nmap.taskend taskend {  get {return rootObject as global::tempuri.org.nmap.taskend; } }

    public global::tempuri.org.nmap.host host {  get {return rootObject as global::tempuri.org.nmap.host; } }

    public global::tempuri.org.nmap.status status {  get {return rootObject as global::tempuri.org.nmap.status; } }

    public global::tempuri.org.nmap.address address {  get {return rootObject as global::tempuri.org.nmap.address; } }

    public global::tempuri.org.nmap.hostnames hostnames {  get {return rootObject as global::tempuri.org.nmap.hostnames; } }

    public global::tempuri.org.nmap.hostname hostname {  get {return rootObject as global::tempuri.org.nmap.hostname; } }

    public global::tempuri.org.nmap.smurf smurf {  get {return rootObject as global::tempuri.org.nmap.smurf; } }

    public global::tempuri.org.nmap.ports ports {  get {return rootObject as global::tempuri.org.nmap.ports; } }

    public global::tempuri.org.nmap.extraports extraports {  get {return rootObject as global::tempuri.org.nmap.extraports; } }

    public global::tempuri.org.nmap.extrareasons extrareasons {  get {return rootObject as global::tempuri.org.nmap.extrareasons; } }

    public global::tempuri.org.nmap.port port {  get {return rootObject as global::tempuri.org.nmap.port; } }

    public global::tempuri.org.nmap.state state {  get {return rootObject as global::tempuri.org.nmap.state; } }

    public global::tempuri.org.nmap.owner owner {  get {return rootObject as global::tempuri.org.nmap.owner; } }

    public global::tempuri.org.nmap.service service {  get {return rootObject as global::tempuri.org.nmap.service; } }

    public global::tempuri.org.nmap.script script {  get {return rootObject as global::tempuri.org.nmap.script; } }

    public global::tempuri.org.nmap.os os {  get {return rootObject as global::tempuri.org.nmap.os; } }

    public global::tempuri.org.nmap.portused portused {  get {return rootObject as global::tempuri.org.nmap.portused; } }

    public global::tempuri.org.nmap.osclass osclass {  get {return rootObject as global::tempuri.org.nmap.osclass; } }

    public global::tempuri.org.nmap.osmatch osmatch {  get {return rootObject as global::tempuri.org.nmap.osmatch; } }

    public global::tempuri.org.nmap.osfingerprint osfingerprint {  get {return rootObject as global::tempuri.org.nmap.osfingerprint; } }

    public global::tempuri.org.nmap.distance distance {  get {return rootObject as global::tempuri.org.nmap.distance; } }

    public global::tempuri.org.nmap.uptime uptime {  get {return rootObject as global::tempuri.org.nmap.uptime; } }

    public global::tempuri.org.nmap.tcpsequence tcpsequence {  get {return rootObject as global::tempuri.org.nmap.tcpsequence; } }

    public global::tempuri.org.nmap.ipidsequence ipidsequence {  get {return rootObject as global::tempuri.org.nmap.ipidsequence; } }

    public global::tempuri.org.nmap.tcptssequence tcptssequence {  get {return rootObject as global::tempuri.org.nmap.tcptssequence; } }

    public global::tempuri.org.nmap.trace trace {  get {return rootObject as global::tempuri.org.nmap.trace; } }

    public global::tempuri.org.nmap.hop hop {  get {return rootObject as global::tempuri.org.nmap.hop; } }

    public global::tempuri.org.nmap.times times {  get {return rootObject as global::tempuri.org.nmap.times; } }

    public global::tempuri.org.nmap.output output {  get {return rootObject as global::tempuri.org.nmap.output; } }

    public global::tempuri.org.nmap.runstats runstats {  get {return rootObject as global::tempuri.org.nmap.runstats; } }

    public global::tempuri.org.nmap.finished finished {  get {return rootObject as global::tempuri.org.nmap.finished; } }

    public global::tempuri.org.nmap.hosts hosts {  get {return rootObject as global::tempuri.org.nmap.hosts; } }

    public global::tempuri.org.nmap.hostscript hostscript {  get {return rootObject as global::tempuri.org.nmap.hostscript; } }

    public global::tempuri.org.nmap.prescript prescript {  get {return rootObject as global::tempuri.org.nmap.prescript; } }

    public global::tempuri.org.nmap.postscript postscript {  get {return rootObject as global::tempuri.org.nmap.postscript; } }

    public global::tempuri.org.nmap.cpe cpe {  get {return rootObject as global::tempuri.org.nmap.cpe; } }
        
        private XRoot() {
        }
        
        public XRoot(global::tempuri.org.nmap.nmaprun root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.scaninfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.verbose root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.debugging root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.taskbegin root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.taskprogress root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.taskend root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.host root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.status root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.address root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.hostnames root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.hostname root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.smurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.ports root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.extraports root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.extrareasons root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.port root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.state root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.owner root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.service root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.script root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.os root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.portused root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.osclass root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.osmatch root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.osfingerprint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.distance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.uptime root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.tcpsequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.ipidsequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.tcptssequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.trace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.hop root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.times root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.output root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.runstats root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.finished root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.hosts root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.hostscript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.prescript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.postscript root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::tempuri.org.nmap.cpe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}

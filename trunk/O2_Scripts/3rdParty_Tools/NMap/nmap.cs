//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;



/// <summary>
/// <para>
/// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
/// </para>
/// </summary>
public partial class nmaprun : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<scaninfoLocalType> scaninfoField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<verboseLocalType> verboseField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<debuggingLocalType> debuggingField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<outputLocalType> outputField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<hostLocalType> hostField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<runstatsLocalType> runstatsField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private static ContentModelEntity contentModel;
    
         public static explicit operator nmaprun(XElement xe) { return XTypedServices.ToXTypedElement<nmaprun>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static nmaprun() {
        BuildElementDictionary();
        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("scaninfo", "")), new NamedContentModelEntity(XName.Get("verbose", "")), new NamedContentModelEntity(XName.Get("debugging", "")), new NamedContentModelEntity(XName.Get("output", "")), new NamedContentModelEntity(XName.Get("host", "")), new NamedContentModelEntity(XName.Get("runstats", "")));
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public nmaprun() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.scaninfoLocalType> scaninfo {
        get {
            if ((this.scaninfoField == null)) {
                this.scaninfoField = new XTypedList<scaninfoLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("scaninfo", ""));
            }
            return this.scaninfoField;
        }
        set {
            if ((value == null)) {
                this.scaninfoField = null;
            }
            else {
                if ((this.scaninfoField == null)) {
                    this.scaninfoField = XTypedList<scaninfoLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("scaninfo", ""));
                }
                else {
                    XTypedServices.SetList<scaninfoLocalType>(this.scaninfoField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.verboseLocalType> verbose {
        get {
            if ((this.verboseField == null)) {
                this.verboseField = new XTypedList<verboseLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("verbose", ""));
            }
            return this.verboseField;
        }
        set {
            if ((value == null)) {
                this.verboseField = null;
            }
            else {
                if ((this.verboseField == null)) {
                    this.verboseField = XTypedList<verboseLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("verbose", ""));
                }
                else {
                    XTypedServices.SetList<verboseLocalType>(this.verboseField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.debuggingLocalType> debugging {
        get {
            if ((this.debuggingField == null)) {
                this.debuggingField = new XTypedList<debuggingLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("debugging", ""));
            }
            return this.debuggingField;
        }
        set {
            if ((value == null)) {
                this.debuggingField = null;
            }
            else {
                if ((this.debuggingField == null)) {
                    this.debuggingField = XTypedList<debuggingLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("debugging", ""));
                }
                else {
                    XTypedServices.SetList<debuggingLocalType>(this.debuggingField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.outputLocalType> output {
        get {
            if ((this.outputField == null)) {
                this.outputField = new XTypedList<outputLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("output", ""));
            }
            return this.outputField;
        }
        set {
            if ((value == null)) {
                this.outputField = null;
            }
            else {
                if ((this.outputField == null)) {
                    this.outputField = XTypedList<outputLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("output", ""));
                }
                else {
                    XTypedServices.SetList<outputLocalType>(this.outputField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.hostLocalType> host {
        get {
            if ((this.hostField == null)) {
                this.hostField = new XTypedList<hostLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("host", ""));
            }
            return this.hostField;
        }
        set {
            if ((value == null)) {
                this.hostField = null;
            }
            else {
                if ((this.hostField == null)) {
                    this.hostField = XTypedList<hostLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("host", ""));
                }
                else {
                    XTypedServices.SetList<hostLocalType>(this.hostField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional, repeating
    /// </para>
    /// <para>
    /// Regular expression: (scaninfo*, verbose*, debugging*, output*, host*, runstats*)
    /// </para>
    /// </summary>
    public IList<nmaprun.runstatsLocalType> runstats {
        get {
            if ((this.runstatsField == null)) {
                this.runstatsField = new XTypedList<runstatsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("runstats", ""));
            }
            return this.runstatsField;
        }
        set {
            if ((value == null)) {
                this.runstatsField = null;
            }
            else {
                if ((this.runstatsField == null)) {
                    this.runstatsField = XTypedList<runstatsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("runstats", ""));
                }
                else {
                    XTypedServices.SetList<runstatsLocalType>(this.runstatsField, value);
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string start {
        get {
            XAttribute x = this.Attribute(XName.Get("start", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("start", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string profile_name {
        get {
            XAttribute x = this.Attribute(XName.Get("profile_name", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("profile_name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string xmloutputversion {
        get {
            XAttribute x = this.Attribute(XName.Get("xmloutputversion", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("xmloutputversion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string scanner {
        get {
            XAttribute x = this.Attribute(XName.Get("scanner", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("scanner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string version {
        get {
            XAttribute x = this.Attribute(XName.Get("version", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string startstr {
        get {
            XAttribute x = this.Attribute(XName.Get("startstr", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("startstr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: optional
    /// </para>
    /// </summary>
    public string args {
        get {
            XAttribute x = this.Attribute(XName.Get("args", ""));
            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
        set {
            this.SetAttribute(XName.Get("args", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("nmaprun", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static nmaprun Load(string xmlFile) {
        return XTypedServices.Load<nmaprun>(xmlFile);
    }
    
    public static nmaprun Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<nmaprun>(xmlFile);
    }
    
    public static nmaprun Parse(string xml) {
        return XTypedServices.Parse<nmaprun>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<nmaprun>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("scaninfo", ""), typeof(scaninfoLocalType));
        localElementDictionary.Add(XName.Get("verbose", ""), typeof(verboseLocalType));
        localElementDictionary.Add(XName.Get("debugging", ""), typeof(debuggingLocalType));
        localElementDictionary.Add(XName.Get("output", ""), typeof(outputLocalType));
        localElementDictionary.Add(XName.Get("host", ""), typeof(hostLocalType));
        localElementDictionary.Add(XName.Get("runstats", ""), typeof(runstatsLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return contentModel;
    }
    
    public partial class scaninfoLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator scaninfoLocalType(XElement xe) { return XTypedServices.ToXTypedElement<scaninfoLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public scaninfoLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string services {
            get {
                XAttribute x = this.Attribute(XName.Get("services", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("services", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string protocol {
            get {
                XAttribute x = this.Attribute(XName.Get("protocol", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("protocol", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string numservices {
            get {
                XAttribute x = this.Attribute(XName.Get("numservices", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("numservices", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("scaninfo", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<scaninfoLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class verboseLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator verboseLocalType(XElement xe) { return XTypedServices.ToXTypedElement<verboseLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public verboseLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string level {
            get {
                XAttribute x = this.Attribute(XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("verbose", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<verboseLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class debuggingLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator debuggingLocalType(XElement xe) { return XTypedServices.ToXTypedElement<debuggingLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public debuggingLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string level {
            get {
                XAttribute x = this.Attribute(XName.Get("level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("debugging", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<debuggingLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class outputLocalType : XTypedElement, IXMetaData {
        
         public static explicit operator outputLocalType(XElement xe) { return XTypedServices.ToXTypedElement<outputLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public outputLocalType() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("output", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<outputLocalType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
    /// </para>
    /// </summary>
    public partial class hostLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<statusLocalType> statusField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<addressLocalType> addressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hostnamesLocalType> hostnamesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<portsLocalType> portsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<osLocalType> osField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<uptimeLocalType> uptimeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tcpsequenceLocalType> tcpsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ipidsequenceLocalType> ipidsequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<tcptssequenceLocalType> tcptssequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<traceLocalType> traceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator hostLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hostLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static hostLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("status", "")), new NamedContentModelEntity(XName.Get("address", "")), new NamedContentModelEntity(XName.Get("hostnames", "")), new NamedContentModelEntity(XName.Get("ports", "")), new NamedContentModelEntity(XName.Get("os", "")), new NamedContentModelEntity(XName.Get("uptime", "")), new NamedContentModelEntity(XName.Get("tcpsequence", "")), new NamedContentModelEntity(XName.Get("ipidsequence", "")), new NamedContentModelEntity(XName.Get("tcptssequence", "")), new NamedContentModelEntity(XName.Get("trace", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public hostLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.statusLocalType> status {
            get {
                if ((this.statusField == null)) {
                    this.statusField = new XTypedList<statusLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("status", ""));
                }
                return this.statusField;
            }
            set {
                if ((value == null)) {
                    this.statusField = null;
                }
                else {
                    if ((this.statusField == null)) {
                        this.statusField = XTypedList<statusLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("status", ""));
                    }
                    else {
                        XTypedServices.SetList<statusLocalType>(this.statusField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.addressLocalType> address {
            get {
                if ((this.addressField == null)) {
                    this.addressField = new XTypedList<addressLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("address", ""));
                }
                return this.addressField;
            }
            set {
                if ((value == null)) {
                    this.addressField = null;
                }
                else {
                    if ((this.addressField == null)) {
                        this.addressField = XTypedList<addressLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("address", ""));
                    }
                    else {
                        XTypedServices.SetList<addressLocalType>(this.addressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.hostnamesLocalType> hostnames {
            get {
                if ((this.hostnamesField == null)) {
                    this.hostnamesField = new XTypedList<hostnamesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("hostnames", ""));
                }
                return this.hostnamesField;
            }
            set {
                if ((value == null)) {
                    this.hostnamesField = null;
                }
                else {
                    if ((this.hostnamesField == null)) {
                        this.hostnamesField = XTypedList<hostnamesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hostnames", ""));
                    }
                    else {
                        XTypedServices.SetList<hostnamesLocalType>(this.hostnamesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.portsLocalType> ports {
            get {
                if ((this.portsField == null)) {
                    this.portsField = new XTypedList<portsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ports", ""));
                }
                return this.portsField;
            }
            set {
                if ((value == null)) {
                    this.portsField = null;
                }
                else {
                    if ((this.portsField == null)) {
                        this.portsField = XTypedList<portsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ports", ""));
                    }
                    else {
                        XTypedServices.SetList<portsLocalType>(this.portsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.osLocalType> os {
            get {
                if ((this.osField == null)) {
                    this.osField = new XTypedList<osLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("os", ""));
                }
                return this.osField;
            }
            set {
                if ((value == null)) {
                    this.osField = null;
                }
                else {
                    if ((this.osField == null)) {
                        this.osField = XTypedList<osLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("os", ""));
                    }
                    else {
                        XTypedServices.SetList<osLocalType>(this.osField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.uptimeLocalType> uptime {
            get {
                if ((this.uptimeField == null)) {
                    this.uptimeField = new XTypedList<uptimeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("uptime", ""));
                }
                return this.uptimeField;
            }
            set {
                if ((value == null)) {
                    this.uptimeField = null;
                }
                else {
                    if ((this.uptimeField == null)) {
                        this.uptimeField = XTypedList<uptimeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("uptime", ""));
                    }
                    else {
                        XTypedServices.SetList<uptimeLocalType>(this.uptimeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.tcpsequenceLocalType> tcpsequence {
            get {
                if ((this.tcpsequenceField == null)) {
                    this.tcpsequenceField = new XTypedList<tcpsequenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("tcpsequence", ""));
                }
                return this.tcpsequenceField;
            }
            set {
                if ((value == null)) {
                    this.tcpsequenceField = null;
                }
                else {
                    if ((this.tcpsequenceField == null)) {
                        this.tcpsequenceField = XTypedList<tcpsequenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tcpsequence", ""));
                    }
                    else {
                        XTypedServices.SetList<tcpsequenceLocalType>(this.tcpsequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.ipidsequenceLocalType> ipidsequence {
            get {
                if ((this.ipidsequenceField == null)) {
                    this.ipidsequenceField = new XTypedList<ipidsequenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ipidsequence", ""));
                }
                return this.ipidsequenceField;
            }
            set {
                if ((value == null)) {
                    this.ipidsequenceField = null;
                }
                else {
                    if ((this.ipidsequenceField == null)) {
                        this.ipidsequenceField = XTypedList<ipidsequenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ipidsequence", ""));
                    }
                    else {
                        XTypedServices.SetList<ipidsequenceLocalType>(this.ipidsequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.tcptssequenceLocalType> tcptssequence {
            get {
                if ((this.tcptssequenceField == null)) {
                    this.tcptssequenceField = new XTypedList<tcptssequenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("tcptssequence", ""));
                }
                return this.tcptssequenceField;
            }
            set {
                if ((value == null)) {
                    this.tcptssequenceField = null;
                }
                else {
                    if ((this.tcptssequenceField == null)) {
                        this.tcptssequenceField = XTypedList<tcptssequenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("tcptssequence", ""));
                    }
                    else {
                        XTypedServices.SetList<tcptssequenceLocalType>(this.tcptssequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (status*, address*, hostnames*, ports*, os*, uptime*, tcpsequence*, ipidsequence*, tcptssequence*, trace*)
        /// </para>
        /// </summary>
        public IList<nmaprun.hostLocalType.traceLocalType> trace {
            get {
                if ((this.traceField == null)) {
                    this.traceField = new XTypedList<traceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("trace", ""));
                }
                return this.traceField;
            }
            set {
                if ((value == null)) {
                    this.traceField = null;
                }
                else {
                    if ((this.traceField == null)) {
                        this.traceField = XTypedList<traceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("trace", ""));
                    }
                    else {
                        XTypedServices.SetList<traceLocalType>(this.traceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string comment {
            get {
                XAttribute x = this.Attribute(XName.Get("comment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("comment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("host", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<hostLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("status", ""), typeof(statusLocalType));
            localElementDictionary.Add(XName.Get("address", ""), typeof(addressLocalType));
            localElementDictionary.Add(XName.Get("hostnames", ""), typeof(hostnamesLocalType));
            localElementDictionary.Add(XName.Get("ports", ""), typeof(portsLocalType));
            localElementDictionary.Add(XName.Get("os", ""), typeof(osLocalType));
            localElementDictionary.Add(XName.Get("uptime", ""), typeof(uptimeLocalType));
            localElementDictionary.Add(XName.Get("tcpsequence", ""), typeof(tcpsequenceLocalType));
            localElementDictionary.Add(XName.Get("ipidsequence", ""), typeof(ipidsequenceLocalType));
            localElementDictionary.Add(XName.Get("tcptssequence", ""), typeof(tcptssequenceLocalType));
            localElementDictionary.Add(XName.Get("trace", ""), typeof(traceLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class statusLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator statusLocalType(XElement xe) { return XTypedServices.ToXTypedElement<statusLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public statusLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string state {
                get {
                    XAttribute x = this.Attribute(XName.Get("state", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("status", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<statusLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class addressLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator addressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<addressLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public addressLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string addrtype {
                get {
                    XAttribute x = this.Attribute(XName.Get("addrtype", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("addrtype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string vendor {
                get {
                    XAttribute x = this.Attribute(XName.Get("vendor", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("vendor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string addr {
                get {
                    XAttribute x = this.Attribute(XName.Get("addr", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("addr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("address", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<addressLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hostname*)
        /// </para>
        /// </summary>
        public partial class hostnamesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<hostnameLocalType> hostnameField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator hostnamesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hostnamesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static hostnamesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("hostname", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (hostname*)
            /// </para>
            /// </summary>
            public hostnamesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (hostname*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.hostnamesLocalType.hostnameLocalType> hostname {
                get {
                    if ((this.hostnameField == null)) {
                        this.hostnameField = new XTypedList<hostnameLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("hostname", ""));
                    }
                    return this.hostnameField;
                }
                set {
                    if ((value == null)) {
                        this.hostnameField = null;
                    }
                    else {
                        if ((this.hostnameField == null)) {
                            this.hostnameField = XTypedList<hostnameLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hostname", ""));
                        }
                        else {
                            XTypedServices.SetList<hostnameLocalType>(this.hostnameField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("hostnames", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<hostnamesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("hostname", ""), typeof(hostnameLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class hostnameLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator hostnameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hostnameLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public hostnameLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XAttribute x = this.Attribute(XName.Get("type", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("hostname", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<hostnameLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (extraports*, port*)
        /// </para>
        /// </summary>
        public partial class portsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<extraportsLocalType> extraportsField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<portLocalType> portField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator portsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<portsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static portsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("extraports", "")), new NamedContentModelEntity(XName.Get("port", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (extraports*, port*)
            /// </para>
            /// </summary>
            public portsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (extraports*, port*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.portsLocalType.extraportsLocalType> extraports {
                get {
                    if ((this.extraportsField == null)) {
                        this.extraportsField = new XTypedList<extraportsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("extraports", ""));
                    }
                    return this.extraportsField;
                }
                set {
                    if ((value == null)) {
                        this.extraportsField = null;
                    }
                    else {
                        if ((this.extraportsField == null)) {
                            this.extraportsField = XTypedList<extraportsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("extraports", ""));
                        }
                        else {
                            XTypedServices.SetList<extraportsLocalType>(this.extraportsField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (extraports*, port*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.portsLocalType.portLocalType> port {
                get {
                    if ((this.portField == null)) {
                        this.portField = new XTypedList<portLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("port", ""));
                    }
                    return this.portField;
                }
                set {
                    if ((value == null)) {
                        this.portField = null;
                    }
                    else {
                        if ((this.portField == null)) {
                            this.portField = XTypedList<portLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("port", ""));
                        }
                        else {
                            XTypedServices.SetList<portLocalType>(this.portField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ports", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<portsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("extraports", ""), typeof(extraportsLocalType));
                localElementDictionary.Add(XName.Get("port", ""), typeof(portLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class extraportsLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator extraportsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<extraportsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public extraportsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string count {
                    get {
                        XAttribute x = this.Attribute(XName.Get("count", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string state {
                    get {
                        XAttribute x = this.Attribute(XName.Get("state", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("extraports", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<extraportsLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (state*, service*)
            /// </para>
            /// </summary>
            public partial class portLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<stateLocalType> stateField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<serviceLocalType> serviceField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator portLocalType(XElement xe) { return XTypedServices.ToXTypedElement<portLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static portLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("state", "")), new NamedContentModelEntity(XName.Get("service", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (state*, service*)
                /// </para>
                /// </summary>
                public portLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (state*, service*)
                /// </para>
                /// </summary>
                public IList<nmaprun.hostLocalType.portsLocalType.portLocalType.stateLocalType> state {
                    get {
                        if ((this.stateField == null)) {
                            this.stateField = new XTypedList<stateLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("state", ""));
                        }
                        return this.stateField;
                    }
                    set {
                        if ((value == null)) {
                            this.stateField = null;
                        }
                        else {
                            if ((this.stateField == null)) {
                                this.stateField = XTypedList<stateLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("state", ""));
                            }
                            else {
                                XTypedServices.SetList<stateLocalType>(this.stateField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (state*, service*)
                /// </para>
                /// </summary>
                public IList<nmaprun.hostLocalType.portsLocalType.portLocalType.serviceLocalType> service {
                    get {
                        if ((this.serviceField == null)) {
                            this.serviceField = new XTypedList<serviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("service", ""));
                        }
                        return this.serviceField;
                    }
                    set {
                        if ((value == null)) {
                            this.serviceField = null;
                        }
                        else {
                            if ((this.serviceField == null)) {
                                this.serviceField = XTypedList<serviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("service", ""));
                            }
                            else {
                                XTypedServices.SetList<serviceLocalType>(this.serviceField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string protocol {
                    get {
                        XAttribute x = this.Attribute(XName.Get("protocol", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("protocol", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string portid {
                    get {
                        XAttribute x = this.Attribute(XName.Get("portid", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("portid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("port", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<portLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("state", ""), typeof(stateLocalType));
                    localElementDictionary.Add(XName.Get("service", ""), typeof(serviceLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                public partial class stateLocalType : XTypedElement, IXMetaData {
                    
         public static explicit operator stateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<stateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    public stateLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string reason {
                        get {
                            XAttribute x = this.Attribute(XName.Get("reason", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("reason", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string state {
                        get {
                            XAttribute x = this.Attribute(XName.Get("state", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string reason_ttl {
                        get {
                            XAttribute x = this.Attribute(XName.Get("reason_ttl", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("reason_ttl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("state", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<stateLocalType>(this);
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                }
                
                public partial class serviceLocalType : XTypedElement, IXMetaData {
                    
         public static explicit operator serviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<serviceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    public serviceLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string method {
                        get {
                            XAttribute x = this.Attribute(XName.Get("method", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("method", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string conf {
                        get {
                            XAttribute x = this.Attribute(XName.Get("conf", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("conf", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string name {
                        get {
                            XAttribute x = this.Attribute(XName.Get("name", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("service", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<serviceLocalType>(this);
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (portused*, osclass*, osmatch*)
        /// </para>
        /// </summary>
        public partial class osLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<portusedLocalType> portusedField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<osclassLocalType> osclassField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<osmatchLocalType> osmatchField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator osLocalType(XElement xe) { return XTypedServices.ToXTypedElement<osLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static osLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("portused", "")), new NamedContentModelEntity(XName.Get("osclass", "")), new NamedContentModelEntity(XName.Get("osmatch", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (portused*, osclass*, osmatch*)
            /// </para>
            /// </summary>
            public osLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (portused*, osclass*, osmatch*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.osLocalType.portusedLocalType> portused {
                get {
                    if ((this.portusedField == null)) {
                        this.portusedField = new XTypedList<portusedLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("portused", ""));
                    }
                    return this.portusedField;
                }
                set {
                    if ((value == null)) {
                        this.portusedField = null;
                    }
                    else {
                        if ((this.portusedField == null)) {
                            this.portusedField = XTypedList<portusedLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("portused", ""));
                        }
                        else {
                            XTypedServices.SetList<portusedLocalType>(this.portusedField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (portused*, osclass*, osmatch*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.osLocalType.osclassLocalType> osclass {
                get {
                    if ((this.osclassField == null)) {
                        this.osclassField = new XTypedList<osclassLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("osclass", ""));
                    }
                    return this.osclassField;
                }
                set {
                    if ((value == null)) {
                        this.osclassField = null;
                    }
                    else {
                        if ((this.osclassField == null)) {
                            this.osclassField = XTypedList<osclassLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("osclass", ""));
                        }
                        else {
                            XTypedServices.SetList<osclassLocalType>(this.osclassField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (portused*, osclass*, osmatch*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.osLocalType.osmatchLocalType> osmatch {
                get {
                    if ((this.osmatchField == null)) {
                        this.osmatchField = new XTypedList<osmatchLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("osmatch", ""));
                    }
                    return this.osmatchField;
                }
                set {
                    if ((value == null)) {
                        this.osmatchField = null;
                    }
                    else {
                        if ((this.osmatchField == null)) {
                            this.osmatchField = XTypedList<osmatchLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("osmatch", ""));
                        }
                        else {
                            XTypedServices.SetList<osmatchLocalType>(this.osmatchField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("os", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<osLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("portused", ""), typeof(portusedLocalType));
                localElementDictionary.Add(XName.Get("osclass", ""), typeof(osclassLocalType));
                localElementDictionary.Add(XName.Get("osmatch", ""), typeof(osmatchLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class portusedLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator portusedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<portusedLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public portusedLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string state {
                    get {
                        XAttribute x = this.Attribute(XName.Get("state", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("state", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string portid {
                    get {
                        XAttribute x = this.Attribute(XName.Get("portid", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("portid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string proto {
                    get {
                        XAttribute x = this.Attribute(XName.Get("proto", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("proto", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("portused", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<portusedLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class osclassLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator osclassLocalType(XElement xe) { return XTypedServices.ToXTypedElement<osclassLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public osclassLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string type {
                    get {
                        XAttribute x = this.Attribute(XName.Get("type", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string osfamily {
                    get {
                        XAttribute x = this.Attribute(XName.Get("osfamily", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("osfamily", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string vendor {
                    get {
                        XAttribute x = this.Attribute(XName.Get("vendor", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("vendor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string osgen {
                    get {
                        XAttribute x = this.Attribute(XName.Get("osgen", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("osgen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string accuracy {
                    get {
                        XAttribute x = this.Attribute(XName.Get("accuracy", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("accuracy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("osclass", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<osclassLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class osmatchLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator osmatchLocalType(XElement xe) { return XTypedServices.ToXTypedElement<osmatchLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public osmatchLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string line {
                    get {
                        XAttribute x = this.Attribute(XName.Get("line", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("line", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string accuracy {
                    get {
                        XAttribute x = this.Attribute(XName.Get("accuracy", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("accuracy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("osmatch", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<osmatchLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        public partial class uptimeLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator uptimeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<uptimeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public uptimeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string lastboot {
                get {
                    XAttribute x = this.Attribute(XName.Get("lastboot", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("lastboot", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string seconds {
                get {
                    XAttribute x = this.Attribute(XName.Get("seconds", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("seconds", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("uptime", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<uptimeLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class tcpsequenceLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator tcpsequenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<tcpsequenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public tcpsequenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string index {
                get {
                    XAttribute x = this.Attribute(XName.Get("index", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string values {
                get {
                    XAttribute x = this.Attribute(XName.Get("values", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string difficulty {
                get {
                    XAttribute x = this.Attribute(XName.Get("difficulty", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("difficulty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("tcpsequence", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<tcpsequenceLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class ipidsequenceLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator ipidsequenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ipidsequenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public ipidsequenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string values {
                get {
                    XAttribute x = this.Attribute(XName.Get("values", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string @class {
                get {
                    XAttribute x = this.Attribute(XName.Get("class", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ipidsequence", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ipidsequenceLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class tcptssequenceLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator tcptssequenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<tcptssequenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public tcptssequenceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string values {
                get {
                    XAttribute x = this.Attribute(XName.Get("values", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("values", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string @class {
                get {
                    XAttribute x = this.Attribute(XName.Get("class", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("tcptssequence", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<tcptssequenceLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (hop*)
        /// </para>
        /// </summary>
        public partial class traceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<hopLocalType> hopField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator traceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<traceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static traceLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("hop", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (hop*)
            /// </para>
            /// </summary>
            public traceLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (hop*)
            /// </para>
            /// </summary>
            public IList<nmaprun.hostLocalType.traceLocalType.hopLocalType> hop {
                get {
                    if ((this.hopField == null)) {
                        this.hopField = new XTypedList<hopLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("hop", ""));
                    }
                    return this.hopField;
                }
                set {
                    if ((value == null)) {
                        this.hopField = null;
                    }
                    else {
                        if ((this.hopField == null)) {
                            this.hopField = XTypedList<hopLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hop", ""));
                        }
                        else {
                            XTypedServices.SetList<hopLocalType>(this.hopField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string port {
                get {
                    XAttribute x = this.Attribute(XName.Get("port", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("port", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string proto {
                get {
                    XAttribute x = this.Attribute(XName.Get("proto", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("proto", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("trace", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<traceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("hop", ""), typeof(hopLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class hopLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator hopLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hopLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public hopLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string rtt {
                    get {
                        XAttribute x = this.Attribute(XName.Get("rtt", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("rtt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string host {
                    get {
                        XAttribute x = this.Attribute(XName.Get("host", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("host", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ipaddr {
                    get {
                        XAttribute x = this.Attribute(XName.Get("ipaddr", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("ipaddr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ttl {
                    get {
                        XAttribute x = this.Attribute(XName.Get("ttl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("ttl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("hop", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<hopLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (finished*, hosts*)
    /// </para>
    /// </summary>
    public partial class runstatsLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<finishedLocalType> finishedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<hostsLocalType> hostsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator runstatsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<runstatsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static runstatsLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("finished", "")), new NamedContentModelEntity(XName.Get("hosts", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (finished*, hosts*)
        /// </para>
        /// </summary>
        public runstatsLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (finished*, hosts*)
        /// </para>
        /// </summary>
        public IList<nmaprun.runstatsLocalType.finishedLocalType> finished {
            get {
                if ((this.finishedField == null)) {
                    this.finishedField = new XTypedList<finishedLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("finished", ""));
                }
                return this.finishedField;
            }
            set {
                if ((value == null)) {
                    this.finishedField = null;
                }
                else {
                    if ((this.finishedField == null)) {
                        this.finishedField = XTypedList<finishedLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("finished", ""));
                    }
                    else {
                        XTypedServices.SetList<finishedLocalType>(this.finishedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (finished*, hosts*)
        /// </para>
        /// </summary>
        public IList<nmaprun.runstatsLocalType.hostsLocalType> hosts {
            get {
                if ((this.hostsField == null)) {
                    this.hostsField = new XTypedList<hostsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("hosts", ""));
                }
                return this.hostsField;
            }
            set {
                if ((value == null)) {
                    this.hostsField = null;
                }
                else {
                    if ((this.hostsField == null)) {
                        this.hostsField = XTypedList<hostsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("hosts", ""));
                    }
                    else {
                        XTypedServices.SetList<hostsLocalType>(this.hostsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("runstats", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<runstatsLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("finished", ""), typeof(finishedLocalType));
            localElementDictionary.Add(XName.Get("hosts", ""), typeof(hostsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class finishedLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator finishedLocalType(XElement xe) { return XTypedServices.ToXTypedElement<finishedLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public finishedLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string timestr {
                get {
                    XAttribute x = this.Attribute(XName.Get("timestr", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("timestr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string time {
                get {
                    XAttribute x = this.Attribute(XName.Get("time", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("finished", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<finishedLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class hostsLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator hostsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<hostsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public hostsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string down {
                get {
                    XAttribute x = this.Attribute(XName.Get("down", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("down", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string total {
                get {
                    XAttribute x = this.Attribute(XName.Get("total", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("total", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string up {
                get {
                    XAttribute x = this.Attribute(XName.Get("up", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("up", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("hosts", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<hostsLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
}

/// <summary>
/// <para>
/// Regular expression: (nmaprun)*
/// </para>
/// </summary>
public partial class NewDataSet : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<nmaprun> nmaprunField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator NewDataSet(XElement xe) { return XTypedServices.ToXTypedElement<NewDataSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static NewDataSet() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (nmaprun)*
    /// </para>
    /// </summary>
    public NewDataSet() {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (nmaprun)*
    /// </para>
    /// </summary>
    public IList<nmaprun> nmaprun {
        get {
            if ((this.nmaprunField == null)) {
                this.nmaprunField = new XTypedList<nmaprun>(this, LinqToXsdTypeManager.Instance, XName.Get("nmaprun", ""));
            }
            return this.nmaprunField;
        }
        set {
            if ((value == null)) {
                this.nmaprunField = null;
            }
            else {
                if ((this.nmaprunField == null)) {
                    this.nmaprunField = XTypedList<nmaprun>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("nmaprun", ""));
                }
                else {
                    XTypedServices.SetList<nmaprun>(this.nmaprunField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("NewDataSet", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static NewDataSet Load(string xmlFile) {
        return XTypedServices.Load<NewDataSet>(xmlFile);
    }
    
    public static NewDataSet Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<NewDataSet>(xmlFile);
    }
    
    public static NewDataSet Parse(string xml) {
        return XTypedServices.Parse<NewDataSet>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<NewDataSet>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("nmaprun", ""), typeof(nmaprun));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return XTypedServices.EmptyDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("nmaprun", ""), typeof(global::nmaprun));
        elementDictionary.Add(XName.Get("NewDataSet", ""), typeof(global::NewDataSet));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("nmaprun", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public nmaprun nmaprun {  get {return rootObject as nmaprun; } }

    public NewDataSet NewDataSet {  get {return rootObject as NewDataSet; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(nmaprun root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRootNamespace(NewDataSet root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public nmaprun nmaprun {  get {return rootObject as nmaprun; } }

    public NewDataSet NewDataSet {  get {return rootObject as NewDataSet; } }
    
    private XRoot() {
    }
    
    public XRoot(nmaprun root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XRoot(NewDataSet root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
using System;
using System.Reflection;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Drawing;
using System.Windows.Forms;
using O2.Kernel;
using O2.Kernel.CodeUtils;
using O2.Kernel.ExtensionMethods;
using O2.Interfaces.O2Core;
using O2.External.WinFormsUI.Forms;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;
using O2.DotNetWrappers.ExtensionMethods;
using O2.Views.ASCX;
using O2.Views.ASCX.classes.MainGUI;
using O2.Views.ASCX.ExtensionMethods;
using O2.External.SharpDevelop.Ascx;
using O2.External.SharpDevelop.AST;
using O2.External.SharpDevelop.ExtensionMethods;
using ICSharpCode.NRefactory;
using ICSharpCode.NRefactory.Ast;   
using O2.DotNetWrappers.H2Scripts;
using O2.Views.ASCX.Ascx.MainGUI;
using O2.Views.ASCX.DataViewers;
using O2.Views.ASCX.CoreControls;
using O2.API.AST.ExtensionMethods.CSharp;
//O2Ref:O2_API_Ast.dll
//O2Ref:O2_External_WinformsUI.dll

namespace O2.XRules.Database.Utils
{

	// Comments: (24 Feb 2010): This was the 6th pass at building an O2 Command Prompt (i.e. simple script editor)	
	
    public class ascx_Simple_Script_Editor: UserControl
    {            
    	private static IO2Log log = PublicDI.log;
		public ascx_SourceCodeViewer sourceCodeViewer {get ; set;}
		public ascx_SourceCodeViewer commandsToExecute {get ; set;}
		public RichTextBox result_RichTextBox {get ; set;}
		public Panel result_Panel{get ; set;}
		public Button executeButton {get ; set;}
		public TextBox currentScriptPath {get ; set;}
		
		//public SplitContainer topLevelSplitContainer {get ; set;}
        public SplitContainer splitContainer_CommandBox {get ; set;}
        public SplitContainer splitContainer_TopLevel {get ; set;}
        public SplitContainer splitContainer_Results { get; set; }

		public CSharp_FastCompiler csharpCompiler {get ; set;}
		public string GeneratedCode {get ; set;}
		public Dictionary<string, object> InvocationParameters {get ; set;}
        public bool AutoCompileOnCodeChange { get; set; }
        public bool AutoSaveOnCompileSuccess { get; set; }        
        public string AutoSaveDir { get; set; }
		public int width = 300;
		public int height = 300;
        public bool ExecuteOnEnter { get; set; }
        public object ReturnData { get; set; }
		public MethodInvoker onCompilationOk {get ;set;}

        public string defaultCode = "PublicDI.log.info(\"Dynamic Data: {0},{1}\", testString, testNumber);"
                               .line("return \"Dynamic Data = \" + testString + \" :: \" + testNumber;");
    		

        public static void startControl()
    	{
            //width = 700;    // make it bigger
            //height = 300;
                		
    		//var control2 = O2Gui.load<PropertyGrid>();
    		//return;
            //var control = (ascx_Simple_Script_Editor)typeof(ascx_Simple_Script_Editor).showAsForm("O2 Simple Script Editor", 500, 500);			
            var control = O2Gui.load<ascx_Simple_Script_Editor>("O2 Simple Script Editor", 700, 300);
            
    		control.invokeOnThread(()=>
    		{   
    			//control.createGui();
				//control.configureGui();
    			control.InvocationParameters.Add("testString", "Hello World");
    			control.InvocationParameters.Add("testNumber", 42);
                control.commandsToExecute.set_Text(control.defaultCode);
    		});
    	}

        public ascx_Simple_Script_Editor() : this (true)
        {

        }

        public ascx_Simple_Script_Editor(bool codeCompleteSupport)        
    	{
            this.Width = width;
            this.Height = height;                        
    		InvocationParameters = new Dictionary<string, object>();
            InvocationParameters.Add("returnData", ReturnData); // add the (previous script) execute return data 
            AutoCompileOnCodeChange = true;
            AutoSaveOnCompileSuccess = true; //  false;  // for now default to true
            AutoSaveDir = "".tempO2Dir().pathCombine("_AutoSavedScripts");
			setCompilerEnvironment();            
            
			createGui();
			configureGui();

            //enabled code complete
            ExecuteOnEnter = false;
            if (codeCompleteSupport)
            {
                commandsToExecute.enableCodeComplete();
                commandsToExecute.editor().o2CodeCompletion.UseParseCodeThread = false;
            }
            this.Refresh();
        }
        
        private void createGui()
        {
        	// create controls

            var groupBoxes = this.add_1x1("Command To Execute", "Invoke and Result", true, this.Width - 150);   
        	
        	commandsToExecute = groupBoxes[0].add_SourceCodeViewer();
            commandsToExecute.document().TextEditorProperties.EnableFolding = false;
			//currentScriptPath = commandsToExecute.insert_Below<TextBox>();
			
            splitContainer_CommandBox = (SplitContainer)groupBoxes[0].Parent.Parent;
            splitContainer_CommandBox.Panel2MinSize = 110;
            splitContainer_CommandBox.FixedPanel = FixedPanel.Panel2;
            var bottomPanel = this.add_GroupBox("Generated Source Code");

        	sourceCodeViewer = bottomPanel.add_SourceCodeViewer();            			
			
            splitContainer_CommandBox.insert_Below(bottomPanel,200);//, 200);
        	
			executeButton = this.add_Button("Execute");        	        	
        	executeButton.fill(); 
        	        	        
        	var outputPanel = groupBoxes[1].add_GroupBox("Output");  
        	var controls = outputPanel.insert_Above(executeButton,60);

			splitContainer_TopLevel = (SplitContainer)this.Controls[0];
            splitContainer_Results = (SplitContainer)controls[0];

			result_RichTextBox = outputPanel.add_RichTextBox();            
        	
        	result_Panel = outputPanel.add_Panel();
        	        	
        }
         
        public void configureGui()
        {
        	result_Panel.visible(false);
        	executeButton.enabled(false);
            commandsToExecute.textEditor().showInvalidLines(false);
        	
        	swapGeneratedCodeViewMode();         	// make it not visible by default        	

        	executeButton.onClick(execute);                	
        	commandsToExecute.onTextChanged(onTextChanged);        	
            
        	commandsToExecute.editor().vScroolBar_Enabled(false);
            commandsToExecute.editor().hScroolBar_Enabled(false);
        	commandsToExecute.set_ColorsForCSharp();
        	
        	commandsToExecute.allowCompile(false);
        	sourceCodeViewer.allowCompile(false);
        	
        	sourceCodeViewer.astDetails(false);
        	commandsToExecute.astDetails(false);
        	sourceCodeViewer.textEditorControl().remove_ContextMenu();        	
        	var contextMenu = commandsToExecute.textEditorControl().add_ContextMenu();        	
        	
        	commandsToExecute.textArea().KeyUp+= (sender,e) => handlePressedKeys(e);
            commandsToExecute.textArea().KeyEventHandler += handleKeyEventHandler;
            contextMenu.add_MenuItem("current source code")
                       .add_MenuItem("compile", (menuitem) => compile())
                       .add_MenuItem("save", (menuitem) => saveScript())
                       .add_MenuItem("save As", (menuitem) => saveAsScript())
                       .add_MenuItem("what is the current loaded filename", (menuitem) => "The path of the currently loaded file is: {0}".info(currentSourceCodeFilePath()))
                       .add_MenuItem("force compilation", (menuitem) => forceCompilation())
                       .add_MenuItem("replace with generated source code", (menuitem) => replaceMainCodeWithGeneratedSource())
                       .add_MenuItem("show/hide generated source code", (menuitem) => swapGeneratedCodeViewMode())
                       .add_MenuItem("clear AssembliesCheckedIfExists list", (menuitem) => O2Svn.clear_AssembliesCheckedIfExists())
                       .add_MenuItem("clear CachedCompiledAssemblies list", (menuitem) => CompileEngine.CachedCompiledAssemblies.Clear());
                       //.add_MenuItem("[Internal Debugging]",false, (menuitem) => swapGeneratedCodeViewMode())
                       //.add_MenuItem("reset assembly  download list", () => {  new O2.Kernel.CodeUtils.O2Svn.clear_AssembliesCheckedIfExists();  }); 
            contextMenu.add_MenuItem("execution options")
                       .add_MenuItem("execute", (menuitem) => execute())
                       .add_MenuItem("enable /disable Execute on enter", (menuitem) => ExecuteOnEnter = !ExecuteOnEnter)
                       .add_MenuItem("disable / enabled Auto compile on code change", (menuitem) => AutoCompileOnCodeChange = !AutoCompileOnCodeChange);
            contextMenu.add_MenuItem("auto saved scripts")
                       .add_MenuItem("show auto saved scripts", (menuitem) => showAutoSavedScripts())
                       .add_MenuItem("enable / disable Auto Save on compile success", (menuitem) => AutoSaveOnCompileSuccess = !AutoSaveOnCompileSuccess);                            
            contextMenu.add_MenuItem("code complete")                       
                       .add_MenuItem("enable Code Complete", (menuitem) => commandsToExecute.enableCodeComplete())
                       .add_MenuItem("enable /disabled 'Only Show Code Complete Results From O2 Namespace'", (menuitem) => enableDisableFullCodeComplete());
            contextMenu.add_MenuItem("code snippets (helper)")
                       .add_MenuItem("generate debug symbols (and create temp assembly)", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("when compiling, only add referenced assemblies", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("add using statement", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("add additional source code (when compile)", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("add external reference (dll or exe or GAC assembly)", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("run in STA thread (when invoke)", (menuitem) => insertCodeSnipptet(menuitem.Text))
                       .add_MenuItem("run in MTA thread (when invoke)", (menuitem) => insertCodeSnipptet(menuitem.Text));
            contextMenu.add_MenuItem("show Log Viewer", (menuitem) => showLogViewer());
            

     	}     	

        public void insertCodeSnipptet(string snippetToInsert)
        {
            switch (snippetToInsert)
            {
                case "generate debug symbols (and create temp assembly)":
                    commandsToExecute.insert_Text("".line() + "//generateDebugSymbols".line()); 
                    break;
                case "when compiling, only add referenced assemblies":
                    commandsToExecute.insert_Text("".line() + "//O2Tag_OnlyAddReferencedAssemblies".line());
                    break;
                case "add using statement":
                    commandsToExecute.insert_Text("".line() + "//using:".line());
                    break;
                case "add additional source code (when compile)":
                    commandsToExecute.insert_Text("".line() + "//O2File:".line());
                    break;
                case "add external reference (dll or exe or GAC assembly)":
                    commandsToExecute.insert_Text("".line() + "//O2Ref:".line());
                    break;
                case "run in STA thread (when invoke)":
                    commandsToExecute.insert_Text("".line() + "//StaThread:".line());
                    break;
                case "run in MTA thread (when invoke)":
                    commandsToExecute.insert_Text("".line() + "//MtaThread:".line());
                    break;
                default:
//                    commandsToExecute.insert_Text(".........");                    
                    break;
            }
        }
	    public void setCompilerEnvironment()
	    {                     
	    	csharpCompiler = new CSharp_FastCompiler();     
					
			csharpCompiler.beforeSnippetAst = 
     		 	()=>{
     		 			csharpCompiler.InvocationParameters = this.InvocationParameters;
     		 		};	    	
     		
     		
	    	csharpCompiler.onAstFail = 
     			()=>{        					     					
     					//"AST creation failed".error();
     					sourceCodeViewer.enabled(false);    	 				
	     				executeButton.enabled(false);
    	 				result_RichTextBox.textColor(Color.Red)
     		 							  .set_Text("Ast Parsing Errors:\r\n\r\n")										  
										  .append_Text(csharpCompiler.AstErrors);
	     			};
	     			 
	     	csharpCompiler.onAstOK = 
	     		()=>{		     		     			
	     				commandsToExecute.editor().refresh();
	     				sourceCodeViewer.enabled(true);
	     				commandsToExecute.invokeOnThread(()=>commandsToExecute.Refresh());;
	     				GeneratedCode = csharpCompiler.SourceCode;                        
                        commandsToExecute.updateCodeComplete(csharpCompiler);	     				
						sourceCodeViewer.setDocumentContents(csharpCompiler.SourceCode);
     		 		};     		      		 
     		 		
     		 csharpCompiler.onCompileFail = 
     		 	()=>{
     		 			//"AST OK, but compilation failed".error();
                        executeButton.enabled(false);
                        Location codeOffset = csharpCompiler.getGeneratedSourceCodeMethodLineOffset();
     		 			csharpCompiler.CompilationErrors.runForEachCompilationError( 
     											  (row,col)=> 
     											  	{ 
     											  		sourceCodeViewer.editor().setSelectedText(row,col, true,false);                                                        
                                                        commandsToExecute.editor().setSelectedText(
                                                            row - codeOffset.Line, 
                                                            col - codeOffset.Column,
                                                            true, /*showAsError*/ 
                                                            false, /*showAsBookMark*/ 
                                                            false); /*decrementLineAndColumn*/
     											  		
     											  	});
     		 			result_RichTextBox.textColor(Color.Red)
     		 							  .set_Text("Compilation Errors:\r\n\r\n")										  
										  .append_Text(csharpCompiler.CompilationErrors);
						
     		 		};
     		 csharpCompiler.onCompileOK =
     		 	()=>{
     		 			"Compilation OK".debug();
     		 			commandsToExecute.editor().refresh();
     		 			sourceCodeViewer.editor().refresh();
     		 			result_RichTextBox.set_Text("Compilation OK:\r\n\r\n")
										  .textColor(Color.Green);
						executeButton.enabled(true);
                        if (AutoSaveOnCompileSuccess && Code != defaultCode)
                        {
                            AutoSaveDir.createDir();    // make sure it exits
                            var targetFile = AutoSaveDir.pathCombine(Files.getFileSaveDateTime_Now().trim() + ".cs");
                            targetFile.fileWrite(Code);
                        }
                        if (onCompilationOk != null)
                        	onCompilationOk();
					};
     		 		 
	    }	         	

        public void onTextChanged(string newText)
        {
            if (AutoCompileOnCodeChange)
            {
                compileCodeSnippet(newText);
            }
        }

        public void compile()
        {
            compileCodeSnippet(commandsToExecute.get_Text());
        }

		public void compileCodeSnippet(string codeSnippet)
     	{     		 
     		try
     		{
	     		result_RichTextBox.visible(true);
	     		result_Panel.visible(false);
	     		if (codeSnippet.size() > 200)
	     		{
	                commandsToExecute.editor().vScroolBar_Enabled(true);
	                commandsToExecute.editor().hScroolBar_Enabled(true);
	        	}
	     		commandsToExecute.editor().clearBookmarksAndMarkers();     	
	     		var currentFile = commandsToExecute.editor().getFullPathTOCurrentSourceCodeFile();
	     		if (currentFile.fileExists())
	     			csharpCompiler.SourceCodeFile = currentFile;
	     		csharpCompiler.compileSnippet(codeSnippet);
				if (commandsToExecute.editor().o2CodeCompletion.notNull())
	            	commandsToExecute.editor().o2CodeCompletion.addReferences(csharpCompiler.ReferencedAssemblies);            
			}
			catch(Exception ex)
			{
				ex.log("in ascx_Simple_Script_Editor compileCodeSnippet",true);
			}
     	}     	
     	
     	public void forceCompilation()
     	{
     		var dummyclass = "public class test".line() + 
     						 "{".line() +
     						 "	public void testMethod()".line() +
     						 "	{".line() +
     						 commandsToExecute.get_Text().line() + 
     						 "	}".line() +
     						 "}".line();
     		sourceCodeViewer.enabled(true);
			sourceCodeViewer.set_Text(dummyclass);
     		csharpCompiler.compileSourceCode(dummyclass);
     	}
     	
     	public void replaceMainCodeWithGeneratedSource()
     	{
	     	commandsToExecute.set_Text(sourceCodeViewer.get_Text());
	    }

        public void showLogViewer()
        { 
            var logViewer = this.add_Control<ascx_LogViewer>();
            this.insert_Below(logViewer,100);
        }

        public void showAutoSavedScripts()
        {
            O2Thread.mtaThread(
                () =>
                {
                    var panel2 = O2Gui.open<Panel>("Search AutoSaved Scripts", 800, 300);
                    var autoSaveDir = "".tempO2Dir().pathCombine("_AutoSavedScripts");
                    var controls = panel2.add_1x1("Files", "Content", true, 200);
                    var sourceViewer = controls[1].add_SourceCodeViewer();
                    var directory = controls[0].add_Directory();
                    directory.afterFileSelect((file) => sourceViewer.open(file));
                    directory.open(autoSaveDir);
                });
        }

        public bool handleKeyEventHandler(char key)
        {
            if (ExecuteOnEnter && key == 10)
            {
                "Executing method".debug();
                execute();
                return true;
            }
            return false;
        }
        private void handlePressedKeys(KeyEventArgs e)
        {
            //var currentOffset = commandsToExecute.textArea().Document.PositionToOffset(commandsToExecute.editor().caretLine);
            //commandsToExecute.textArea().Document.Remove(currentOffset, 1);
            //e.KeyCode.str().info();
            //O2.Kernel.PublicDI.log.debug("KeyUp: " + e.KeyValue.ToString()); ;                
            if (e.Modifiers == Keys.Control && e.KeyValue == 'B')           // Ctrl+B compiles code
            {
                "Compiling code".debug();
                compileCodeSnippet(Code);
                
            }
            if (e.Modifiers == Keys.Control && e.KeyValue == 'S')           // Ctrl+B compiles code
            {
                "Saving Script".debug();
                saveScript();
                
            }
            else if (e.KeyValue == 116 ||                                       // F5 (key 116) and 
                (e.Modifiers == Keys.Control && e.KeyValue == 'R') ||           // Ctrl+R  executes it
                (e.Modifiers == Keys.Control && e.KeyValue == 13))              // Ctrl+Enter  executes it
            {
                "Executing method".debug();
                execute();
            }            
        }

     	public void execute()
     	{     		
     		if (executeButton.Enabled)
     		{
                result_RichTextBox.textColor(Color.Black).set_Text("Executing code");	  
     			O2Thread.mtaThread(()=> showResult(csharpCompiler.executeFirstMethod()));
     		}
     	}
     	
     	public void showResult(object result)
     	{
            ReturnData = result;
            csharpCompiler.InvocationParameters["returnData"] = ReturnData;
     		result_RichTextBox.visible(false);
     		result_Panel.visible(false);
            result_Panel.clear();

     		if (result == null)
     			result = "[null value]";
            /*else if (result is string && false == result.str().isFile() && result.str().isUri())
            {
                result_Panel.visible(true);
                result_Panel.add_WebBrowser().open(result.str().uri());
                return;
            }*/
            // displaying the files by default was causing a lot of nasty side effects (namely for large files)
            /*else if (result is string && result.str().isFile())
            {
                result_Panel.visible(true);
                var textToShow = "File Contents For: {0} \r\n\r\n {1}".format(result, result.str().fileContents());
                result_Panel.add_RichTextBox().set_Text(textToShow);
                //result_Panel.add_TextBox(true).set_Text(textToShow);
                return;
            } */           
            
     		switch(result.typeName())
     		{
                case "Boolean":
     			case "String":
                case "Int64":
                case "Int32":
                case "Int16":
                case "Byte":
     				result_RichTextBox.visible(true);
     				result_RichTextBox.textColor(Color.Black).set_Text(result.ToString());
     				break;
                case "Bitmap":
                    result_Panel.visible(true);
                    result_Panel.add_PictureBox().load((Bitmap)result);
                    break;
     			default:
                    result_Panel.visible(true);
                    var showInfo = result_Panel.add_Control <ascx_ShowInfo>();
     				//result_PropertyGrid.visible(true);
                    showInfo.show(result);
     				break;
     		}
     		
	     	
     	}
     	
     	public string currentSourceCodeFilePath()
     	{
     		return commandsToExecute.editor().getFullPathTOCurrentSourceCodeFile();
     	}
     	
     	public void saveScript()
     	{
            if (currentSourceCodeFilePath().fileExists())
            {
            	"Script saved to: {0}".info(currentSourceCodeFilePath());
                commandsToExecute.editor().saveSourceCode();
            }
            else
            	saveAsScript();
		}
		
		public void saveAsScript()
		{
                this.invokeOnThread(
                    () =>
                    {
                        var defaultH2ScriptFolder = @"C:\O2\_XRules_Local\H2Scripts";
                        Files.checkIfDirectoryExistsAndCreateIfNot(defaultH2ScriptFolder);
                        var targetFile = O2Forms.askUserForFileToSave(defaultH2ScriptFolder, ".h2");
                        if (targetFile.valid())
                        {
                            var h2Script = new H2(commandsToExecute.get_Text());
                            h2Script.save(targetFile);
                        }
                        "target: {0}".info(targetFile);
                    });
     	}

        public void swapGeneratedCodeViewMode()
        {
            this.invokeOnThread(
                () =>
                {
                    splitContainer_TopLevel.Panel2Collapsed = !splitContainer_TopLevel.Panel2Collapsed;
                    if (isGeneratedSourceCodeVisible())
                        compileCodeSnippet(commandsToExecute.get_Text());
                });
        }
     	
     	public void showGeneratedSourceCode()
     	{
            if (splitContainer_TopLevel.Panel2Collapsed)
     			swapGeneratedCodeViewMode();
     	}
     	
     	public bool isGeneratedSourceCodeVisible()
     	{
            return !splitContainer_TopLevel.Panel2Collapsed;
     	}

        public void enableCodeComplete()
        {            
            commandsToExecute.enableCodeComplete();
            commandsToExecute.editor().o2CodeCompletion.UseParseCodeThread = false;
        }
        
        public void enableDisableFullCodeComplete()
		{
			var o2CodeCompletion = commandsToExecute.editor().o2CodeCompletion;
			if (o2CodeCompletion.notNull())
				o2CodeCompletion.OnlyShowCodeCompleteResulstFromO2Namespace = !o2CodeCompletion.OnlyShowCodeCompleteResulstFromO2Namespace;
		}

     	public string Code 
     	{
     		get 
     		{
     			return commandsToExecute.get_Text();
     		}
     		
     		set
     		{
     			commandsToExecute.set_Text(value);
     		}
     	}        
    }
}
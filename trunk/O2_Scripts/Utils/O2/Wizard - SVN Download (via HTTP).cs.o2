// This file is part of the OWASP O2 Platform (http://www.owasp.org/index.php/OWASP_O2_Platform) and is released under the Apache 2.0 License (http://www.apache.org/licenses/LICENSE-2.0)
using System;
using System.IO;
using System.Drawing;
using System.Linq;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using System.Windows.Forms;
using O2.Kernel;
using O2.Interfaces.O2Core;
using O2.Kernel.CodeUtils;
using O2.DotNetWrappers.DotNet;
using O2.DotNetWrappers.Windows;
using O2.DotNetWrappers.Network;
using O2.DotNetWrappers.ExtensionMethods;
using O2.Views.ASCX;
using O2.Views.ASCX.CoreControls;
using O2.Interfaces.Views;
using O2.Views.ASCX.classes;
using O2.Views.ASCX.MerlinWizard;
using O2.DotNetWrappers.Zip;
//O2Ref:merlin.dll
using Merlin;
using MerlinStepLibrary;
using System.Threading;
//O2Ref:O2_Core_XRules.dll
using O2.Core.XRules.Classes;
using O2.Views.ASCX.MerlinWizard.O2Wizard_ExtensionMethods;


namespace O2.XRules.Database.Utils
{		
    [O2Wizard]
	public class Wizard_SvnCheckout
	{
		private static IO2Log log = PublicDI.log;
		
        //public static string testTargetFolder = PublicDI.config.getTempFolderInTempDirectory("Svn Checkout");
		public static string svnUrl = "";
		public static string targetFolder = "";
		
		[StartWizard]
        public Thread runWizard()
        {        
            var o2Wizard = new O2Wizard("Check out SVN projects", 600,400);
            o2Wizard.Steps.add_Panel("Provide details about SVN server","", provideDetails);
            o2Wizard.Steps.add_Action("Confirm SVN download", confirmSvnDownload);
                    	
            o2Wizard.Steps.add_Action("Download Files", downloadFiles);
            o2Wizard.Steps.add_Action("Downloaded Files", downloadedFiles);
            
            return o2Wizard.start();            
        }
                
        public void provideDetails(IStep step)
        {        	        	
        	var svnUrl_TextBox = step.add_Label("SVN URL",20,20).append_TextBox("",
        										(value)=> svnUrl = value , 
        										true);
        										
        	var targetFolder_TextBox = step.add_Label("Target Folder (local path):",80,20).append_TextBox("",
        											  (value)=> targetFolder = value,
        											  true);
        	
        	svnUrl_TextBox.Width = 400;        	
        	targetFolder_TextBox.Width = 400;
        	
        	targetFolder_TextBox.append_Link("temp folder",
        		()=> targetFolder_TextBox.set_Text(PublicDI.config.getTempFolderInTempDirectory(""))).Top += 2;
        	
        	var link = step.add_Link("Test: Checkout O2's XRules Database", 140,20,
        		()=>{        				
        				svnUrl_TextBox.set_Text(WebEncoding.urlDecode(PublicDI.config.SvnO2DatabaseRulesFolder));
        				targetFolder_TextBox.set_Text(PublicDI.config.getTempFolderInTempDirectory("O2_SVN_XRules_Database"));
        			});
        	
        	
        	//link.click();
        	//step.next();        	        	
 		}       
 		
 		public void confirmSvnDownload(IStep step)
 		{
 			var message = string.Format("Before we download all files from the provided SVN code repository, {0}" +  
 										"please confirm the details below:" +
        								"{0}{0}  SVN Url = {1}" + 
        								"{0}{0}  Local Folder = {2}" + 
        								"{0}{0}Note that the local files will be deleted!{0}", 
        								Environment.NewLine, 
        								svnUrl , 
        								targetFolder);
        								
        	step.set_Text(message);
        	        	
        	((TextBox)step.FirstControl).goToEnd();    
        	
        	//step.next();
 		}
        
        public void downloadFiles(IStep step)
        {
        	O2Thread.mtaThread(
			()=> {			
        		step.allowNext(false);
				step.allowBack(false);						
				var textBox = (TextBox)step.FirstControl;
				
				textBox.append_Line(" .... Deleting local database: {0}", targetFolder);				
				if (Directory.Exists(targetFolder))
					Files.deleteFolder(targetFolder,true);
				else
  					Files.checkIfDirectoryExistsAndCreateIfNot(targetFolder);				
				textBox.append_Line(" .... Calculating files to download");
                var svnMappedUrls = SvnApi.HttpMode.getSvnMappedUrls(svnUrl, true);
				textBox.append_Line(" .... There are {0} files & folders to download {1}" , svnMappedUrls.Count(), Environment.NewLine);
				
				foreach(var svnMappedUrl in svnMappedUrls)				
				{								
						textBox.append_Line("   * Downloading: {0}", WebEncoding.urlDecode(svnMappedUrl.FullPath.Replace(svnUrl, "")));
						SvnApi.HttpMode.download(svnMappedUrl, svnUrl, targetFolder);										
				}
				
				textBox.append_Line("{0}{0} .... Download complete", Environment.NewLine);
															
				step.allowNext(true);
				step.allowBack(true);						
			});			
        }
        
        public void downloadedFiles(IStep step)
        {        	
        	step.add_Directory(targetFolder);
        }
	}		
}

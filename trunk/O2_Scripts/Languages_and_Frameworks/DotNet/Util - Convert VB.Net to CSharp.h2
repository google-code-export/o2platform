<?xml version="1.0"?>
<H2>
  <SourceCode>
var topPanel = O2Gui.open&lt;Panel&gt;("Util - Convert VB to CSharp (or CSharp to VB)",700,500);
var mainGui = topPanel.add_1x1("Files", "Source Code",true, 200); 
var code = mainGui[1].add_1x1("CSharp", "VB.Net",false); 
var sourceFiles = mainGui[0].add_TreeView().showSelection();
var csharpCode = code[0].add_SourceCodeViewer();
var vbCode = code[1].add_SourceCodeViewer();
var targetDirectory = PublicDI.config.getTempFolderInTempDirectory("_DotNet_CodeTransformation");

var actionsPanel = sourceFiles.parent()
							  .insert_Above&lt;Panel&gt;(100)
							  .add_GroupBox("Options");

Func&lt;string,string, string&gt; transformFile_CS_to_VB =
	(fullPath, virtualPath)=&gt;{
	
				var astCSharp = new Ast_CSharp(fullPath);
				var transformedFile = targetDirectory.pathCombine(virtualPath);
				transformedFile = transformedFile.replaceLast(".cs",".vb");
				transformedFile.directoryName().createDir();
				
				astCSharp.AstDetails.VBNetCode.save(transformedFile);				
				"transformed {0} -&gt; {1}".info(virtualPath, transformedFile);
				return transformedFile;
			};

Func&lt;string,string, string&gt; transformFile_VB_to_CS =
	(fullPath, virtualPath)=&gt;{
	
				var astCSharp = new Ast_CSharp(fullPath);
				var transformedFile = targetDirectory.pathCombine(virtualPath);
				transformedFile = transformedFile.replaceLast(".vb",".cs");
				transformedFile.directoryName().createDir();
				
				astCSharp.AstDetails.CSharpCode.save(transformedFile);				 
				"transformed {0} -&gt; {1}".info(virtualPath, transformedFile);
				return transformedFile;
			};


Action transformAllFiles =
	()=&gt;{
			foreach(var node in sourceFiles.nodes())
			{
				var fullPath =(string)node.get_Tag(); 
				if (fullPath.extension(".vb"))
					transformFile_VB_to_CS(fullPath, node.get_Text()); 
				else
					transformFile_CS_to_VB(fullPath, node.get_Text()); 
				//break;
			}
				
		};

Action&lt;string&gt; setTargetDirectory = 
	(path)=&gt;{
				targetDirectory = path;
			};
	
Action&lt;string&gt; loadFilesFromDirectory = 
	(path)=&gt;{
					sourceFiles.clear();
					var targetFiles = path.files("*.cs",true);
					targetFiles.AddRange(path.files("*.vb",true));  
					foreach(var file in targetFiles)						
					{
						var nodeText = file.remove(path);
						sourceFiles.add_Node(nodeText, file);						
					}
				 };

sourceFiles.afterSelect&lt;string&gt;(
	(file)=&gt;{
				if (file.extension(".cs"))
				{
					csharpCode.open(file);				
					var newFile = transformFile_CS_to_VB(file, sourceFiles.selected().get_Text());	 			
					vbCode.open(newFile);									
				}
				if (file.extension(".vb"))
				{
					vbCode.open(file);		
					var newFile = transformFile_VB_to_CS(file, sourceFiles.selected().get_Text());
					csharpCode.open(newFile);	
				}
				//vbCode.set_Text(astCSharp.AstDetails.VBNetCode,"a.vb");
				
			});

var sourceComboBox = topPanel.insert_Above&lt;Panel&gt;(25)
						    .add_LabelAndComboBoxAndButton("Source folder:","","load",loadFilesFromDirectory)
						    .controls&lt;ComboBox&gt;();
var targetComboBox = topPanel.insert_Above&lt;Panel&gt;(25)
							.add_LabelAndComboBoxAndButton("Target folder: ","","create",setTargetDirectory)
							.controls&lt;ComboBox&gt;();
				
actionsPanel.add_Button("Transform All",0,0,()=&gt; transformAllFiles()).fill();  

sourceComboBox.sendKeys(PublicDI.config.LocalScriptsFolder.line());  

targetComboBox.set_Text(targetDirectory);			
this.sleep(1000);
sourceFiles.selectFirst();


//using O2.External.SharpDevelop.AST
//using O2.API.AST.ExtensionMethods;
//using O2.API.AST.ExtensionMethods.CSharp;
//O2Ref:O2_API_AST.dll
//O2Ref:QuickGraph.dll</SourceCode>
  <ReferencedAssemblies />
</H2>
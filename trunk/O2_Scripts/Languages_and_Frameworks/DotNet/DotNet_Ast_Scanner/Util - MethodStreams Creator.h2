<?xml version="1.0"?>
<H2>
  <SourceCode>//panel.clear();
//globalvars
var fileCache = new FileCache("".tempDir().pathCombine("_fileCache"));

var astData_LoadedFiles = new O2MappedAstData();
String selectedFile = null;

//build gui
//var topPanel = panel;
var topPanel = O2Gui.open&lt;Panel&gt;("Util - MethodStreams Creator",1000,500);
var topPanels = topPanel.add_1x1x1("Source Files and References", "Selected File", "Method Stream Details");  
var sourceFiles = topPanels[0].add_TreeView().showSelection().sort(); 
var sourceFileFilter = sourceFiles.insert_Above&lt;TextBox&gt;(20);
var references = sourceFiles.insert_Below&lt;TextBox&gt;(100).multiLine();
var selectedFileContents = topPanels[1].add_SourceCodeViewer(); 
var selectedFileMethods = selectedFileContents.insert_Below&lt;GroupBox&gt;(100).set_Text("Methods in File").add_TreeView().showSelection().sort(); 
//var methodStreamDetails = topPanels[2].add_PropertyGrid();
//var methodStreamCode = methodStreamDetails.insert_Below&lt;Panel&gt;().add_SourceCodeViewer();
//var methodStreamCode = topPanels[2].add_SourceCodeViewer();
var methodStreamCode = topPanels[2].add_Control&lt;ascx_ManualMethodStreams&gt;();
methodStreamCode.buildGui();

var selectedFilePanel = selectedFileContents.insert_Below&lt;Panel&gt;(20);

var currentINodeLabel = selectedFilePanel.add_Label("Current INode");

//methods
Func&lt;O2MappedAstData, string, ICSharpCode.TextEditor.Caret,INode&gt; findINodeAtCaretLocation = 
	(astData, file, caret)=&gt;
		{			
			if (astData!=null)
			{
				var iNode = astData.iNode(file, caret);
				if (iNode != null)	
				{
					//CodeViewer.editor().selectTextWithColor(iNode);	
					if (iNode is TypeReference)
						iNode = iNode.Parent;
						
					//CurrentINode = iNode;
					currentINodeLabel.set_Text("current iNode:{0}".format(iNode.typeName()));						
					return iNode;
					//"current iNode:{0} : {1}".debug(iNode.typeName(), iNode);	
					
					//createAndShowCodeStream(iNode);
				}
			}
			return null;
		};

Action loadReferences = 		
	()=&gt;{
			var referencesToLoad = references.get_Text().lines();
			"Loading {0} References".info(referencesToLoad.size());
			foreach(var reference in referencesToLoad)
				astData_LoadedFiles.O2AstResolver.addReference(reference);			
		};
						
Action&lt;List&lt;string&gt;,string&gt; showSourceFiles = 
	(filesToLoad, filter)=&gt; {								
								sourceFiles.clear();
								foreach(var file in astData_LoadedFiles.files())
									if (filter.valid().isFalse() || file.regEx(filter))
									sourceFiles.add_Node(file.fileName(),file);	
							};
Action refreshSourceFiles = ()=&gt; showSourceFiles(astData_LoadedFiles.files(),sourceFileFilter.get_Text());																

Action clearO2MethodStreamCache = ()=&gt; O2MethodStream_ExtensionMethods.O2MethodStreamCache.Clear();

Func&lt;IMethod,string&gt; createMethodStream =
	(iMethod)=&gt; {							
					return astData_LoadedFiles.createO2MethodStream_UseCache_ReturnFile(iMethod, fileCache, ".cs");										
				};

Action&lt;string&gt; createMethodStreamForFile = 
	(file)=&gt;{
				"Creating all method streams for file: {0}".debug(file); 
				var allINodes = astData_LoadedFiles.FileToINodes[file];
				if (allINodes.NodesByType.hasKey("MethodDeclaration"))
				{
					foreach(var methodDeclaration in allINodes.NodesByType["MethodDeclaration"])
					{
						var iMethod = astData_LoadedFiles.iMethod(methodDeclaration as MethodDeclaration);
						if (iMethod.notNull())
							createMethodStream(iMethod);
					}
					"Created all method streams for file: {0}".debug(file);
				}
			};

Action createMethodStreamForSelectedFile = 
	()=&gt;{
			var targetFile = sourceFiles.selected().Tag.str();			
			createMethodStreamForFile(targetFile);			
		};
Action createMethodStreamForSelectedAllFileterdFiles = 		
	()=&gt;{
			var filesToProcess = new List&lt;string&gt;();
			foreach(var node in sourceFiles.nodes())
				filesToProcess.Add(node.Tag.str());
		
			"Creating method streams for {0} files".lineBeforeAndAfter().debug(filesToProcess.size());
			
			foreach(var file in filesToProcess)
				createMethodStreamForFile(file);
				
			"Created method streams for {0} files".lineBeforeAndAfter().debug(filesToProcess.size());	
				
		};
// events

sourceFileFilter.onEnter((text)=&gt;refreshSourceFiles());

sourceFiles.afterSelect&lt;string&gt;(
	(file)=&gt;{
				selectedFile = file;
				selectedFileContents.open(file);				
				selectedFileMethods.clear();
				try
				{
					var allINodes = astData_LoadedFiles.FileToINodes[file];
					foreach(var methodDeclaration in allINodes.NodesByType["MethodDeclaration"])
					{
						var iMethod = astData_LoadedFiles.iMethod(methodDeclaration as MethodDeclaration);
						if (iMethod.notNull())
							selectedFileMethods.add_Node(iMethod.fullName(), methodDeclaration);
						else
							selectedFileMethods.add_Node(methodDeclaration.str(), methodDeclaration); 
					}
				}
				catch(Exception ex)
				{
					ex.log("sourceFiles.afterSelect");
				}
			});

selectedFileContents.onCaretMove(
	(caret)=&gt;{				
				methodStreamCode.set_Text("");
				O2Thread.mtaThread(
					()=&gt;{
							try
							{
								IMethod iMethod = null;
								var iNode = findINodeAtCaretLocation(astData_LoadedFiles, selectedFile,caret);
								
								if (iNode is Expression)
				 				{
									iMethod = astData_LoadedFiles.fromExpressionGetIMethod(iNode as Expression);
									if (iMethod.notNull())					
										"Found method called IMethod: {0}".debug(iMethod.DotNetName);											
									else
										"Could NOT resolve INode expression into IMethod: {0}".debug(iNode.str());
								}
								else 
									if (iNode is MethodDeclaration)
									{
										iMethod = astData_LoadedFiles.iMethod(iNode as MethodDeclaration);										
									}								
								
								if (iMethod.notNull())
								{
									"creating method stream for: {0}".format(iMethod.DotNetName); 
									var csharpCodeFile = createMethodStream(iMethod);
									methodStreamCode.loadFile(csharpCodeFile); 
									//methodStreamCode.set_Text(methodStream.csharpCode(),".cs");
								}						
							}
							catch(Exception ex)
							{
								ex.log("in selectedFileContents.onCaretMove",true);
							}
					});
			});


			 
sourceFiles.onDrop(
	(fileOrFolder)=&gt;{
						sourceFiles.backColor(Color.Azure);						
						O2Thread.mtaThread(
							()=&gt;{
									"Loading file(s) from {0}".info(fileOrFolder);
									if(fileOrFolder.fileExists()) 
										astData_LoadedFiles.loadFile(fileOrFolder);
									else
										if(fileOrFolder.isFolder())
										{
											clearO2MethodStreamCache();
											astData_LoadedFiles = new O2MappedAstData();
											loadReferences();																						
											astData_LoadedFiles.loadFiles(fileOrFolder.files("*.cs",true));
										}
									refreshSourceFiles();
									sourceFiles.backColor(Color.White);
									//topPanels[0].clear();
									//topPanels[0].add_TreeViewWithFilter(astData_SelectedFile.files());
								});
					
					});

selectedFileMethods.afterSelect&lt;MethodDeclaration&gt;(
	(methodDeclaration)=&gt;{						
							selectedFileContents.editor().setSelectedLineNumber(methodDeclaration.StartLocation.Line);
							selectedFileMethods.focus();
							//selectedFileContents.editor().caret(methodDeclaration.StartLocation.Line, methodDeclaration.StartLocation.Column);
							//show.info(methodDeclaration);
						 });
			 
//astData_LoadedFiles.afterSelect_ShowInSourceCodeEditor(selectedFileMethods,selectedFileContents.editor());
			
//Menu items
references.add_ContextMenu()
		  .add_MenuItem("Reload References", true, ()=&gt; loadReferences())
		  .add_MenuItem("Clear O2MethodStreamCache", ()=&gt; clearO2MethodStreamCache());

sourceFiles.add_ContextMenu()
		   .add_MenuItem("Create All MethodStreams for Selected File", true, ()=&gt; createMethodStreamForSelectedFile())
		   .add_MenuItem("Create All MethodStreams for ALL files (currently shown in TreeView)", ()=&gt;createMethodStreamForSelectedAllFileterdFiles()); 
		   
// load test data
references.append_Line("System.Web");
references.append_Line("System.Web.Services");
references.append_Line("System.Data");

var testFiles = @"C:\O2\O2 Demos\HacmeBank_v2.0 (Dinis version - 7 Dec 08)\HacmeBank_v2_WS";


astData_LoadedFiles = (O2MappedAstData)O2LiveObjects.get("astData");


if (astData_LoadedFiles.isNull())
{
	"Creating and populating O2MappedAstData object".debug();
	astData_LoadedFiles = new O2MappedAstData();
	astData_LoadedFiles.loadFiles(testFiles.files("*.cs",true)); 
	foreach(var reference in references.get_Text().lines())
		astData_LoadedFiles.O2AstResolver.addReference(reference);
	O2LiveObjects.set("astData", astData_LoadedFiles);
}

references.insert_Right&lt;Panel&gt;(100).add_PropertyGrid().show(astData_LoadedFiles);
foreach(var file in testFiles.files("*.cs",true))
	sourceFiles.add_Node(file.fileName(),file);


//sourceFiles.select("SqlServerEngine.cs");//.select("InstallToos.cs");
//selectedFileContents.editor().caret(48,25).focus();   
 
//this.sleep(1000);
sourceFiles.select("UserManagement.asmx.cs");//.select("InstallToos.cs");
selectedFileContents.editor().caret(49,20).focus();

return "ok";
//using ICSharpCode.SharpDevelop.Dom;
//using ICSharpCode.NRefactory;
//using ICSharpCode.NRefactory.Ast;
//using O2.External.SharpDevelop.ExtensionMethods;
//using O2.DotNetWrappers.ExtensionMethods
//using O2.API.AST.CSharp
//using O2.API.AST.ExtensionMethods.CSharp
//using O2.XRules.Database.Languages_and_Frameworks.DotNet				
//using O2.Views.ASCX.O2Findings

//O2File:FileCache.cs
//__O2File:ascx_WriteRule.cs
//O2File:ascx_ManualMethodStreams.cs
//O2File:SharpDevelop_O2MappedAstData_ExtensionMethods.cs
//O2File:Ast_Engine_ExtensionMethods.cs 

//O2Ref:O2_API_AST.dll
//O2Ref:O2_ImportExport_OunceLabs.dll

//generateDebugSymbols

//O2File:_Extra_methods_To_Add_to_Main_CodeBase.cs</SourceCode>
  <ReferencedAssemblies />
</H2>